<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Google Java编程风格指南]]></title>
    <url>%2F2018%2F03%2F31%2FJava%2FGoogle%20Java%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[前言这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则， 我们才认为它符合Google的Java编程风格。 与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题， 同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则， 对于那些不是明确强制要求的，我们尽量避免提供意见。 1.1 术语说明在本文档中，除非另有说明： 术语class可表示一个普通类，枚举类，接口或是annotation类型(@interface)术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。其他的术语说明会偶尔在后面的文档出现。 1.2 指南说明本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。 示例中的格式选择不应该被强制定为规则。 源文件基础2.1 文件名源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为.java。 2.2 文件编码：UTF-8源文件编码格式为UTF-8。 2.3 特殊字符2.3.1 空白字符除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着： 所有其它字符串中的空白字符都要进行转义。 制表符不用于缩进。 2.3.2 特殊转义序列对于具有特殊转义序列的任何字符(\b, \t, \n, \f, \r, “, ‘及\)，我们使用它的转义序列，而不是相应的八进制(比如\012)或Unicode(比如\u000a)转义。 2.3.3 非ASCII字符对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。 Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。 例如：12345String unitAbbrev = "μs"; | 赞，即使没有注释也非常清晰String unitAbbrev = "\u03bcs"; // "μs" | 允许，但没有理由要这样做String unitAbbrev = "\u03bcs"; // Greek letter mu, "s" | 允许，但这样做显得笨拙还容易出错String unitAbbrev = "\u03bcs"; | 很糟，读者根本看不出这是什么return '\ufeff' + content; // byte order mark | Good，对于非打印字符，使用转义，并在必要时写上注释 Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行， 你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话) 源文件结构一个源文件包含(按顺序地)： 许可证或版权信息(如有需要) package语句 import语句 一个顶级类(只有一个) 以上每个部分之间用一个空行隔开。 3.1 许可证或版权信息如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。 3.2 package语句package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里) 3.3 import语句3.3.1 import不要使用通配符即，不要出现类似这样的import语句：import java.util.*; 3.3.2 不要换行import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行) 3.3.3 顺序和间距import语句可分为以下几组，按照这个顺序，每组由一个空行分隔： 所有的静态导入独立成组com.google imports(仅当这个源文件是在com.google包下)第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sunjava importsjavax imports组内不空行，按字典序排列。 3.4 类声明3.4.1 只有一个顶级类声明每个顶级类都在一个与它同名的源文件中(当然，还包含.java后缀)。 例外：package-info.java，该文件中可没有package-info类。 3.4.2 类成员顺序类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。 最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如， 新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。 3.4.2.1 重载：永不分离当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。 格式术语说明：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。 4.1 大括号4.1.1 使用大括号(即使是可选的)大括号与if, else, for, do, while语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。 4.1.2 非空块：K &amp; R 风格对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格 (Egyptian brackets): 左大括号前不换行 左大括号后换行 右大括号前换行 如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。 示例： 1234567891011return new MyClass() &#123; @Override public void method() &#123; if (condition()) &#123; try &#123; something(); &#125; catch (ProblemException e) &#123; recover(); &#125; &#125; &#125;&#125;; 4.8.1节给出了enum类的一些例外。 4.1.3 空块：可以用简洁版本一个空的块状结构里什么也不包含，大括号可以简洁地写成{}，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或 try/catch/finally) ，即使大括号内没内容，右大括号也要换行。 示例：1void doNothing() &#123;&#125; 4.2 块缩进：2个空格每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例) 4.3 一行一个语句每个语句后要换行。 4.4 列限制：80或100一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。 例外： 不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。 package和import语句(见3.2节和3.3节)。 注释中那些可能被剪切并粘贴到shell中的命令行。 4.5 自动换行术语说明：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。 我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。 Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧) 4.5.1 从哪里断开自动换行的基本准则是：更倾向于在更高的语法级别处断开。 如果在非赋值运算符处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。 这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;（&lt;T extends Foo &amp; Bar&gt;)，catch块中的管道符号(catch (FooException | BarException e) 如果在赋值运算符处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于foreach语句中的分号。 方法名或构造函数名与左括号留在同一行。 逗号(,)与其前面的内容留在同一行。 4.5.2 自动换行时缩进至少+4个空格自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。 当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。 第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。 4.6 空白4.6.1 垂直空白以下情况需要使用一个空行： 类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。 例外：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。 在函数体内，语句的逻辑分组间使用空行。 类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。 要满足本文档中其他节的空行要求(比如3.3节：import语句)多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。 4.6.2 水平空白除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方： 分隔任何保留字与紧随其后的左括号(()(如if, for catch等)。 分隔任何保留字与其前面的右大括号(})(如else, catch)。 在任何左大括号前({)，两个例外： @SomeAnnotation({a, b})(不使用空格)。 String[][] x = foo;(大括号间没有空格，见下面的Note)。 在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号： 类型界限中的&amp;(&lt;T extends Foo &amp; Bar&gt;)。 catch块中的管道符号(catch (FooException | BarException e)。 foreach语句中的分号。 在, : ;及右括号())后 如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。 类型和变量之间：List list。 数组初始化中，大括号内的空格是可选的，即new int[] {5, 6}和new int[] { 5, 6 }都是可以的。 Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。 4.6.3 水平对齐：不做要求术语说明：水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。 这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。 以下示例先展示未对齐的代码，然后是对齐的代码：12345private int x; // this is fineprivate Color color; // this tooprivate int x; // permitted, but future editsprivate Color color; // may leave it unaligned Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。 这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)， 这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。 4.7 用小括号来限定组：推荐除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。 我们没有理由假设读者能记住整个Java运算符优先级表。 4.8 具体结构4.8.1 枚举类枚举常量间用逗号隔开，换行可选。 没有方法和文档的枚举类可写成数组初始化的格式：1private enum Suit &#123; CLUBS, HEARTS, SPADES, DIAMONDS &#125; 由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。 4.8.2 变量声明4.8.2.1 每次只声明一个变量不要使用组合声明，比如int a, b;。 4.8.2.2 需要时才声明，并尽快进行初始化不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。 局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。 4.8.3 数组4.8.3.1 数组初始化：可写成块状结构数组初始化可以写成块状结构，比如，下面的写法都是OK的：1234567891011121314151617new int[] &#123; 0, 1, 2, 3 &#125;new int[] &#123; 0, 1, 2, 3&#125;new int[] &#123; 0, 1, 2, 3&#125;new int[]&#123;0, 1, 2, 3&#125; 4.8.3.2 非C风格的数组声明中括号是类型的一部分：String[] args， 而非String args[]。 4.8.4 switch语句术语说明：switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(case FOO:或default:)，后面跟着一条或多条语句。 4.8.4.1 缩进与其它块状结构一致，switch块中的内容缩进为2个空格。 每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。 4.8.4.2 Fall-through：注释在一个switch块内，每个语句组要么通过break, continue, return或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组， 任何能表达这个意思的注释都是OK的(典型的是用// fall through)。这个特殊的注释并不需要在最后一个语句组(一般是default)中出现。示例：1234567891011switch (input) &#123; case 1: case 2: prepareOneOrTwo(); // fall through case 3: handleOneTwoOrThree(); break; default: handleLargeNumber(input);&#125; 4.8.4.3 default的情况要写出来每个switch语句都包含一个default语句组，即使它什么代码也不包含。 4.8.5 注解(Annotations)注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：123@Override@Nullablepublic String getNameIfPresent() &#123; ... &#125; 例外：单个的注解可以和签名的第一行出现在同一行。例如：1@Override public int hashCode() &#123; ... &#125; 应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：1@Partial @Mock DataLoader loader; 参数和局部变量注解没有特定规则。 4.8.6 注释4.8.6.1 块注释风格块注释与其周围的代码在同一缩进级别。它们可以是/* ... */风格，也可以是// ...风格。对于多行的/* ... */注释，后续行必须从开始， 并且与前一行的对齐。以下示例注释都是OK的。1234/* * This is // And so /* Or you can * okay. // is this. * even do this. */ */ 注释不要封闭在由星号或其它字符绘制的框架里。 Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用/* ... */。 4.8.7 Modifiers类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。1public protected private abstract static final transient volatile synchronized native strictfp 命名约定 5.1 对所有标识符都通用的规则标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式\w+。 在Google其它编程语言风格中使用的特殊前缀或后缀，如name_, mName, s_name和kName，在Java编程风格中都不再使用。 5.2 标识符类型的规则5.2.1 包名包名全部小写，连续的单词只是简单地连接起来，不使用下划线。 5.2.2 类名类名都以UpperCamelCase风格编写。 类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。 测试类的命名以它要测试的类的名称开始，以Test结束。例如，HashTest或HashIntegrationTest。 5.2.3 方法名方法名都以lowerCamelCase风格编写。 方法名通常是动词或动词短语。 下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：test&lt;MethodUnderTest&gt;_&lt;state&gt;，例如testPop_emptyStack。 并不存在唯一正确的方式来命名测试方法。 5.2.4 常量名常量名命名模式为CONSTANT_CASE，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？ 每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时， 考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。 只是永远不打算改变对象一般是不够的，它要真的一直不变才能将它示为常量。1234567891011121314// Constantsstatic final int NUMBER = 5;static final ImmutableList&lt;String&gt; NAMES = ImmutableList.of("Ed", "Ann");static final Joiner COMMA_JOINER = Joiner.on(','); // because Joiner is immutablestatic final SomeMutableType[] EMPTY_ARRAY = &#123;&#125;;enum SomeEnum &#123; ENUM_CONSTANT &#125;// Not constantsstatic String nonFinal = "non-final";final String nonStatic = "non-static";static final Set&lt;String&gt; mutableCollection = new HashSet&lt;String&gt;();static final ImmutableSet&lt;SomeMutableType&gt; mutableElements = ImmutableSet.of(mutable);static final Logger logger = Logger.getLogger(MyClass.getName());static final String[] nonEmptyArray = &#123;"these", "can", "change"&#125;; 这些名字通常是名词或名词短语。 5.2.5 非常量字段名非常量字段名以lowerCamelCase风格编写。 这些名字通常是名词或名词短语。 5.2.6 参数名参数名以lowerCamelCase风格编写。 参数应该避免用单个字符命名。 5.2.7 局部变量名局部变量名以lowerCamelCase风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。 虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。 即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。 5.2.8 类型变量名类型变量可用以下两种风格之一进行命名： 单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。 以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。5.3 驼峰式命名法(CamelCase)驼峰式命名法分大驼峰式命名法(UpperCamelCase)和小驼峰式命名法(lowerCamelCase)。 有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如”IPv6”或”iOS”)。Google指定了以下的转换方案。 名字从散文形式(prose form)开始: 把短语转换为纯ASCII码，并且移除任何单引号。例如：”Müller’s algorithm”将变成”Muellers algorithm”。 把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。 推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如”AdWords”将分割成”ad words”)。 需要注意的是”iOS”并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。 现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写： 每个单词的第一个字母都大写，来得到大驼峰式命名。 除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。 最后将所有的单词连接起来得到一个标识符。示例：12345678Prose form Correct Incorrect------------------------------------------------------------------&quot;XML HTTP request&quot; XmlHttpRequest XMLHTTPRequest&quot;new customer ID&quot; newCustomerId newCustomerID&quot;inner stopwatch&quot; innerStopwatch innerStopWatch&quot;supports IPv6 on iOS?&quot; supportsIpv6OnIos supportsIPv6OnIOS&quot;YouTube importer&quot; YouTubeImporter YoutubeImporter* 加星号处表示可以，但不推荐。 Note：在英语中，某些带有连字符的单词形式不唯一。例如：”nonempty”和”non-empty”都是正确的，因此方法名checkNonempty和checkNonEmpty也都是正确的。 编程实践6.1 @Override：能用则用只要是合法的，就把@Override注解给用上。 6.2 捕获的异常：不能忽视除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个AssertionError重新抛出。) 如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。1234567try &#123; int i = Integer.parseInt(response); return handleNumericResponse(i);&#125; catch (NumberFormatException ok) &#123; // it's not numeric; that's fine, just continue&#125;return handleTextResponse(response); 例外：在测试中，如果一个捕获的异常被命名为expected，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常， 因此在这里就没有必要加注释。12345try &#123; emptyStack.pop(); fail();&#125; catch (NoSuchElementException expected) &#123;&#125; 6.3 静态成员：使用类进行调用使用类名调用静态的类成员，而不是具体某个对象或表达式。1234Foo aFoo = ...;Foo.aStaticMethod(); // goodaFoo.aStaticMethod(); // badsomethingThatYieldsAFoo().aStaticMethod(); // very bad 6.4 Finalizers: 禁用极少会去重写Object.finalize。 Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解Effective Java 第7条款：“Avoid Finalizers”，然后不要使用它。 Javadoc7.1 格式7.1.1 一般形式Javadoc块的基本格式如下所示：12345/** * Multiple lines of Javadoc text are written here, * wrapped normally... */public int method(String p1) &#123; ... &#125; 或者是以下单行形式：1/** An especially short bit of Javadoc. */ 基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。 7.1.2 段落空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。 除了第一个段落，每个段落第一个单词前都有标签&lt;p&gt;，并且它和第一个单词间没有空格。 7.1.3 Javadoc标记标准的Javadoc标记按以下顺序出现：@param, @return, @throws, @deprecated, 前面这4种标记如果出现，描述都不能为空。 当描述无法在一行中容纳，连续行需要至少再缩进4个空格。 7.2 摘要片段每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。 这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以A {@code Foo} is a...或This method returns...开头, 它也不会是一个完整的祈使句，如Save the record...。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。 Tip：一个常见的错误是把简单的Javadoc写成/** @return the customer ID */，这是不正确的。它应该写成/** Returns the customer ID. */。 7.3 哪里需要使用Javadoc至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外： 7.3.1 例外：不言自明的方法对于简单明显的方法如getFoo，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么值得写了。 单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。 Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名getCanonicalName， 就不应该忽视文档说明，因为读者很可能不知道词语canonical name指的是什么。 7.3.2 例外：重写如果一个方法重写了超类中的方法，那么Javadoc并非必需的。 7.3.3 可选的Javadoc对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为， 那么这个注释应该写成Javadoc，这样更统一更友好。 后记本文档翻译自Google Java Style， 译者@Hawstein,转载自Hawstein’s Blog。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7安装RabbitMq]]></title>
    <url>%2F2018%2F03%2F30%2FLinux%2FCentos7%E5%AE%89%E8%A3%85RabbitMq%2F</url>
    <content type="text"><![CDATA[1yum install epel-release]]></content>
      <categories>
        <category>Linux</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全能型开源远程终端：MobaXterm]]></title>
    <url>%2F2018%2F03%2F28%2Fsoft%2FMobaXterm%2F</url>
    <content type="text"></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>MobaXterm</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA 2018.1 更新内容]]></title>
    <url>%2F2018%2F03%2F28%2Fsoft%2FIDEA2018.1%2F</url>
    <content type="text"><![CDATA[JavaEnhancements in code completionCompletion in the Stream API chains is now aware of type casting. Code completion can not only suggest a completion item according to the existing call filter (String.class::isInstance), but also for an automatically typecast completion item. Data flow analysisWe’ve improved our data flow analysis so it can now track the relationships between variables like “greater than” and “less than.” The IDE detects when a condition is always true (or false) in all the possible code paths when the variables are compared. The IDE will now warn you when you try to assign a variable to the same value it already contains. This may help you detect and then remove some redundant code. The data flow analysis now works for non-terminated stream API chains. The IDE will also warn you about modifications to immutable collections. learn more Missing ServiceLoader declarationIntelliJ IDEA 2018.1 has new Java 9 inspections and quick-fixes. The IDE now checks that a service loaded by ServiceLoader is declared in the module-info.java file, and will offer a quick-fix to add a missing statement to the module-info.java file. learn more Creating missing classFor an unresolved class mentioned in module-info.java, the IDE will suggest creating the missing class, and create missing exported packages as well. Note the IDE creates the package with the class in the required directory, as you can’t export an empty package in Java 9. Idempotent body detectionThe IDE will detect and warn you about the while-loops with an idempotent body, as in most cases this indicates a programming error and can lead to a program hang. Move break-condition of infinite loop to loop conditionFor while-loops, now you get a notification about a conditional break at the end or beginning of an infinite loop. The IDE will suggest moving a break condition to a loop condition and offer a quick-fix to modify your loop. Usually replacing a conditional break with a loop condition makes the code clearer. Explicitly redundant close() callIntelliJ IDEA now detects an explicitly redundant close() call of the resource at the end of a try-with-resources block. Infinite Stream detectionIntelliJ IDEA will warn you about any infinite streams that weren’t short-circuited, as such operations can be completed only by throwing an exception. Such code may result in an infinite loop or a running out of memory issue. Copy constructor with missing fields detectionIn IntelliJ IDEA 2018.1 you’ll get a notification if there is a copy constructor that doesn’t copy all the fields in a class. The IDE considers fields with a transient modifier unnecessary to copy. Sort array contentA new Sort content action is available in array initializers and varargs. This new action sorts content alphabetically. User Postfix Completion templateThe postfix code completion has been improved. The IDE now lets you create your own Java templates or edit and rename some of the predefined Java templates through Preferences | Editor | General | Postfix Completion. Fix partially in Inspection ResultsA new Fix partially button has been added to the right-hand pane of the Inspection Results Tool Window. It appears when you have several options for fixing possible problems in the chosen scope. All the suggested quick-fixes are grouped by the quick-fix type under the Fix partially button. This new feature allows you to apply the required quick-fix to the chosen scope, and fix all affected cases in one go. Test prefix in Code GenerationIn IntelliJ IDEA you can generate a test class using the intention action. With IntelliJ IDEA 2018.1, you can customize a test class template and create a test class with Test as a prefix. Go to Preferences | Editor | Code Style | Java | Code Generation, and choose how the test class name should be generated. By default, the IDE creates a test class with the Test as a suffix. JUnit 5 @Tag annotation supportIntelliJ IDEA 2018.1 now supports the JUnit5 @Tag annotation so now you can include tagged classes and tagged methods, in the testing scope. Select the Tags (JUnit 5) option in the test kind field in the Run/Debug Configuration dialog. Use the Uniqueld field to filter tests according to their id. JVM DebuggerThrow ExceptionIntelliJ IDEA 2018.1 has a new Throw Exception action that allows you to throw an exception from a certain location in your program without changing the code. It is available from the Run | Throw Exception menu, or from the frame context menu during a debugging session. Logging stacktrace to consoleThe IDE now allows you to print breakpoints stack traces to the console. You can enable the stack trace option in the Breakpoints dialog box. In IntelliJ IDEA, you can now observe multiple breakpoints stack traces at the same time in the Console log. Copy current thread stacktraceYou can now copy the current thread stack trace via a new Copy Stack action which is available from the frame context menu. Annotations for Async stack tracesWith IntelliJ IDEA 2018.1 we’ve extended the Async stack traces feature so that you can now use the **@Async.Schedule and @Async.Execute** annotations to set up capture points that are not included in the default configuration. You just need to add Maven artifact as a dependency. Java CompilerThere is a new Use –release option for cross-compilation (Java 9 and later) checkbox on the Java Compiler page at Preferences | Build, Execution, Deployment | Compiler | Java Compiler that is enabled by default. When you need to use the –source and –target options with Java 9 and link against Java 9 classes at the same time, you can disable this checkbox. You can also use a specific version of the ECJ compiler. Select Eclipse from the Use Compiler drop-down menu, and specify the path to jar with the chosen compiler. EditorFolded code highlightingIf any issues have been detected in your code, now you can find them quicker than before. The IDE now highlights the folded code regions that contain errors or warnings, and colors such blocks according to their validation status. Highlights the folded code regions with the search resultsThe IDE also highlights folded code regions if they contain any matches when you search through the current file. Inline external annotationsIn IntelliJ IDEA you can annotate your code with external annotations even when direct annotation of the source code is not possible (library classes). You can configure your annotations in the annotations.xml files, which are stored outside of your source code. Previously the IDE only showed the @ icon in the gutter near the externally annotated code; now the IDE shows these external annotations inline in your code. Inferred Annotation HintsIntelliJ IDEA now lets you view the automatic inferences of @NotNull or @Nullable annotations right in your source code (not only in the gutter icon near the inferred annotation, as it was before). You can enable the Show inferred annotations inline checkbox in the Preferences | Editor | General | Appearance. Project ConfigurationAdd “provided” dependencies to classpathA new Include dependencies with “Provided” scope checkbox has been added in the Run/Debug Configurations for the Application and Spring Boot configurations. This new option will be useful if you have the provided dependencies for the scope in your project, but you run your application both inside a container (where provided dependencies are supplied by the container) and outside a container (where provided dependencies are not automatically supplied). For the Spring Boot applications, the Include dependencies with “Provided” scope option is enabled by default. New Change Module Names… actionWith IntelliJ IDEA, you can now change qualified names for multiple modules all at once. This is done via the new Change Module Names… action, from the context menu of the Project Structure dialog. Search and ReplaceStructural Search enhancementWith IntelliJ IDEA 2018.1, you can find method calls to annotated methods using Structural Search. You can select them from the existing search templates or create your own. Replace in Path improvementsIntelliJ IDEA 2018.1 has the ability to preview a regex replacement in the Replace in Path dialog. KotlinThe Kotlin plugin bundled with the IDE has been updated to Kotlin 1.2.30 Pasting Kotlin code into a packageNow, in the Project Tool Window, you can paste a code fragment directly into a package, and the IDE will create a new Kotlin file with the pasted code. Intentions for converting the scoping function callsThe Kotlin Plugin now offers new intentions that convert the scoping function calls let and run into each other, as well as also into apply and vice versa. GroovyNew Convert to @CompileStatic refactoring actionNow you have a new action that’s very useful when you want to keep your code in Groovy and at the same time benefit from static compilation. To save you a lot of time migrating from existing Groovy code, this new refactoring annotates every groovy class in the scope with the @CompileStatic annotation. This new refactoring action is available from the context menu Refactor | Convert to @CompileStatic. learn more Unnecessary import aliasIntelliJ IDEA 2018.1 reports unnecessary import alias for Groovy files. This new warning also works on static imports. ScalaInline hintsThe editor can now show inline hints for parameter names, method result types, and variable types. You can also easily use the settings to customize when such a hint should be shown. Structure View improvementThe Structure View now shows much more information about code. It displays final, abstract and access modifiers, nested definitions, primary constructor types, case class parameters as members, etc. The Structure View also provides you with an option to show all inherited members with their original class. Refactoring: Inline function parametersThe refactoring is now capable of inlining functions with parameters. It correctly substitutes them with actual values. AndroidIntelliJ IDEA 2018.1 merges the changes from Android Studio 3.0 and includes dozens of new features, with the following major new ones Layout Editor improvementsThe Layout Editor has been improved: there is a new toolbar layout and icons, updated layouts in the component tree, a new error panel, and more. For methods with @GetMapping annotations, you have a choice to open the mapped URLs in a browser, or open a request in the HTTP Request Editor. Brand new profiling toolsIntelliJ IDEA 2018.1 now includes Android Profiler, a brand new suite of profiling tools that provide real-time data for your app’s CPU, memory, and network activity. Device File Explorer Tool WindowThe new Device File Explorer Tool Window displays the file and directory structure of your Android device or emulator. Use this tool window to view, copy, and delete files on an Android device. You can access it through View | Tool Windows | Device File Explorer. Build Instant AppsThe IDE now supports the ability to build Instant Apps – lightweight Android apps that can be run without installation. To start building Instant Apps, make sure that the Instant Apps Development SDK is installed. You can check which SDK tools are installed in Preferences | Appearance &amp; Behavior | System Settings | Android SDK in the SDK tab. Spring BootAccess HTTP request mappings from the editor via the new REST clientNow, after you run a Spring Boot web application, a new icon is shown in the gutter for methods with @RequestMapping annotations that handle incoming HTTP requests. Click this gutter icon to open all the mappings in a scratch file with an .http extension and perform an HTTP request in the editor via the new REST client. For methods with @GetMapping annotations, you have the choice to open the mapped URLs in a browser, or open a request in the HTTP Request Editor. Note, that you need to add the dependency for the spring-boot-starter-actuator to your pom.xml or build.gradle file. New gutter icons for beans registered in the application contextIntelliJ IDEA shows all the beans that are registered in the application context in the Beans tab in the Run Dashboard (or in the Run Tool Window). We’ve extended this functionality, and now this information is also available in the editor. The new gutter icons are shown next to the beans that are used at runtime. Click these new gutter icons to navigate to the dependent beans. Version ControlPartial Git commitsIntelliJ IDEA 2018.1 supports partial Git commits (git add -p). The IDE lets you associate the code chunks with a changelist. Create a changelist, put all the needed code chunks there, and then commit it. The IDE will now only commit the selected changes from the file and will skip all other changes. To add the code chunks to a commit, use the checkboxes in the gutter in the Diff pane of the Commit Changes dialog. To move the code chunks between changelists, use the Move to Another Changelist… action from the context menu of the Diff pane in the Commit Changes dialog. Alternatively, add code chunks to a changelist from the editor by clicking on a change marker in the gutter. Toggle grouping of local changes by directory, module, or repositoryWith IntelliJ IDEA 2018.1, you can choose how to display your local changes by grouping them according to their directory, module, or repository. Use the new Group by icon available in the Local Changes tab in the Version Control Tool Window. Note that now you can select one of the grouping options or all three at once if needed. Navigate by clicking on the commit hashIn the Log tab inside the commit detail panes, the IDE now highlights hashes of the commits you are referring to. By simply clicking commit hashes you can jump to that commit in the Log tab. This works for Git and Mercurial. Also, the Commit Details pane of the Log tab has been redesigned History for revision tab enhancementIntelliJ IDEA lets you view detailed information about file changes by invoking the Show History for a Revision action on a file in the Log tab (available for Git integration). In 2018.1, we’ve updated the History for revision tab so that now it works much faster. In addition to better performance, this tab has a refreshed UI resembling the Log tab. Clone RepositoryMoreover, the Clone Repository dialogs for Git and GitHub have been merged into one. Autocompletion for GitHub repositories also works in the new Clone Repository dialog. You just need to log in to your GitHub account by clicking Log in to GitHub. New shortcut for the Commit and Push… actionThe IDE has a new default shortcut to perform the Commit and Push… action from the Commit Changes dialog. Please use Alt + Cmd + K (on macOS) or Alt + Ctrl + K (on Windows and Linux). Git Branches pop-upThe Abort Rebase, Continue Rebase, and Skip Commit actions are now available from the Git Branches pop-up if there is an ongoing rebase process. User InterfaceNew documentation UIWe’ve updated the Quick Documentation pop-up and made it clearer and more compact. Information about the method’s parameters, type, and return type is now available for Java, JavaScript, and TypeScript in the updated Quick Documentation pop-up Better HiDPI supportWhen you run the IntelliJ IDEA 2018.1 on Windows 8.1 (or higher), the IDE starts in per-monitor DPI-aware mode, with implemented support for the fractional scale factors of the monitor. Previously only integral scale factors were supported in the IDE. To switch back to the default mode, you need to set-up the VM option -Dsun.java2d.uiScale.enabled = false JavaScript &amp; TypeScriptTypeScript improvementsIntelliJ IDEA now supports the latest TypeScript 2.7 features, improves the Implement Members action, and adds the new Surround with type guard quick-fix for unresolved properties. Create a new Vue projectWith the Vue.js plugin installed in IntelliJ IDEA, you can use Vue CLI, an official tool for scaffolding Vue apps, to create new Vue projects. To install Vue CLI, run npm install –g vue-cli in the terminal. Reformat with PrettierIntelliJ IDEA supports Prettier, an opinionated code formatter via Prettier plugin. After you have the prettier package installed, the new Reformat with Prettier action will become available in IntelliJ IDEA. You can format the selected code, a file, or a whole directory using Prettier. HunspellHunspell dictionary supportThe Hunspell plugin that provides Hunspell dictionary support is now compatible with IntelliJ IDEA. Compared to a plain list of words, Hunspell provides significantly faster and much more accurate misprint detection, with far fewer false positives. learn more DockerEnhancement in Docker composeThe Docker plugin now supports Multiple Docker Compose files and respects not only a docker-compose.yml but also an optional docker-compose.override.yml file. You can add docker-compose.override.yml as you would any other override file, right after the base configuration file. Docker compose servicesThe Docker plugin allows you to choose the services to run just after choosing the configuration files in the Docker-compose run configuration. The plugin shows all the existing Compose projects, not only the ones deployed via the Docker-Compose run configuration. KubernetesSupport for YAML Kubernetes resource filesThe brand new Kubernetes plugin supports the Kubernetes resource files from v1.5 up to the recently released v1.9. The new plugin will look for the presence of apiVersion and other fields of this kind in the files, and if these are present, it will consider such files as Kubernetes resource files. learn more Completion in YAML Kubernetes resource filesTo help you really quickly create the required YAML definition file for Kubernetes, start typing the required key and invoke Smart Completion. The new plugin will auto-complete all the required keys from all the levels below. Code completion now works for YAML Kubernetes resource files. The Kubernetes plugin offers the correct values you can use within the resources. Kubernetes Live TemplateThe Kubernetes plugin has a built-in Live Template that allows you to quickly create the type of YAML Kubernetes resource file that you need. The new plugin now contains several predefined Kubernetes templates, and you can invoke the necessary Live Template by typing its abbreviation. Navigation in YAML Kubernetes filesUse gutter icons to quickly navigate between a label definition and a label selector. Jump from a label selector to a label definition inside the editor if there is a direct match for a label, both for the key and for the value. Inspections for YAML Kubernetes filesThe Kubernetes plugin will alert you whenever you select deprecated Kubernetes properties. Also, you’ll get a warning for YAML files if you try to use properties that are not applicable for the specified elements with the applied apiVersion and kind of field. Quick-fixes for YAML Kubernetes filesThe plugin highlights elements with missing keys in YAML Kubernetes resource definition files and provides a quick-fix to add the required keys. Also, you’ll get a warning about redundant keys. Use the provided quick-fix to remove redundant keys in YAML Kubernetes resource files. The new plugin also detects non-editable keys in YAML Kubernetes resource files and highlights them in the editor. Note that there’s an easy way to remove all such read-only keys from the current YAML file – with a handy quick-fix. Support for JSON Kubernetes resource filesThe new plugin provides some support for JSON Kubernetes resource files based on the JSON schema functionality. Code completion and the Quick Documentation Popup are also available for JSON Kubernetes resource files. Inspections for JSON Kubernetes resource filesThe new Kubernetes plugin validates the current keys according to the JSON schema and alerts you when incorrect properties or values are used. Also, the plugin highlights elements with any missing required properties and then advises you about the appropriate properties that should be added. Duplicated properties are also detected in JSON Kubernetes files.]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>IDE</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习清单]]></title>
    <url>%2F2018%2F03%2F28%2F%E5%AD%A6%E4%B9%A0%E6%B8%85%E5%8D%95%2F</url>
    <content type="text"><![CDATA[JDK9 JDK10 Google AutoValue Weex Kotlin]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JDK各个版本的新特性]]></title>
    <url>%2F2018%2F03%2F27%2FJava%2FJDK%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[JDK1.5新特性： 自动装箱与拆箱： 自动装箱的过程：每当需要一种类型的对象时，这种基本类型就自动地封装到与它相同类型的包装中。 自动拆箱的过程：每当需要一个值时，被装箱对象中的值就被自动地提取出来，没必要再去调用intValue()和doubleValue()方法。 自动装箱，只需将该值赋给一个类型包装器引用，java会自动创建一个对象。 自动拆箱，只需将该对象值赋给一个基本类型即可。 java——类的包装器 类型包装器有：Double,Float,Long,Integer,Short,Character和Boolean 枚举 把集合里的对象元素一个一个提取出来。枚举类型使代码更具可读性，理解清晰，易于维护。枚举类型是强类型的，从而保证了系统安全性。而以类的静态字段实现的类似替代模型，不具有枚举的简单性和类型安全性。 简单的用法：JavaEnum简单的用法一般用于代表一组常用常量，可用来代表一类相同类型的常量值。 复杂用法：Java为枚举类型提供了一些内置的方法，同事枚举常量还可以有自己的方法。可以很方便的遍历枚举对象。 静态导入 通过使用 import static，就可以不用指定 Constants 类名而直接使用静态成员，包括静态方法。 import xxxx 和 import static xxxx的区别是前者一般导入的是类文件如import java.util.Scanner;后者一般是导入静态的方法，import static java.lang.System.out。 可变参数（Varargs） 可变参数的简单语法格式为：methodName([argumentList], dataType...argumentName); 内省（Introspector） 是 Java语言对Bean类属性、事件的一种缺省处理方法。例如类A中有属性name,那我们可以通过getName,setName来得到其值或者设置新 的值。通过getName/setName来访问name属性，这就是默认的规则。Java中提供了一套API用来访问某个属性的getter /setter方法，通过这些API可以使你不需要了解这个规则（但你最好还是要搞清楚），这些API存放于包java.beans中。 一般的做法是通过类Introspector来获取某个对象的BeanInfo信息，然后通过BeanInfo来获取属性的描述器 （PropertyDescriptor），通过这个属性描述器就可以获取某个属性对应的getter/setter方法，然后我们就可以通过反射机制来 调用这些方法。 泛型(Generic) C++ 通过模板技术可以指定集合的元素类型，而Java在1.5之前一直没有相对应的功能。一个集合可以放任何类型的对象，相应地从集合里面拿对象的时候我们也 不得不对他们进行强制得类型转换。猛虎引入了泛型，它允许指定集合里元素的类型，这样你可以得到强类型在编译时刻进行类型检查的好处。 For-Each循环 For-Each循环得加入简化了集合的遍历。假设我们要遍历一个集合对其中的元素进行一些处理。 JDK 1.6新特性（转）有关JDK1.6的新特性reamerit的博客文章已经说的很详细了。 Desktop类和SystemTray类 在JDK6中 ,AWT新增加了两个类:Desktop和SystemTray。 前者可以用来打开系统默认浏览器浏览指定的URL,打开系统默认邮件客户端给指定的邮箱发邮件,用默认应用程序打开或编辑文件(比如,用记事本打开以txt为后缀名的文件),用系统默认的打印机打印文档; 后者可以用来在系统托盘区创建一个托盘程序. 使用JAXB2来实现对象与XML之间的映射 JAXB是Java Architecture for XML Binding的缩写，可以将一个Java对象转变成为XML格式，反之亦然。 我们把对象与关系数据库之间的映射称为ORM, 其实也可以把对象与XML之间的映射称为OXM(Object XML Mapping). 原来JAXB是Java EE的一部分，在JDK6中，SUN将其放到了Java SE中，这也是SUN的一贯做法。JDK6中自带的这个JAXB版本是2.0, 比起1.0(JSR 31)来，JAXB2(JSR 222)用JDK5的新特性Annotation来标识要作绑定的类和属性等，这就极大简化了开发的工作量。 实际上，在Java EE 5.0中，EJB和Web Services也通过Annotation来简化开发工作。另外,JAXB2在底层是用StAX(JSR 173)来处理XML文档。除了JAXB之外，我们还可以通过XMLBeans和Castor等来实现同样的功能。 理解StAX StAX(JSR 173)是JDK6.0中除了DOM和SAX之外的又一种处理XML文档的API。 StAX 的来历 ：在JAXP1.3(JSR 206)有两种处理XML文档的方法:DOM(Document Object Model)和SAX(Simple API for XML). 由于JDK6.0中的JAXB2(JSR 222)和JAX-WS 2.0(JSR 224)都会用到StAX所以Sun决定把StAX加入到JAXP家族当中来，并将JAXP的版本升级到1.4(JAXP1.4是JAXP1.3的维护版 本). JDK6里面JAXP的版本就是1.4. 。 StAX是The Streaming API for XML的缩写，一种利用拉模式解析(pull-parsing)XML文档的API.StAX通过提供一种基于事件迭代器(Iterator)的API让 程序员去控制xml文档解析过程,程序遍历这个事件迭代器去处理每一个解析事件，解析事件可以看做是程序拉出来的，也就是程序促使解析器产生一个解析事件 然后处理该事件，之后又促使解析器产生下一个解析事件，如此循环直到碰到文档结束符； SAX也是基于事件处理xml文档，但却 是用推模式解析，解析器解析完整个xml文档后，才产生解析事件，然后推给程序去处理这些事件；DOM 采用的方式是将整个xml文档映射到一颗内存树，这样就可以很容易地得到父节点和子结点以及兄弟节点的数据，但如果文档很大，将会严重影响性能。 使用Compiler API 现在我 们可以用JDK6 的Compiler API(JSR 199)去动态编译Java源文件，Compiler API结合反射功能就可以实现动态的产生Java代码并编译执行这些代码，有点动态语言的特征。 这个特性对于某些需要用到动态编译的应用程序相当有用， 比如JSP Web Server，当我们手动修改JSP后，是不希望需要重启Web Server才可以看到效果的，这时候我们就可以用Compiler API来实现动态编译JSP文件，当然，现在的JSP Web Server也是支持JSP热部署的，现在的JSP Web Server通过在运行期间通过Runtime.exec或ProcessBuilder来调用javac来编译代码，这种方式需要我们产生另一个进程去 做编译工作，不够优雅而且容易使代码依赖与特定的操作系统；Compiler API通过一套易用的标准的API提供了更加丰富的方式去做动态编译,而且是跨平台的。 轻量级Http Server API JDK6 提供了一个简单的Http Server API,据此我们可以构建自己的嵌入式Http Server,它支持Http和Https协议,提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的Http Server API来实现,程序员必须自己实现HttpHandler接口,HttpServer会调用HttpHandler实现类的回调方法来处理客户端请求,在 这里,我们把一个Http请求和它的响应称为一个交换,包装成HttpExchange类,HttpServer负责将HttpExchange传给 HttpHandler实现类的回调方法. 插入式注解处理API(Pluggable Annotation Processing API) 插入式注解处理API(JSR 269)提供一套标准API来处理Annotations(JSR 175) 实 际上JSR 269不仅仅用来处理Annotation,我觉得更强大的功能是它建立了Java 语言本身的一个模型,它把method, package, constructor, type, variable, enum, annotation等Java语言元素映射为Types和Elements(两者有什么区别?), 从而将Java语言的语义映射成为对象, 我们可以在javax.lang.model包下面可以看到这些类. 所以我们可以利用JSR 269提供的API来构建一个功能丰富的元编程(metaprogramming)环境. JSR 269用Annotation Processor在编译期间而不是运行期间处理Annotation, Annotation Processor相当于编译器的一个插件,所以称为插入式注解处理.如果Annotation Processor处理Annotation时(执行process方法)产生了新的Java代码,编译器会再调用一次Annotation Processor,如果第二次处理还有新代码产生,就会接着调用Annotation Processor,直到没有新代码产生为止.每执行一次process()方法被称为一个”round”,这样整个Annotation processing过程可以看作是一个round的序列. JSR 269主要被设计成为针对Tools或者容器的API. 举个例子,我们想建立一套基于Annotation的单元测试框架(如TestNG),在测试类里面用Annotation来标识测试期间需要执行的测试方法。 用Console开发控制台程序 JDK6 中提供了java.io.Console 类专用来访问基于字符的控制台设备. 你的程序如果要与Windows下的cmd或者Linux下的Terminal交互,就可以用Console类代劳. 但我们不总是能得到可用的Console, 一个JVM是否有可用的Console依赖于底层平台和JVM如何被调用. 如果JVM是在交互式命令行(比如Windows的cmd)中启动的,并且输入输出没有重定向到另外的地方,那么就可以得到一个可用的Console实 例. 对脚本语言的支持如: ruby, groovy, javascript. Common Annotations Common annotations原本是Java EE 5.0(JSR 244)规范的一部分，现在SUN把它的一部分放到了Java SE 6.0中.随 着Annotation元数据功能(JSR 175)加入到Java SE 5.0里面，很多Java 技术(比如EJB,Web Services)都会用Annotation部分代替XML文件来配置运行参数（或者说是支持声明式编程,如EJB的声明式事务）, 如果这些技术为通用目的都单独定义了自己的Annotations,显然有点重复建设, 所以,为其他相关的Java技术定义一套公共的Annotation是有价值的，可以避免重复建设的同时，也保证Java SE和Java EE 各种技术的一致性. 下面列举出Common Annotations 1.0里面的10个Annotations Common AnnotationsAnnotation Retention Target DescriptionGenerated Source ANNOTATION_TYPE, CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE 用于标注生成的源代码Resource Runtime TYPE, METHOD, FIELD 用于标注所依赖的资源,容器据此注入外部资源依赖，有基于字段的注入和基于setter方法的注入两种方式Resources Runtime TYPE 同时标注多个外部依赖，容器会把所有这些外部依赖注入PostConstruct Runtime METHOD 标注当容器注入所有依赖之后运行的方法，用来进行依赖注入后的初始化工作，只有一个方法可以标注为PostConstructPreDestroy Runtime METHOD 当对象实例将要被从容器当中删掉之前，要执行的回调方法要标注为PreDestroy RunAs Runtime TYPE 用于标注用什么安全角色来执行被标注类的方法，这个安全角色必须和Container 的Security角色一致的。RolesAllowed Runtime TYPE, METHOD 用于标注允许执行被标注类或方法的安全角色，这个安全角色必须和Container 的Security角色一致的PermitAll Runtime TYPE, METHOD 允许所有角色执行被标注的类或方法DenyAll Runtime TYPE, METHOD 不允许任何角色执行被标注的类或方法，表明该类或方法不能在Java EE容器里面运行DeclareRoles Runtime TYPE 用来定义可以被应用程序检验的安全角色，通常用isUserInRole来检验安全角色 注意: RolesAllowed,PermitAll,DenyAll不能同时应用到一个类或方法上 标注在方法上的RolesAllowed,PermitAll,DenyAll会覆盖标注在类上的RolesAllowed,PermitAll,DenyAll RunAs,RolesAllowed,PermitAll,DenyAll和DeclareRoles还没有加到Java SE 6.0上来 处理以上Annotations的工作是由Java EE容器来做, Java SE 6.0只是包含了上面表格的前五种Annotations的定义类,并没有包含处理这些Annotations的引擎,这个工作可以由Pluggable Annotation Processing API(JSR 269)来做 改动的地方最大的就是java GUI界面的显示了，JDK6.0（也就是JDK1.6）支持最新的windows vista系统的Windows Aero视窗效果，而JDK1.5不支持！！！你要在vista环境下编程的话最好装jdk6.0，否则它总是换到windows basic视窗效果. JDK 1.7 新特性 （转） switch中可以使用字串了 1234567891011String s = "test";switch (s) &#123; case "test" : System.out.println("test"); case "test1" : System.out.println("test1"); break ; default : System.out.println("break"); break ;&#125; “&lt;&gt;“这个玩意儿的运用List tempList = new ArrayList&lt;&gt;(); 即泛型实例化类型自动推断。 语法上支持集合，而不一定是数组 1final List piDigits = [ 1,2,3,4,5,8 ]; 新增一些取环境信息的工具方法 123456789File System.getJavaIoTempDir() // IO临时文件夹 File System.getJavaHomeDir() // JRE的安装目录 File System.getUserHomeDir() // 当前用户目录 File System.getUserDir() // 启动java进程时所在的目录 ....... Boolean类型反转，空指针安全,参与位运算 123456789101112131415Boolean Booleans.negate(Boolean booleanObj) True =&gt; False , False =&gt; True, Null =&gt; Null boolean Booleans.and(boolean[] array) boolean Booleans.or(boolean[] array) boolean Booleans.xor(boolean[] array) boolean Booleans.and(Boolean[] array) boolean Booleans.or(Boolean[] array) boolean Booleans.xor(Boolean[] array) 两个char间的equals 1boolean Character.equalsIgnoreCase(char ch1, char ch2) 7，安全的加减乘除1234567891011121314151617181920212223int Math.safeToInt(long value) int Math.safeNegate(int value) long Math.safeSubtract(long value1, int value2) long Math.safeSubtract(long value1, long value2) int Math.safeMultiply(int value1, int value2) long Math.safeMultiply(long value1, int value2) long Math.safeMultiply(long value1, long value2) long Math.safeNegate(long value) int Math.safeAdd(int value1, int value2) long Math.safeAdd(long value1, int value2) long Math.safeAdd(long value1, long value2) int Math.safeSubtract(int value1, int value2) 1.对Java集合（Collections）的增强支持在JDK1.7之前的版本中，Java集合容器中存取元素的形式如下：以List、Set、Map集合容器为例：1234567891011121314//创建List接口对象List list=new ArrayList (); list.add("item"); //用add()方法获取对象 String Item=list.get(0); //用get()方法获取对象//创建Set接口对象Set set=new HashSet (); set.add("item"); //用add()方法添加对象//创建Map接口对象Map map=new HashMap (); map.put("key",1); //用put()方法添加对象 int value=map.get("key"); 在JDK1.7中，摒弃了Java集合接口的实现类，如：ArrayList、HashSet和HashMap。而是直接采用[]、{}的形式存入对象，采用[]的形式按照索引、键值来获取集合中的对象，如下： 12345List list=["item"]; //向List集合中添加元素 String item=list[0]; //从List集合中获取元素Set set=&#123;"item"&#125;; //向Set集合对象中添加元素Map map=&#123;"key":1&#125;; //向Map集合中添加对象 int value=map["key"]; //从Map集合中获取对象 2.在Switch中可用String在之前的版本中是不支持在Switch语句块中用String类型的数据的，这个功能在C#语言中早已被支持，好在JDK1.7中加入了。1234567891011String s = "test";switch (s) &#123; case "test" : System.out.println("test"); case "test1" : System.out.println("test1"); break ; default : System.out.println("break"); break ;&#125; 数值可加下划线例如： 1int one_million = 1_000_000; 支持二进制文字例如： 1int binary = 0b1001_1001; 简化了可变参数方法的调用当程序员试图使用一个不可具体化的可变参数并调用一个varargs（可变）方法时，编辑器会生成一个“非安全操作”的警告。原文：http://iteye.blog.163.com/blog/static/18630809620127136516641/?suggestedreading&amp;wumii Java8 十大新特性本教程将Java8的新特新逐一列出，并将使用简单的代码示例来指导你如何使用默认接口方法，lambda表达式，方法引用以及多重Annotation，之后你将会学到最新的API上的改进，比如流，函数式接口，Map以及全新的日期API “Java is still not dead—and people are starting to figure that out.”本教程将用带注释的简单代码来描述新特性，你将看不到大片吓人的文字。 一、接口的默认方法Java 8允许我们给接口添加一个非抽象的方法实现，只需要使用 default关键字即可，这个特征又叫做扩展方法，示例如下： 代码如下:123456interface Formula &#123; double calculate(int a); default double sqrt(int a) &#123; return Math.sqrt(a); &#125;&#125; Formula接口在拥有calculate方法之外同时还定义了sqrt方法，实现了Formula接口的子类只需要实现一个calculate方法，默认方法sqrt将在子类上可以直接使用。代码如下:12345678Formula formula = new Formula() &#123; @Override public double calculate(int a) &#123; return sqrt(a * 100); &#125; &#125;;formula.calculate(100); // 100.0formula.sqrt(16); // 4.0 文中的formula被实现为一个匿名类的实例，该代码非常容易理解，6行代码实现了计算 sqrt(a * 100)。在下一节中，我们将会看到实现单方法接口的更简单的做法。译者注： 在Java中只有单继承，如果要让一个类赋予新的特性，通常是使用接口来实现，在C++中支持多继承，允许一个子类同时具有多个父类的接口与功能，在其他语言中，让一个类同时具有其他的可复用代码的方法叫做mixin。新的Java 8 的这个特新在编译器实现的角度上来说更加接近Scala的trait。 在C#中也有名为扩展方法的概念，允许给已存在的类型扩展方法，和Java 8的这个在语义上有差别。二、Lambda 表达式首先看看在老版本的Java中是如何排列字符串的：复制代码 代码如下:1234567List names = Arrays.asList("peter", "anna", "mike", "xenia");Collections.sort(names, new Comparator () &#123; @Override public int compare(String a, String b) &#123; return b.compareTo(a); &#125; &#125;); 只需要给静态方法 Collections.sort 传入一个List对象以及一个比较器来按指定顺序排列。通常做法都是创建一个匿名的比较器对象然后将其传递给sort方法。在Java 8 中你就没必要使用这种传统的匿名对象的方式了，Java 8提供了更简洁的语法，lambda表达式：复制代码 代码如下:123Collections.sort(names, (String a, String b) -&gt; &#123; return b.compareTo(a); &#125;); 看到了吧，代码变得更段且更具有可读性，但是实际上还可以写得更短：复制代码 代码如下:1Collections.sort(names, (String a, String b) -&gt; b.compareTo(a)); 对于函数体只有一行代码的，你可以去掉大括号{}以及return关键字，但是你还可以写得更短点：复制代码 代码如下:1Collections.sort(names, (a, b) -&gt; b.compareTo(a)); Java编译器可以自动推导出参数类型，所以你可以不用再写一次类型。接下来我们看看lambda表达式还能作出什么更方便的东西来： 三、函数式接口Lambda 表达式是如何在java的类型系统中表示的呢？每一个lambda表达式都对应一个类型，通常是接口类型。而“函数式接口”是指仅仅只包含一个抽象方法的接口，每一个该类型的lambda表达式都会被匹配到这个抽象方法。因为 默认方法 不算抽象方法，所以你也可以给你的函数式接口添加默认方法。我们可以将lambda表达式当作任意只包含一个抽象方法的接口类型，确保你的接口一定达到这个要求，你只需要给你的接口添加 @FunctionalInterface 注解，编译器如果发现你标注了这个注解的接口有多于一个抽象方法的时候会报错的。示例如下：复制代码 代码如下:1234567@FunctionalInterface interface Converter &#123; T convert(F from); &#125; Converter converter = (from) -&gt; Integer.valueOf(from); Integer converted = converter.convert("123"); System.out.println(converted); // 123 需要注意如果@FunctionalInterface如果没有指定，上面的代码也是对的。译者注 将lambda表达式映射到一个单方法的接口上，这种做法在Java 8之前就有别的语言实现，比如Rhino JavaScript解释器，如果一个函数参数接收一个单方法的接口而你传递的是一个function，Rhino 解释器会自动做一个单接口的实例到function的适配器，典型的应用场景有 org.w3c.dom.events.EventTarget 的addEventListener 第二个参数 EventListener。四、方法与构造函数引用前一节中的代码还可以通过静态方法引用来表示：复制代码 代码如下:123Converter converter = Integer::valueOf; Integer converted = converter.convert("123"); System.out.println(converted); // 123 Java 8 允许你使用 :: 关键字来传递方法或者构造函数引用，上面的代码展示了如何引用一个静态方法，我们也可以引用一个对象的方法：复制代码 代码如下:123converter = something::startsWith; String converted = converter.convert("Java"); System.out.println(converted); // "J" 接下来看看构造函数是如何使用::关键字来引用的，首先我们定义一个包含多个构造函数的简单类：复制代码 代码如下:123456789class Person &#123; String firstName; String lastName; Person() &#123;&#125; Person(String firstName, String lastName) &#123; this.firstName = firstName; this.lastName = lastName; &#125;&#125; 接下来我们指定一个用来创建Person对象的对象工厂接口：复制代码 代码如下:1234interface PersonFactory&#123; P create(String firstName, String lastName);&#125; 这里我们使用构造函数引用来将他们关联起来，而不是实现一个完整的工厂：复制代码 代码如下:12PersonFactory personFactory = Person::new; Person person = personFactory.create("Peter", "Parker"); 我们只需要使用 Person::new 来获取Person类构造函数的引用，Java编译器会自动根据PersonFactory.create方法的签名来选择合适的构造函数。五、Lambda 作用域在lambda表达式中访问外层作用域和老版本的匿名对象中的方式很相似。你可以直接访问标记了final的外层局部变量，或者实例的字段以及静态变量。六、访问局部变量我们可以直接在lambda表达式中访问外层的局部变量：复制代码 代码如下:123final int num = 1; Converter stringConverter = (from) -&gt; String.valueOf(from + num);stringConverter.convert(2); // 3 但是和匿名对象不同的是，这里的变量num可以不用声明为final，该代码同样正确：复制代码 代码如下:123int num = 1; Converter stringConverter = (from) -&gt; String.valueOf(from + num);stringConverter.convert(2); // 3 不过这里的num必须不可被后面的代码修改（即隐性的具有final的语义），例如下面的就无法编译：复制代码 代码如下:123int num = 1; Converter stringConverter = (from) -&gt; String.valueOf(from + num); num = 3; 在lambda表达式中试图修改num同样是不允许的。七、访问对象字段与静态变量和本地变量不同的是，lambda内部对于实例的字段以及静态变量是即可读又可写。该行为和匿名对象是一致的：复制代码 代码如下:1234567891011121314class Lambda4 &#123; static int outerStaticNum; int outerNum; void testScopes() &#123; Converter stringConverter1 = (from) -&gt; &#123; outerNum = 23; return String.valueOf(from); &#125;; Converter stringConverter2 = (from) -&gt; &#123; outerStaticNum = 72; return String.valueOf(from); &#125;; &#125; &#125; 八、访问接口的默认方法还记得第一节中的formula例子么，接口Formula定义了一个默认方法sqrt可以直接被formula的实例包括匿名对象访问到，但是在lambda表达式中这个是不行的。Lambda表达式中是无法访问到默认方法的，以下代码将无法编译：复制代码 代码如下:12Formula formula = (a) -&gt; sqrt( a * 100); Built-in Functional Interfaces JDK 1.8 API包含了很多内建的函数式接口，在老Java中常用到的比如Comparator或者Runnable接口，这些接口都增加了@FunctionalInterface注解以便能用在lambda上。Java 8 API同样还提供了很多全新的函数式接口来让工作更加方便，有一些接口是来自Google Guava库里的，即便你对这些很熟悉了，还是有必要看看这些是如何扩展到lambda上使用的。Predicate接口Predicate 接口只有一个参数，返回boolean类型。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）：复制代码 代码如下:1234567Predicate predicate = (s) -&gt; s.length() &gt; 0;predicate.test("foo"); // truepredicate.negate().test("foo"); // falsePredicate nonNull = Objects::nonNull; Predicate isNull = Objects::isNull;Predicate isEmpty = String::isEmpty; Predicate isNotEmpty = isEmpty.negate(); Function 接口Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）：复制代码 代码如下: Function toInteger = Integer::valueOf;Function backToString = toInteger.andThen(String::valueOf);backToString.apply(“123”); // “123” Supplier 接口Supplier 接口返回一个任意范型的值，和Function接口不同的是该接口没有任何参数复制代码 代码如下: Supplier personSupplier = Person::new;personSupplier.get(); // new Person Consumer 接口Consumer 接口表示执行在单个参数上的操作。复制代码 代码如下: Consumer greeter = (p) -&gt; System.out.println(“Hello, “ + p.firstName);greeter.accept(new Person(“Luke”, “Skywalker”)); Comparator 接口Comparator 是老Java中的经典接口， Java 8在此之上添加了多种默认方法：复制代码 代码如下: Comparator comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);Person p1 = new Person(“John”, “Doe”);Person p2 = new Person(“Alice”, “Wonderland”);comparator.compare(p1, p2); // &gt; 0comparator.reversed().compare(p1, p2); // &lt; 0 Optional 接口Optional 不是函数是接口，这是个用来防止NullPointerException异常的辅助类型，这是下一届中将要用到的重要概念，现在先简单的看看这个接口能干什么：Optional 被定义为一个简单的容器，其值可能是null或者不是null。在Java 8之前一般某个函数应该返回非空对象但是偶尔却可能返回了null，而在Java 8中，不推荐你返回null而是返回Optional。复制代码 代码如下: Optional optional = Optional.of(“bam”);optional.isPresent(); // trueoptional.get(); // “bam”optional.orElse(“fallback”); // “bam”optional.ifPresent((s) -&gt; System.out.println(s.charAt(0))); // “b” Stream 接口java.util.Stream 表示能应用在一组元素上一次执行的操作序列。Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，而中间操作返回Stream本身，这样你就可以将多个操作依次串起来。 Stream 的创建需要指定一个数据源，比如 java.util.Collection的子类，List或者Set， Map不支持。Stream的操作可以串行执行或者并行执行。首先看看Stream是怎么用，首先创建实例代码的用到的数据List：复制代码 代码如下:123456789List stringCollection = new ArrayList&lt;&gt;(); stringCollection.add("ddd2"); stringCollection.add("aaa2"); stringCollection.add("bbb1"); stringCollection.add("aaa1"); stringCollection.add("bbb3"); stringCollection.add("ccc"); stringCollection.add("bbb2"); stringCollection.add("ddd1"); Java 8扩展了集合类，可以通过 Collection.stream() 或者 Collection.parallelStream() 来创建一个Stream。下面几节将详细解释常用的Stream操作：Filter 过滤过滤通过一个predicate接口来过滤并只保留符合条件的元素，该操作属于中间操作，所以我们可以在过滤后的结果来应用其他Stream操作（比如forEach）。forEach需要一个函数来对过滤后的元素依次执行。forEach是一个最终操作，所以我们不能在forEach之后来执行其他Stream操作。复制代码 代码如下:12stringCollection.stream().filter((s) -&gt; s.startsWith("a")).forEach(System.out::println); // "aaa2", "aaa1" Sort 排序排序是一个中间操作，返回的是排序好后的Stream。如果你不指定一个自定义的Comparator则会使用默认排序。复制代码 代码如下:12stringCollection.stream().sorted().filter((s) -&gt; s.startsWith("a")).forEach(System.out::println);// "aaa1", "aaa2" 需要注意的是，排序只创建了一个排列好后的Stream，而不会影响原有的数据源，排序之后原数据stringCollection是不会被修改的：复制代码 代码如下:12System.out.println(stringCollection); // ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1 Map 映射中间操作map会将元素根据指定的Function接口来依次将元素转成另外的对象，下面的示例展示了将字符串转换为大写字符串。你也可以通过map来讲对象转换成其他类型，map返回的Stream类型是根据你map传递进去的函数的返回值决定的。复制代码 代码如下:12stringCollection.stream().map(String::toUpperCase).sorted((a, b) -&gt; b.compareTo(a)).forEach(System.out::println);// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1" Match 匹配Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是最终操作，并返回一个boolean类型的值。复制代码 代码如下:123456boolean anyStartsWithA = stringCollection.stream().anyMatch((s) -&gt; s.startsWith("a"));System.out.println(anyStartsWithA); // trueboolean allStartsWithA = stringCollection.stream().allMatch((s) -&gt; s.startsWith("a"));System.out.println(allStartsWithA); // falseboolean noneStartsWithZ = stringCollection.stream().noneMatch((s) -&gt; s.startsWith("z"));System.out.println(noneStartsWithZ); // true Count 计数计数是一个最终操作，返回Stream中元素的个数，返回值类型是long。复制代码 代码如下:12long startsWithB = stringCollection.stream().filter((s) -&gt; s.startsWith("b")).count();System.out.println(startsWithB); // 3 Reduce 规约这是一个最终操作，允许通过指定的函数来讲stream中的多个元素规约为一个元素，规越后的结果是通过Optional接口表示的：复制代码 代码如下:123Optional reduced = stringCollection.stream() .sorted().reduce((s1, s2) -&gt; s1 + "#" + s2);reduced.ifPresent(System.out::println);// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2" 并行Streams前面提到过Stream有串行和并行两种，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。下面的例子展示了是如何通过并行Stream来提升性能：首先我们创建一个没有重复元素的大表：复制代码 代码如下:123456int max = 1000000; List values = new ArrayList&lt;&gt;(max); for (int i = 0; i &lt; max; i++) &#123; UUID uuid = UUID.randomUUID(); values.add(uuid.toString()); &#125; 然后我们计算一下排序这个Stream要耗时多久，串行排序：复制代码 代码如下:1234567long t0 = System.nanoTime();long count = values.stream().sorted().count();System.out.println(count);long t1 = System.nanoTime();long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);System.out.println(String.format("sequential sort took: %d ms", millis));// 串行耗时: 899 ms 并行排序：复制代码 代码如下:1234567long t0 = System.nanoTime();long count = values.parallelStream().sorted().count();System.out.println(count);long t1 = System.nanoTime();long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);System.out.println(String.format("parallel sort took: %d ms", millis));// 并行排序耗时: 472 ms 上面两个代码几乎是一样的，但是并行版的快了50%之多，唯一需要做的改动就是将stream()改为parallelStream()。Map前面提到过，Map类型不支持stream，不过Map提供了一些新的有用的方法来处理一些日常任务。复制代码 代码如下:12345Map map = new HashMap&lt;&gt;();for (int i = 0; i &lt; 10; i++) &#123; map.putIfAbsent(i, &quot;val&quot; + i);&#125;map.forEach((id, val) -&gt; System.out.println(val)); 以上代码很容易理解， putIfAbsent 不需要我们做额外的存在性检查，而forEach则接收一个Consumer接口来对map里的每一个键值对进行操作。下面的例子展示了map上的其他有用的函数：复制代码 代码如下:12345678map.computeIfPresent(3, (num, val) -&gt; val + num); map.get(3); // val33map.computeIfPresent(9, (num, val) -&gt; null);map.containsKey(9); // falsemap.computeIfAbsent(23, num -&gt; "val" + num);map.containsKey(23); // truemap.computeIfAbsent(3, num -&gt; "bam");map.get(3); // val33 接下来展示如何在Map里删除一个键值全都匹配的项：复制代码 代码如下:1234map.remove(3, "val3"); map.get(3); // val33map.remove(3, "val33");map.get(3); // null 另外一个有用的方法：复制代码 代码如下:1map.getOrDefault(42, "not found"); // not found 对Map的元素做合并也变得很容易了：复制代码 代码如下:1234map.merge(9, "val9", (value, newValue) -&gt; value.concat(newValue)); map.get(9); // val9map.merge(9, "concat", (value, newValue) -&gt; value.concat(newValue));map.get(9); // val9concat Merge做的事情是如果键名不存在则插入，否则则对原键对应的值做合并操作并重新插入到map中。九、Date APIJava 8 在包java.time下包含了一组全新的时间日期API。新的日期API和开源的Joda-Time库差不多，但又不完全一样，下面的例子展示了这组新API里最重要的一些部分：Clock 时钟Clock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 System.currentTimeMillis() 来获取当前的微秒数。某一个特定的时间点也可以使用Instant类来表示，Instant类也可以用来创建老的java.util.Date对象。复制代码 代码如下:1234Clock clock = Clock.systemDefaultZone(); long millis = clock.millis();Instant instant = clock.instant();Date legacyDate = Date.from(instant);// legacy java.util.Date Timezones 时区在新API中时区使用ZoneId来表示。时区可以很方便的使用静态方法of来获取到。 时区定义了到UTS时间的时间差，在Instant时间点对象到本地日期对象之间转换的时候是极其重要的。复制代码 代码如下:12345678System.out.println(ZoneId.getAvailableZoneIds()); // prints all available timezone idsZoneId zone1 = ZoneId.of("Europe/Berlin");ZoneId zone2 = ZoneId.of("Brazil/East");System.out.println(zone1.getRules());System.out.println(zone2.getRules());// ZoneRules[currentStandardOffset=+01:00]// ZoneRules[currentStandardOffset=-03:00] LocalTime 本地时间LocalTime 定义了一个没有时区信息的时间，例如 晚上10点，或者 17:30:15。下面的例子使用前面代码创建的时区创建了两个本地时间。之后比较时间并以小时和分钟为单位计算两个时间的时间差：复制代码 代码如下:1234567LocalTime now1 = LocalTime.now(zone1); LocalTime now2 = LocalTime.now(zone2);System.out.println(now1.isBefore(now2)); // falselong hoursBetween = ChronoUnit.HOURS.between(now1, now2);long minutesBetween = ChronoUnit.MINUTES.between(now1, now2);System.out.println(hoursBetween); // -3System.out.println(minutesBetween); // -239 LocalTime 提供了多种工厂方法来简化对象的创建，包括解析时间字符串。复制代码 代码如下:12345LocalTime late = LocalTime.of(23, 59, 59); System.out.println(late); // 23:59:59DateTimeFormatter germanFormatter = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT).withLocale(Locale.GERMAN);LocalTime leetTime = LocalTime.parse("13:37", germanFormatter);System.out.println(leetTime); // 13:37 LocalDate 本地日期LocalDate 表示了一个确切的日期，比如 2014-03-11。该对象值是不可变的，用起来和LocalTime基本一致。下面的例子展示了如何给Date对象加减天/月/年。另外要注意的是这些对象是不可变的，操作返回的总是一个新实例。复制代码 代码如下:123456LocalDate today = LocalDate.now(); LocalDate tomorrow = today.plus(1, ChronoUnit.DAYS); LocalDate yesterday = tomorrow.minusDays(2);LocalDate independenceDay = LocalDate.of(2014, Month.JULY, 4);DayOfWeek dayOfWeek = independenceDay.getDayOfWeek();System.out.println(dayOfWeek); // FRIDAY 从字符串解析一个LocalDate类型和解析LocalTime一样简单：复制代码 代码如下:123DateTimeFormatter germanFormatter = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(Locale.GERMAN);LocalDate xmas = LocalDate.parse("24.12.2014", germanFormatter);System.out.println(xmas); // 2014-12-24 LocalDateTime 本地日期时间LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime和LocalTime还有LocalDate一样，都是不可变的。LocalDateTime提供了一些能访问具体字段的方法。复制代码 代码如下:1234567LocalDateTime sylvester = LocalDateTime.of(2014, Month.DECEMBER, 31, 23, 59, 59);DayOfWeek dayOfWeek = sylvester.getDayOfWeek();System.out.println(dayOfWeek); // WEDNESDAYMonth month = sylvester.getMonth();System.out.println(month); // DECEMBERlong minuteOfDay = sylvester.getLong(ChronoField.MINUTE_OF_DAY);System.out.println(minuteOfDay); // 1439 只要附加上时区信息，就可以将其转换为一个时间点Instant对象，Instant时间点对象可以很容易的转换为老式的java.util.Date。复制代码 代码如下:123Instant instant = sylvester.atZone(ZoneId.systemDefault()).toInstant();Date legacyDate = Date.from(instant);System.out.println(legacyDate); // Wed Dec 31 23:59:59 CET 2014 格式化LocalDateTime和格式化时间和日期一样的，除了使用预定义好的格式外，我们也可以自己定义格式：复制代码 代码如下:1234DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM dd, yyyy - HH:mm");LocalDateTime parsed = LocalDateTime.parse("Nov 03, 2014 - 07:13", formatter);String string = formatter.format(parsed);System.out.println(string); // Nov 03, 2014 - 07:13 和java.text.NumberFormat不一样的是新版的DateTimeFormatter是不可变的，所以它是线程安全的。关于时间日期格式的详细信息：http://download.java.net/jdk8/docs/api/java/time/format/DateTimeFormatter.html十、Annotation 注解在Java 8中支持多重注解了，先看个例子来理解一下是什么意思。首先定义一个包装类Hints注解用来放置一组具体的Hint注解：复制代码 代码如下:1234567@interface Hints &#123; Hint[] value(); &#125;@Repeatable(Hints.class)@interface Hint &#123; String value();&#125; Java 8允许我们把同一个类型的注解使用多次，只需要给该注解标注一下@Repeatable即可。例 1: 使用包装类当容器来存多个注解（老方法）复制代码 代码如下:12@Hints(&#123;@Hint("hint1"), @Hint("hint2")&#125;) class Person &#123;&#125; 例 2：使用多重注解（新方法）复制代码 代码如下:123@Hint("hint1") @Hint("hint2") class Person &#123;&#125; 第二个例子里java编译器会隐性的帮你定义好@Hints注解，了解这一点有助于你用反射来获取这些信息：复制代码 代码如下:123456Hint hint = Person.class.getAnnotation(Hint.class); System.out.println(hint); // nullHints hints1 = Person.class.getAnnotation(Hints.class);System.out.println(hints1.value().length); // 2Hint[] hints2 = Person.class.getAnnotationsByType(Hint.class);System.out.println(hints2.length); // 2 即便我们没有在Person类上定义@Hints注解，我们还是可以通过 getAnnotation(Hints.class) 来获取 @Hints注解，更加方便的方法是使用 getAnnotationsByType 可以直接获取到所有的@Hint注解。另外Java 8的注解还增加到两种新的target上了：复制代码 代码如下:12@Target(&#123;ElementType.TYPE_PARAMETER, ElementType.TYPE_USE&#125;) @interface MyAnnotation &#123;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSP九大内置对象及四个作用域]]></title>
    <url>%2F2018%2F03%2F27%2FJava%2FJSP%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%9B%9B%E4%B8%AA%E4%BD%9C%E7%94%A8%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[九大对象 内置对象（又叫隐含对象，有9个内置对象）:不需要预先声明就可以在脚本代码和表达式中随意使用 out: javax.servlet.jsp.JspWriter类型，代表输出流的对象。作用域为page（页面执行期） request： javax.servlet.ServletRequest的子类型，此对象封装了由WEB浏览器或其它客户端生成地HTTP请求的细节（参数，属性，头标和数据）。作用域为request(用户请求期）。方法由可查看API response： javax.servlet.ServletResponse的子类型，此对象封装了返回到HTTP客户端的输出，向页面作者提供设置响应头标和状态码的方式。经常用来设置HTTP标题，添加cookie，设置响应内容的类型和状态，发送HTTP重定向和编码URL。作用域为page（页面执行期）。 pageContext： javax.servlet.jsp.PageContext（抽象类）类型，作用域为page（页面执行期）。此对象提供所有四个作用域层次的属性查询和修改能力，它也提供了转发请求到其它资源和包含其他资源的方法： 该对象的方法都是抽象方法 session：javax.servlet.http.HttpSession类型，主要用于跟踪对话。作用域session(会话期—）。 HttpSession是一个类似哈希表的与单一WEB浏览器会话相关的对象，它存在于HTTP请求之间，可以存储任 何类型的命名对象。 如果不需要在请求之间跟踪会话对象，可以通过在page指令中指定session=”false” 需要记住的是pageContext对象也可以与session.getAttribute(),session.setAttribute()一样的方式取得并设置会话属性。 application：javax.servlet.ServletContext类型，servlet的环境通过调用getServletConfig ().getContext()方法获得。作用域是application(整个程序运行期）。它提供了关于服务器版本，应用级初始化参数和应用内资源绝对路径，注册信息的方式 config：javax.servlet.ServletConfig,作用域为page（页面执行期） exception:java.lang.Throwable,通过JSP错误页面中一个catch块已经益出但没有捕获的 java.lang.Throwable的任意实例，传向了errorPage的URI。作用域为page（页面执行期）。注意 exception只有在page指令中具有属性isErrorPage=”true”时才有效。 page:java.lang.Object类型，指向页面自身的方式。作用域为page（页面执行期） JSP中九大内置对象为： 名称 中文 类型 作用域 request 请求对象 javax.servlet.ServletRequest Request response 响应对象 javax.servlet.SrvletResponse Page pageContext 页面上下文对象 javax.servlet.jsp.PageContext Page session 会话对象 javax.servlet.http.HttpSession Session application 应用程序对象 javax.servlet.ServletContext Application out 输出对象 javax.servlet.jsp.JspWriter Page config 配置对象 javax.servlet.ServletConfig Page page 页面对象 javax.lang.Object Page exception 例外对象 javax.lang.Throwable page request 对象代表的是来自客户端的请求，例如我们在FORM表单中填写的信息等，是最常用的对象常用的方法有：getParameter、getParameterNames 和getParameterValues 通过调用这几个方法来获取请求对象中所包含的参数的值。 response 对象代表的是对客户端的响应，也就是说可以通过response 对象来组织发送到客户端的数据。但是由于组织方式比较底层，所以不建议普通读者使用，需要向客户端发送文字时直接使用 pageContext 对象直译时可以称作“页面上下文”对象，代表的是当前页面运行的一些属性 常用的方法有 ：findAttribute、getAttribute、getAttributesScope 和getAttributeNamesInScope 一般情况下pageContext对象用到得也不是很多，只有在项目所面临的情况比较复杂的情况下，才会利用到页面属性来辅助处理。 session 对象代表服务器与客户端所建立的会话，当需要在不同的JSP页面中保留客户信息的情况下使用，比如在线购物、客户轨迹跟踪等。“session” 对象建立在cookie的基础上，所以使用时应注意判断一下客户端是否打开了cookie。常用的方法包括getId、 getValue、 getValueNames和putValue等。 概要 HTTP是无状态（stateless）协议； Web Server 对每一个客户端请求都没有历史记忆； Session用来保存客户端状态信息； 由Web Server 写入； 存于客户端； 客户端的每次访问都把上次的session记录传递给Web Server； Web Server读取客户端提交的session来获取客户端的状态信息 application 对象负责提供应用程序在服务器中运行时的一些全局信息，常用的方法有getMimeType和getRealPath等。 out 对象代表了向客户端发送数据的对象，与“response” 对象不同，通过“out” 对象发送的内容将是浏览器需要显示的内容，是文本一级的，可以通过“out” 对象直接向客户端写一个由程序动态生成HTML文件。常用的方法除了pirnt和println之外，还包括clear、clearBuffer、 flush、getBufferSize和getRemaining，这是因为“out” 对象内部包含了一个缓冲区，所以需要一些对缓冲区进行操作的方法 “config” 对象提供一些配置信息，常用的方法有getInitParameter和getInitParameterNames，以获得Servlet初始化时的参数。 “page” 对象代表了正在运行的由JSP文件产生的类对象，不建议一般读者使用。 “exception” 对象则代表了JSP文件运行时所产生的例外对象，此对象不能在一般JSP文件中直接使用，而只能在使用了“&lt; page isErrorPage=”true “ &gt;”的JSP文件中使用四个作用域： 作用域 何为作用域 先让我们看看效果： 大概流程是这样的，我们访问04-01/index.jsp的时候，分别对pageContext, request, session, application四个作用域中的变量进行累加。（当然先判断这个变量是不是存在，如果变量不存在，则要把变量初始化成1。）计算完成后就从index.jsp执行forward跳转到test.jsp。在test.jsp里再进行一次累加，然后显示出这四个整数来。 从显示的结果来看，我们可以直观的得出结论： page里的变量没法从index.jsp传递到test.jsp。只要页面跳转了，它们就不见了。 request里的变量可以跨越forward前后的两页。但是只要刷新页面，它们就重新计算了。 session和application里的变量一直在累加，开始还看不出区别，只要关闭浏览器，再次重启浏览器访问这页，session里的变量就重新计算了。 来源:考试大-Java认证 application里的变量一直在累加，除非你重启tomcat，否则它会一直变大。 而作用域规定的是变量的有效期限。 如果把变量放到pageContext里，就说明它的作用域是page，它的有效范围只在当前jsp页面里。 从把变量放到pageContext开始，到jsp页面结束，你都可以使用这个变量。 如果把变量放到request里，就说明它的作用域是request，它的有效范围是当前请求周期。 所谓请求周期，就是指从http请求发起，到服务器处理结束，返回响应的整个过程。在这个过程中可能使用forward的方式跳转了多个jsp页面，在这些页面里你都可以使用这个变量。 如果把变量放到session里，就说明它的作用域是session，它的有效范围是当前会话。 所谓当前会话，就是指从用户打开浏览器开始，到用户关闭浏览器这中间的过程。这个过程可能包含多个请求响应。也就是说，只要用户不关浏览器，服务器就有办法知道这些请求是一个人发起的，整个过程被称为一个会话（session），而放到会话中的变量，就可以在当前会话的所有请求里使用。 如果把变量放到application里，就说明它的作用域是application，它的有效范围是整个应用。 整个应用是指从应用启动，到应用结束。我们没有说“从服务器启动，到服务器关闭”，是因为一个服务器可能部署多个应用，当然你关闭了服务器，就会把上面所有的应用都关闭了。 application作用域里的变量，它们的存活时间是最长的，如果不进行手工删除，它们就一直可以使用。 与上述三个不同的是，application里的变量可以被所有用户共用。如果用户甲的操作修改了application中的变量，用户乙访问时得到的是修改后的值。这在其他scope中都是不会发生的，page, request,session都是完全隔离的，无论如何修改都不会影响其他人的数据。 我们使用public Object getAttribute(String name)获得变量值，使用public void setAttribute(String name, Object value)将变量值保存到对应作用域中。举个pageContext的例子就是：1234567// pageInteger countPage = (Integer) pageContext.getAttribute("countPage");if (countPage == null) &#123; pageContext.setAttribute("countPage", 1);&#125; else &#123; pageContext.setAttribute("countPage", countPage + 1);&#125; 这里先从pageContext中取出名为countPage的整数，因为返回的都是java.lang.Object类型，所以需要强制转换成我们需要的整形。这里取得的变量如果不存在就会返回null，通过判断countPage == null来辨别变量是否存在，如果不存在就设置为1，如果存在就进行累加，最后使用setAttribute()方法将修改后的变量值放入pageContext。 将其中的pageContext换成request, session, application就可以操作其他三个作用域中的变量。来源:]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MD5]]></title>
    <url>%2F2018%2F03%2F27%2FJava%2FMD5%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031import java.security.MessageDigest;public class MD5Util &#123; /*** * MD5加密 生成32位md5码 * @param 待加密字符串 * @return 返回32位md5码 */ public static String md5Encode(String inStr) throws Exception &#123; MessageDigest md5 = null; try &#123; md5 = MessageDigest.getInstance("MD5"); &#125; catch (Exception e) &#123; System.out.println(e.toString()); e.printStackTrace(); return ""; &#125; byte[] byteArray = inStr.getBytes("UTF-8"); byte[] md5Bytes = md5.digest(byteArray); StringBuffer hexValue = new StringBuffer(); for (int i = 0; i &lt; md5Bytes.length; i++) &#123; int val = ((int) md5Bytes[i]) &amp; 0xff; if (val &lt; 16) &#123; hexValue.append("0"); &#125; hexValue.append(Integer.toHexString(val)); &#125; return hexValue.toString(); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片上传BASE64转换]]></title>
    <url>%2F2018%2F03%2F27%2FJava%2F%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0BASE64%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829public void index()&#123; File imgFile = requse.getFile(); Long size = imgFile.length(); String contentType=img.getContentType(); System.out.println("size:"+size); System.out.println("contentType:"+contentType); //将图片文件转化为字节数组字符串，并对其进行Base64编码处理 // String imgFileUrl = img.getUploadPath()+"/"+img.getOriginalFileName();//待处理的图片 InputStream in = null; byte[] data = null; //读取图片字节数组 try &#123; in = new FileInputStream(imgFile); data = new byte[in.available()]; in.read(data); in.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; img.getFile().delete(); //对字节数组Base64编码 BASE64Encoder encoder = new BASE64Encoder(); //返回Base64编码过的字节数组字符串 String relt = encoder.encode(data); renderText(relt); &#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片验证码]]></title>
    <url>%2F2018%2F03%2F27%2FJava%2F%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%2F</url>
    <content type="text"><![CDATA[导包如下12345import java.awt.Color;import java.awt.Font;import java.awt.Graphics2D;import java.awt.image.BufferedImage;import java.util.Random; 代码如下12345678910111213141516171819202122232425262728293031323334353637383940// 随机验证图片发生器private BufferedImage drawVerifyCodeImage(int width, int height, String code) &#123; // 创建存放在内存中的图像并获取图像工具 BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); Graphics2D g = (Graphics2D) image.getGraphics(); // 设置图像边框，但是我这里不想要边框，所以就不设置了 // g.setColor(Color.RED); // g.drawRect(0, 0, width, height); // 设置图像填充背景色，灰色Gray g.setColor(Color.GRAY); g.fillRect(0, 0, width, height); // 设置图片填充文字，但是需要一个一个写，并且让每个字随机旋转 g.setColor(Color.WHITE); g.setFont(new Font("Arial", Font.PLAIN, height - 5)); for (int i = 0; i &lt; code.length(); i++) &#123; // 设置旋转弧度 double theta = (new Random()).nextInt() % 30 * Math.PI / 180; g.rotate(theta, height * i + 5, height - 5); g.drawString(code.substring(i, i + 1), height * i + 5, height - 5); g.rotate(-theta, height * i + 5, height - 5); &#125; // 设置干扰线，条数可以自己设定，这里设置8条 g.setColor(Color.yellow); for (int i = 0; i &lt; 8; i++) &#123; int x1 = new Random().nextInt(width); int y1 = new Random().nextInt(height); int x2 = new Random().nextInt(width); int y2 = new Random().nextInt(height); g.drawLine(x1, y1, x2, y2); &#125; // 返回存放在内存中的图片对象 return image; &#125; BASE64转换1234567891011121314151617import java.io.ByteArrayOutputStream;import java.io.IOException;import javax.imageio.ImageIO;import sun.misc.BASE64Encoder;private String VerifyCodeBase64(int width, int height, String code) throws IOException &#123; // 创建编码对象 BASE64Encoder encoder = new BASE64Encoder(); // 创建字符流 ByteArrayOutputStream bs = new ByteArrayOutputStream(); // 写入字符流 ImageIO.write(drawVerifyCodeImage(width, height, code), "jpg", bs); // 转码成字符串 String imgsrc = encoder.encode(bs.toByteArray()); return "data:image/jpg;base64," + imgsrc; &#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot官方文档汉化 自主汉化--原创 彭应智]]></title>
    <url>%2F2018%2F03%2F24%2FJava%2FSpring%20Boot%2F</url>
    <content type="text"><![CDATA[入门如果您开始使用Spring Boot，或“Spring”，一般先阅读本节。它回答了基本的“what？“how？”“why？”的问题。它包括一个介绍Spring Boot，以及安装说明。然后，我们将帮助您构建第一个Spring Boot应用程序，讨论一些核心原理。 介绍Spring Boot可以轻松创建可以运行的独立的、基于生产级的基于Spring的应用程序。我们对Spring平台和第三方库有一种固定的规则，这样您就可以以最小的编码启动。大多数Spring Boot应用程序只需要很少的配置。 你可以使用Spring Boot创建java应用程序可以开始用java -jar或更传统的war包部署。我们还提供了一个命令行工具，它运行“spring scripts”。 主要内容： 为所有 Spring 开发提供一个更快速、更全面的架构体验。 默认配置，但当需要使用非默认值时，可以快速配置。 提供大型项目常见的非业务功能。（如嵌入式服务器，安全，监控，心跳检查，和外部配置）。 绝对0代码配置，也可以不需要XML配置。 系统要求Spring Boot 2.0.0.RELEASE 需要 Java 8 or 9 and Spring Framework 5.0.4.RELEASE 以上。编译需要 Maven 3.2+ and Gradle 4。 Servlet 容器Spring Boot 支持下列嵌入式servlet容器： Name Servlet Version Tomcat 8.5 3.1 Jetty 9.4 3.1 Undertow 1.4 3.1 您还可以将Spring Boot程序部署到任何支持servlet 3+的容器中。 Installing Spring BootSpring Boot 可以使用 Java 开发工具 或者安装 Spring 命令行工具。无论哪种方式, 你都需要 Java 1.8 及以上.。在你开始之前，你应该使用下面的命令查看当前Java版本： 1$ java -version 如果你是新的java开发或如果你想尝试Spring Boot，你可能想尝试Spring Boot CLI （命令行工具）。 Installation Instructions for the Java DeveloperYou can use Spring Boot in the same way as any standard Java library. To do so, include the appropriate spring-boot-*.jar files on your classpath. Spring Boot does not require any special tools integration, so you can use any IDE or text editor. Also, there is nothing special about a Spring Boot application, so you can run and debug a Spring Boot application as you would any other Java program. Although you could copy Spring Boot jars, we generally recommend that you use a build tool that supports dependency management (such as Maven or Gradle). 使用MavenSpring Boot 编译请使用 Apache Maven 3.2 及以上。 Spring Boot dependencies use the org.springframework.boot groupId. Typically, your Maven POM file inherits from the spring-boot-starter-parent project and declares dependencies to one or more “Starters”. Spring Boot also provides an optional Maven plugin to create executable jars. The following listing shows a typical pom.xml file:123456789101112131415161718192021222324252627282930313233343536&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;myproject&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;!-- Inherit defaults from Spring Boot --&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.0.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;!-- Add typical dependencies for a web application --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- Package as an executable jar --&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; [Tip]The spring-boot-starter-parent is a great way to use Spring Boot, but it might not be suitable all of the time. Sometimes you may need to inherit from a different parent POM, or you might not like our default settings. In those cases, see Section 13.2.2, “Using Spring Boot without the Parent POM” for an alternative solution that uses an import scope.]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用的Shell命令]]></title>
    <url>%2F2018%2F03%2F21%2FLinux%2FLinux%E5%B8%B8%E7%94%A8%E7%9A%84Shell%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[本文介绍Linux系统下常用的系统级命令，包括软硬件查看、修改命令，有CPU、内存、硬盘、网络、系统管理等命令。说明，所有命令是在Centos 6.4 64位的虚拟机系统进行测试的。本文介绍的命令都会在此Centos下运行验证（也有部分命令会在suse/ubuntu系统里测试的，会做特明说明），但运行结果就不再列出了。 硬件篇CPU相关12lscpu #查看的是cpu的统计信息.cat /proc/cpuinfo #查看CPU信息详细信息，如每个CPU的型号，主频等 内存相关12free -m #概要查看内存情况 这里的单位是MBcat /proc/meminfo #查看内存详细信息 磁盘相关1234lsblk #查看硬盘和分区分布，显示很直观df -h #查看各分区使用情况cat /proc/partitions #查看硬盘和分区mount | column -t #查看挂接的分区状态 网卡相关123lspci | grep -i &apos;eth&apos; #查看网卡硬件信息ifconfig -a #查看系统的所有网络接口ethtool eth0 #如果要查看某个网络接口的详细信息，例如eth0的详细参数和指标 软件篇内核相关1234567uname -a #查看版本当前操作系统内核信息）cat /proc/version #查看当前操作系统版本信息cat /etc/issue #查看版本当前操作系统发行版信息cat /etc/redhat-release #同上cat /etc/SuSE-release #suse系统下才可使用lsb_release -a #用来查看linux兼容性的发行版信息lsmod #列出加载的内核模块 网络1234567891011ifconfig #查看所有网络接口的属性iptables -L #查看防火墙设置service iptables status #查看防火墙状态service iptables stop #关闭防火墙route -n #查看路由表netstat -lntp #查看所有监听端口netstat -antp #查看所有已经建立的连接netstat -s #查看网络统计信息进程netstat -at #列出所有tcp端口netstat -au #列出所有udp端口netstat -lt #只列出所有监听tcp端口 系统管理12345678910111213141516top #查看系统所有进程的详细信息，比如CPU、内存等,信息很多！df -lh #查看硬盘大小及使用率mount #挂接远程目录、NFS、本地共享目录到linux下hostname #查看/修改计算机名w #查看活动用户id #查看指定用户信息last #查看用户登录日志cut -d:-f1 /etc/passwd #查看系统所有用户cut -d:-f1 /etc/group #查看系统所有组crontab -l #查看当前用户的计划任务服务chkconfig –list #列出所有系统服务chkconfig –list | grep on #列出所有启动的系统服务程序rpm -qa #查看所有安装的软件包uptime #查看系统运行时间、用户数、负载 /sbin/chkconfig --list #查看系统自动启动列表/sbin/chkconfig –addmysql #把MySQL添加到系统的启动服务组里面 文件相关1234ls -lht #列出一个文件夹下所有文件及大小、访问权限du -sh #查看指定目录的大小 du -lh #查看指定目录及各文件的大小 ln -s #建立软链接 进程相关12345678pstree -p pid #查看一个进程下的所有线程pstree -a #显示所有进程的所有详细信息，遇到相同的进程名可以压缩显示ps -ef #查看所有进程kill -9 pid #杀死进程kill all test #杀死进程kill -9`pgrep test` #杀死进程./test.sh &amp; #使程序在后台运行nohup ./test.sh &amp; #使程序在后台运行 压缩解压缩12345zip -r dir.zip dir file #将目录dir、文件file等压缩到zip包,zip -re dir.zip dir file #创建zip包，且加密unzip dir.zip #解压tar -zcvf dir.tar.gz dir file #将目录dir、文件file等压缩到tar包tar -xf dir.tar.gz #解压 screen命令 screen命令组最大的好处就是当你的shell退出或关闭后，你运行的服务不会关系，也就是说，我们可以在screen里开启一组服务，且不受终端断开的影响。1234567screen -S test #创建一个名字为test的screenscreen -r test #打开名字为test的screenscreen -r pid #打开进程号为pid的screenscreen -ls #列出所有的screenctrl + a,d #当在一个screen时，退出screenctrl + a,n #当在一个screen时，切换到下一个窗口ctrl + a,c #当在一个screen时，创建一个新的窗口 scp命令12scp local_file remote_username@remote_ip:remote_dir #拷贝本地文件到远程机器上scp -r local_dir remote_username@remote_ip:remote_dir #拷贝本地整个目录到远程机器上 软件包安装管理命令假设你想要安装的软件包叫做app，注意，这里的命令通常需要sudo或者root权限。123456789101112131415161718192021//centos系统、redhat系统rpm -qa | grep app #查找本机是否安装了app；rpm -ivh app.rpm #假设你有app的rpm包，这样直接安装sudo yum install app #否则就在线安装yum update app #更新apprpm -e app #删除已安装的app包//suse、opensuse系统zypper search app #查找本机是否安装了app；zypper install app #安装zypper update app #更新zypper remove app #删除zypper lr #列出所有已定义的安装源。zypper ar #添加新安装源。zypper rr #删除指定的安装源zypper mr #修改指定的安装源//ubuntu系统apt-get install app #安装apt-get update app #更新apt-get remove app #删除 apt-cache search app #搜索软件包dpkg -i app.deb #假设你有app的deb包，这样直接安装]]></content>
      <categories>
        <category>Linux</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[随笔001]]></title>
    <url>%2F2016%2F03%2F19%2F%E6%94%B6%E9%9B%86%2F%E9%9A%8F%E7%AC%94001%2F</url>
    <content type="text"><![CDATA[1、所谓铁饭碗，不是在一个地方吃一辈子饭，而是一辈子到哪里都有饭吃。2、把每一件简单的事做好，就不简单；把每一件平凡的事做好，就是不平凡。3、生活的最高境界是宽容，相处的最高境界是尊重。4、从崇高到荒唐只有一步，从荒唐到崇高却没有路。5、何谓生老病死？生的要好，老的要慢，病的要晚，死的要快。6、傲不可长，欲不可纵，乐不可极，志不可移。7、不与富交我不贫，不与贵交我不贱。8、世上只有想不通的人，没有走不通的路。9、能力就像一张支票，除非把它兑成现金，否则毫无价值。 第一课： 爹对儿子说，我想给你找个媳妇。儿子说，可我愿意自己找！爹说，可这个女孩子是比尔盖茨的女儿！儿子说，要是这样，可以。 然后他爹找到比尔盖茨，说，我给你女儿找了一个老公。比尔盖茨说，不行，我女儿还小！爹说，可是这个小伙子是世界银行的副总裁！比尔盖茨说，啊，这样，行！ 最后，爹找到了世界银行的总裁，说，我给你推荐一个副总裁！总裁说，可是我有太多副总裁了，多余了！爹说，可是这个小伙子是比尔盖茨的女婿！总裁说，这样，行！——生意就是这样做成的。第二课： 一个销售员、一个办事员和他们的经理步行去午餐时发现了一盏古代油灯。他们摩擦油灯，一个精灵跳了出来。精灵说：“我能满足你们每人一个愿望。”“我先！我先！”办事员说，“我想去巴哈马群岛，开着快艇，与世隔绝。”倏！她飞走了。“该我了！该我了！”销售员说，“我想去夏威夷，躺在沙滩上，有私人女按摩师，免费续杯的冰镇果汁朗姆酒，还有一生中的最爱。”倏！他飞走了。“OK,该你了。”精灵对经理说。经理回答：“我要那两个蠢货午饭后马上回来工作！”——永远让你的老板先开口第三课： 一只小鸟飞去南方过冬。天实在太冷了。它冻僵了，掉在一片田野上。它躺在那儿时，一头母牛走过来在它身上拉了一堆屎。冻僵的小鸟躺在粪堆里，开始感觉到了温暖。牛粪确实使它暖和过来了。 它躺在温暖的牛粪中，异常高兴，并开始唱起歌来。 一只过路的猫听到鸟叫赶过来看个究竟。顺着声音，它发现了牛粪下的小鸟，并迅速把它拖出来吃掉了。故事寓意： (1)并不是每个在你身上拉屎的都是你的敌人 (2)并不是每个把你拖出粪堆的都是你的朋友 (3)当你深陷粪堆中的时候，最好闭上你的鸟嘴 第四课： 一个男人在他妻子洗完澡后准备进浴室洗澡。这时，门铃响了。妻子迅速用浴巾裹住自己冲到门口。当她打开门时，邻居鲍勃站在那儿。在她开口前，鲍勃说，“你如果把浴巾拿掉，我给你800美元。”想了一会儿，这个女人拿掉浴巾赤裸地站在鲍勃面前。 几秒钟后，鲍勃递给她800美元然后离开了。女人重新裹好浴巾回到屋里。当她踏进浴室时，丈夫问她，“是谁呀？” “是邻居鲍勃。”她回答。 “哦，”丈夫说，“他有没有提到还欠我800美元？” ——及时与同舟共济的股东分享重要信息，将会避免不必要的曝光。 第六课： 你开着一辆车。 在一个暴风雨的晚上。 你经过一个车站。 有三个人正在焦急的等公共汽车。 一个是快要临死的老人，他需要马上去医院 一个是医生，他曾救过你的命，你做梦都想报答他。 还有一个女人/男人，她/他是你做梦都想嫁/娶的人，也许错过就没有了。 但你的车只能再坐下一个人，你会如何选择？ 我不知道这是不是一个对你性格的测试,因为每一个回答都有他自己的原因。 老人快要死了，你首先应该先救他。 你也想让那个医生上车，因为他救过你，这是个好机会报答他。 还有就是你的梦中情人。错过了这个机会。你可能永远不能遇到一个让你这么心动的人了。 在200个应征者中，只有一个人被雇佣了，他并没有解释他的理由，他只是说了以下的话：’给医生车钥匙，让他带着老人去医院，而我则留下来陪我的梦中情人一起等公车!’小哲理： 是否是因为我们从未想过要放弃我们手中已经拥有的优势（车钥匙） 有时，如果我们能放弃一些我们的固执，狭隘，和一些优势的话，我们可能会得到更多。 第七课： 很久很久以前，人类都还赤着双脚走路。 有一位国王到某个偏远的乡间旅行，因为路面崎岖不平，有很多碎石头，刺得他的脚又痛又麻。回到王宫后，他下了一道命令，要将国内的所有道路都铺上一层牛皮。他认为这样做，不只是为自己，还可造福他的人民，让大家走路时不再受刺痛之苦。 但即使杀尽国内所有的牛，也筹措不到足够的皮革，而所花费的金钱、动用的人力，更不知凡几。关注微信”销售总监”学习更多销售技巧。虽然根本做不到，甚至还相当愚蠢，但因为是国王的命令，大家也只能摇头叹息。 一位聪明的仆人大胆向国王提出建言：「国王啊！为什么您要劳师动众，牺牲那么多头牛，花费那么多金钱呢？您何不只用两小片牛皮包住您的脚呢？」国王听了很惊讶，但也当下领悟，于是立刻收回成命，改采这个建议。据说，这就是「皮鞋」的由来。小哲理： 想改变世界，很难；要改变自己，则较为容易。与其改变全世界，不如先改变自己–「将自己的双脚包起来」。改变自己的某些观念和作法，以抵御外来的侵袭。当自己改变后，眼中的世界自然也就跟着改变了。如果你希望看到世界改变，那么第一个必须改变的就是自己。 心若改变，态度就会改变；态度改变，习惯就改变；习惯改变，人生就会改变。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>道理</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
