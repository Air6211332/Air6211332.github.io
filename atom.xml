<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小米的HEXO</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://localhost/"/>
  <updated>2018-05-04T09:54:01.569Z</updated>
  <id>http://localhost/</id>
  
  <author>
    <name>小米</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySql 参数说明-- 小米规整</title>
    <link href="http://localhost/2018/05/04/%E6%94%B6%E9%9B%86/MySQL/"/>
    <id>http://localhost/2018/05/04/收集/MySQL/</id>
    <published>2018-05-04T09:53:27.040Z</published>
    <updated>2018-05-04T09:54:01.569Z</updated>
    
    <summary type="html">
    
      Markdown的一些高级使用
    
    </summary>
    
      <category term="随笔" scheme="http://localhost/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="MySQL" scheme="http://localhost/tags/MySQL/"/>
    
      <category term="随笔" scheme="http://localhost/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Android 软件推荐 -- 小米推荐</title>
    <link href="http://localhost/2018/05/02/%E6%94%B6%E9%9B%86/Android%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90--%E5%B0%8F%E7%B1%B3%E6%8E%A8%E8%8D%90/"/>
    <id>http://localhost/2018/05/02/收集/Android软件推荐--小米推荐/</id>
    <published>2018-05-02T04:54:03.439Z</published>
    <updated>2018-05-02T04:54:40.832Z</updated>
    
    <content type="html"><![CDATA[<p>闲话不多说，直接上推荐的软件</p><h1 id="通用类插件"><a href="#通用类插件" class="headerlink" title="通用类插件"></a>通用类插件</h1><ol><li><p>历史记录管理 – Better History</p><p> 官方介绍：更好地查看您的历史记录。为查看您的历史记录带来最好的搜索体验，最清晰的界面和最有帮助的筛选。</p><p> 小米点评：个人觉得Chrome自带的历史管理工具很难用，界面虽然好看但是很不好管理，所以推荐这个大家使用。</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405121159.png" alt=""></p><ul><li><a href="https://chrome.google.com/webstore/detail/better-history/obciceimmggglbmelaidpjlmodcebijb" target="_blank" rel="noopener">官方地址</a></li></ul></li></ol><h1 id="其他类软件"><a href="#其他类软件" class="headerlink" title="其他类软件"></a>其他类软件</h1><h2 id="VIP浏览器"><a href="#VIP浏览器" class="headerlink" title="VIP浏览器"></a>VIP浏览器</h2><p>官方介绍 </p><blockquote><p>完美支持各种在线片源，堪称万能视频浏览器;<br>全自动播放，影视剧，综艺自动播放无限制<br>支持腾讯、爱奇艺、优酷、搜狐、PPTV、芒果TV、乐视</p></blockquote><p><a href="https://www.sviphome.com/" target="_blank" rel="noopener">官方地址</a></p>]]></content>
    
    <summary type="html">
    
      分享下本米自用的 Android 软件希望大家喜欢
    
    </summary>
    
      <category term="随笔" scheme="http://localhost/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://localhost/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="soft" scheme="http://localhost/tags/soft/"/>
    
      <category term="chrome" scheme="http://localhost/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Windows 软件推荐 -- 小米推荐</title>
    <link href="http://localhost/2018/05/02/%E6%94%B6%E9%9B%86/Windows%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90--%E5%B0%8F%E7%B1%B3%E6%8E%A8%E8%8D%90/"/>
    <id>http://localhost/2018/05/02/收集/Windows软件推荐--小米推荐/</id>
    <published>2018-05-02T04:48:50.721Z</published>
    <updated>2018-05-03T02:35:28.394Z</updated>
    
    <content type="html"><![CDATA[<p>闲话不多说，直接上推荐的软件</p><h1 id="通用类插件"><a href="#通用类插件" class="headerlink" title="通用类插件"></a>通用类插件</h1><ol><li><p>历史记录管理 – Better History</p><p> 官方介绍：更好地查看您的历史记录。为查看您的历史记录带来最好的搜索体验，最清晰的界面和最有帮助的筛选。</p><p> 小米点评：个人觉得Chrome自带的历史管理工具很难用，界面虽然好看但是很不好管理，所以推荐这个大家使用。</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405121159.png" alt=""></p><ul><li><a href="https://chrome.google.com/webstore/detail/better-history/obciceimmggglbmelaidpjlmodcebijb" target="_blank" rel="noopener">官方地址</a></li></ul></li></ol><h1 id="开发推荐软件"><a href="#开发推荐软件" class="headerlink" title="开发推荐软件"></a>开发推荐软件</h1><h2 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h2><ul><li><p>官方介绍：免费。 开源。到处运行。</p></li><li><p>小米点评：好用，方便，速度快。</p></li><li><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">官方地址</a></p></li></ul><h1 id="日常推荐软件"><a href="#日常推荐软件" class="headerlink" title="日常推荐软件"></a>日常推荐软件</h1><h2 id="下载软件-–-猎鹰"><a href="#下载软件-–-猎鹰" class="headerlink" title="下载软件 – 猎鹰"></a>下载软件 – 猎鹰</h2><ul><li><p>官方介绍：Easy your downloads,Get everthing done!</p></li><li><p>小米点评：好用，不限速，界面不丑。</p></li><li><p><a href="http://www.eagleget.com/" target="_blank" rel="noopener">官方地址</a></p></li></ul><h2 id="Opera浏览器"><a href="#Opera浏览器" class="headerlink" title="Opera浏览器"></a>Opera浏览器</h2><ul><li><p>官方介绍：Easy your downloads,Get everthing done!</p></li><li><p>小米点评：我推荐这货，只因为一个原因，这货自带**。</p></li><li><p><a href="http://www.eagleget.com/" target="_blank" rel="noopener">官方地址</a></p></li></ul><h2 id="listary"><a href="#listary" class="headerlink" title="listary"></a>listary</h2><ul><li><p>官方介绍：Easy your downloads,Get everthing done!</p></li><li><p>小米点评：强大的搜索和集成功能，提供类似Mac的快捷条的功能十分好用。</p></li><li><p><a href="http://www.eagleget.com/" target="_blank" rel="noopener">官方地址</a></p></li></ul><h1 id="暂未归类软件"><a href="#暂未归类软件" class="headerlink" title="暂未归类软件"></a>暂未归类软件</h1><h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h2 id="everything"><a href="#everything" class="headerlink" title="everything"></a>everything</h2><h2 id="ATOM"><a href="#ATOM" class="headerlink" title="ATOM"></a>ATOM</h2><h2 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h2><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><h2 id="proxyee-down"><a href="#proxyee-down" class="headerlink" title="proxyee-down"></a>proxyee-down</h2><h2 id="choco"><a href="#choco" class="headerlink" title="choco"></a>choco</h2><h2 id="yomail"><a href="#yomail" class="headerlink" title="yomail"></a>yomail</h2><h2 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a>有道云笔记</h2><h2 id="下载软件-–-猎鹰-1"><a href="#下载软件-–-猎鹰-1" class="headerlink" title="下载软件 – 猎鹰"></a>下载软件 – 猎鹰</h2><h2 id="VIP浏览器"><a href="#VIP浏览器" class="headerlink" title="VIP浏览器"></a>VIP浏览器</h2><p>官方介绍 </p><blockquote><p>完美支持各种在线片源，堪称万能视频浏览器;<br>全自动播放，影视剧，综艺自动播放无限制<br>支持腾讯、爱奇艺、优酷、搜狐、PPTV、芒果TV、乐视</p></blockquote><p><a href="https://www.sviphome.com/" target="_blank" rel="noopener">官方地址</a></p>]]></content>
    
    <summary type="html">
    
      分享下本米自用的 Windows 软件希望大家喜欢
    
    </summary>
    
      <category term="随笔" scheme="http://localhost/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://localhost/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="soft" scheme="http://localhost/tags/soft/"/>
    
      <category term="chrome" scheme="http://localhost/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>tumblr Api -- 小米规整</title>
    <link href="http://localhost/2018/04/28/%E6%94%B6%E9%9B%86/api/tumblr%20Api/"/>
    <id>http://localhost/2018/04/28/收集/api/tumblr Api/</id>
    <published>2018-04-28T11:17:09.694Z</published>
    <updated>2018-04-28T12:18:34.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册开发者密钥"><a href="#注册开发者密钥" class="headerlink" title="注册开发者密钥"></a>注册开发者密钥</h1><p><a href="https://www.tumblr.com/oauth/apps" target="_blank" rel="noopener">点击注册</a></p><h1 id="API汇总"><a href="#API汇总" class="headerlink" title="API汇总"></a>API汇总</h1><table><thead><tr><th>name</th><th>url</th></tr></thead><tbody><tr><td>Blog</td><td>api.tumblr.com/v2/blog/{blog-identifier}/…</td></tr><tr><td>User</td><td>api.tumblr.com/v2/user/…</td></tr><tr><td>post</td><td>api.tumblr.com/v2/blog/{blog-identifier}/posts[/type]</td></tr></tbody></table><p>明细</p><table><thead><tr><th>type</th><th>name</th><th>url</th><th>method</th><th>Authentication</th></tr></thead><tbody><tr><td>blog</td><td>info</td><td>api.tumblr.com/v2/blog/{blog-identifier}/info?api_key={key}</td><td>GET</td><td>API key</td></tr></tbody></table><h1 id="API-明细"><a href="#API-明细" class="headerlink" title="API 明细"></a>API 明细</h1><h2 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h2><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><p><code>/info</code> — Retrieve Blog Info</p><p>This method returns general information about the blog, such as the title, number of posts, and other high-level data.</p><h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><table><thead><tr><th>type</th><th>name</th><th>url</th><th>method</th><th>Authentication</th></tr></thead><tbody><tr><td>blog</td><td>info</td><td>api.tumblr.com/v2/blog/{blog-identifier}/info?api_key={key}</td><td>GET</td><td>API key</td></tr></tbody></table><h4 id="Request-Parameters"><a href="#Request-Parameters" class="headerlink" title="Request Parameters"></a>Request Parameters</h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th><th>Default</th><th>Required?</th></tr></thead><tbody><tr><td>blog-identifier</td><td>String</td><td>Any blog identifier See the Overview for more details.</td><td>N/A</td><td>Yes</td></tr><tr><td>api_key</td><td>String</td><td>Your OAuth Consumer Key See Authentication for more details.</td><td>N/A</td><td>Yes</td></tr></tbody></table><h3 id="avatar"><a href="#avatar" class="headerlink" title="avatar"></a>avatar</h3><p><code>/avatar</code> — Retrieve a Blog Avatar<br>You can get a blog’s avatar in 9 different sizes. The default size is 64x64.</p><h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><table><thead><tr><th>URI</th><th>HTTP Method</th><th>Authentication</th></tr></thead><tbody><tr><td>api.tumblr.com/v2/blog/{blog-identifier}/avatar[/size]</td><td>GET</td><td>None</td></tr></tbody></table><h4 id="Request-Parameters-1"><a href="#Request-Parameters-1" class="headerlink" title="Request Parameters"></a>Request Parameters</h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th><th>Default</th><th>Required?</th></tr></thead><tbody><tr><td>blog-identifier</td><td>String</td><td>Any blog identifier</td><td>N/A</td><td>Yes</td></tr><tr><td>size</td><td>Number</td><td>The size of the avatar (square, one value for both length and width). Must be one of the values:16, 24, 30, 40, 48, 64, 96, 128, 512</td><td>64</td><td>No</td></tr></tbody></table><h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><h4 id="Method-1"><a href="#Method-1" class="headerlink" title="Method"></a>Method</h4><table><thead><tr><th>URI</th><th>HTTP Method</th><th>Authentication</th></tr></thead><tbody><tr><td>api.tumblr.com/v2/blog/{blog-identifier}/posts[/type]?api_key={key}&amp;[optional-params=]</td><td>GET</td><td>API key</td></tr></tbody></table><h4 id="Request-Parameters-2"><a href="#Request-Parameters-2" class="headerlink" title="Request Parameters"></a>Request Parameters</h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th><th>Default</th><th>Required?</th></tr></thead><tbody><tr><td>blog-identifier</td><td>String</td><td>Any blog identifier</td><td>N/A</td><td>Yes</td></tr><tr><td>api_key</td><td>String</td><td>Your OAuth Consumer Key</td><td>N/A</td><td>Yes</td></tr><tr><td>type</td><td>String</td><td>The type of post to return. Specify one of the following:  text, quote, link, answer, video, audio, photo, chat</td><td>None – return all types</td><td>No</td></tr><tr><td>id</td><td>Number</td><td>A specific post ID. Returns the single post specified or (if not found) a 404 error.</td><td>None</td><td>No</td></tr><tr><td>tag</td><td>String</td><td>Limits the response to posts with the specified tag</td><td>None</td><td>No</td></tr><tr><td>limit</td><td>Number</td><td>The number of posts to return: 1–20, inclusive</td><td>20</td><td>No</td></tr><tr><td>offset</td><td>Number</td><td>Post number to start at</td><td>0 (first post)</td><td>No</td></tr><tr><td>reblog_info</td><td>Boolean</td><td>Indicates whether to return reblog information (specify true or false). Returns the various reblogged_ fields.</td><td>False</td><td>No</td></tr><tr><td>notes_info</td><td>Boolean</td><td>Indicates whether to return notes information (specify true or false). Returns note count and note metadata.</td><td>False</td><td>No</td></tr><tr><td>filter</td><td>String</td><td>Specifies the post format to return, other than HTML:</td><td>None (HTML)</td><td>No</td></tr><tr><td>before</td><td>Number</td><td>Returns posts published earlier than a specified Unix timestamp, in seconds.</td><td>False</td><td>No</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      分享下 tumblr Api 希望大家喜欢
    
    </summary>
    
      <category term="随笔" scheme="http://localhost/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="api" scheme="http://localhost/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Blogger Api -- 小米规整</title>
    <link href="http://localhost/2018/04/27/%E6%94%B6%E9%9B%86/%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E7%AB%99%E7%82%B9%E6%8E%A8%E8%8D%90/"/>
    <id>http://localhost/2018/04/27/收集/在线视频下载站点推荐/</id>
    <published>2018-04-27T06:57:05.040Z</published>
    <updated>2018-04-27T06:57:35.047Z</updated>
    
    <content type="html"><![CDATA[<p>下面介绍一些 Web 端在线视频下载站点，使用方法都一样，即你只要复制你要下载的视频地址，然后将 url 复制到这些在线站点文本框里面，即可进行下载。当然，这些在线站点只是支持大部分主流视频网站。</p><p>推荐一：Free Video Finder<br>站点地址：<a href="https://www.amoyshare.com/free-video-downloader/" target="_blank" rel="noopener">https://www.amoyshare.com/free-video-downloader/</a></p><p>官网上是说支持 1,000 + 站点视频的下载，包括主流常见的 YouTube、Facebook、Insgram 等，具体支持的站点列表感兴趣的可以看这个：<a href="https://www.amoyshare.com/sites/" target="_blank" rel="noopener">https://www.amoyshare.com/sites/</a></p><p>Free Video Finder支持1000多个主流网站</p><p>以下载 b 站上面的视频为例，随便复制一个 b 站视频地址，然后贴到文本框里面，如下：</p><p>复制要下载的b站视频地址到文本框</p><p>直接点击 Download 即可生成下载地址：</p><p>点击下载按钮进行下载</p><p>推荐二：Youtueb 视频下载器<br>站点地址：<a href="https://www.online-downloader.com/index-Chinese" target="_blank" rel="noopener">https://www.online-downloader.com/index-Chinese</a></p><p>官网上是说支持 200+ 站点视频下载，常见的比如 YouTube、脸书、雅虎、土豆、优酷、新浪、Dropbox 等等，具体支持的站点列表可以查看：<a href="https://www.online-downloader.com/Supported-Sites-Chinese" target="_blank" rel="noopener">https://www.online-downloader.com/Supported-Sites-Chinese</a></p><p>该站点有中文版面，体验还行，不过，有时候下载速度比较慢。</p><p>推荐三：videofk<br>站点地址：<a href="https://www.videofk.com/" target="_blank" rel="noopener">https://www.videofk.com/</a></p><p>这是网友开发维护的一个站点，之前在博客上留言推荐，试了下感觉还不错，支持的站点列表：</p><p>支持的站点列表</p><p>推荐四：Video Grabber<br>站点地址：<a href="https://www.videograbber.net/zh/" target="_blank" rel="noopener">https://www.videograbber.net/zh/</a></p><p>Video Grabber官网地址</p><p>支持下载优酷、爱奇艺、哔哩哔哩、搜狐等等网站的视频。</p><p>支持的网站列表</p><p>上面推荐的这些站点，并不是万能。有很多流行的视频网站，它们采用的是特殊的视频代码，只能用一些功能更加强大的视频嗅探软件探测到这类视频文件然后才可以进行下载，比如功能强大的 You-Get 。不过呢，You-Get 安装略麻烦，非技术人员安装估计很蛋疼。</p><p>如果你有用过其他好用的在线视频下载站点，或者功能更强大的视频嗅探软件,欢迎留言分享。</p>]]></content>
    
    <summary type="html">
    
      分享下 Blogger Api 希望大家喜欢
    
    </summary>
    
      <category term="随笔" scheme="http://localhost/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="api" scheme="http://localhost/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Blogger Api -- 小米规整</title>
    <link href="http://localhost/2018/04/21/%E6%94%B6%E9%9B%86/blogger%20Api/"/>
    <id>http://localhost/2018/04/21/收集/blogger Api/</id>
    <published>2018-04-21T04:34:59.526Z</published>
    <updated>2018-04-21T05:02:34.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blogger-API-Getting-Started"><a href="#Blogger-API-Getting-Started" class="headerlink" title="Blogger API: Getting Started"></a>Blogger API: Getting Started</h1><p>This document explains how to get started using the Blogger API.</p><h2 id="Before-you-start"><a href="#Before-you-start" class="headerlink" title="Before you start"></a>Before you start</h2><h3 id="Get-a-Google-Account"><a href="#Get-a-Google-Account" class="headerlink" title="Get a Google Account"></a>Get a Google Account</h3><p>Make sure that you have a Google Account set up. We recommend that you use a separate Google Account for development and testing purposes to protect yourself from accidental data loss. If you already have a test account, then you’re all set; you can visit the Blogger user interface to set up, edit, or view your test data.</p><h3 id="Get-familiar-with-Blogger"><a href="#Get-familiar-with-Blogger" class="headerlink" title="Get familiar with Blogger"></a>Get familiar with Blogger</h3><p>If you’re unfamiliar with Blogger concepts, read this document and experiment with the user interface before starting to code. This document assumes that you’re familiar with Blogger, with web programming concepts, and with web data formats.</p><h3 id="Learn-about-authorizing-requests-and-identifying-your-application"><a href="#Learn-about-authorizing-requests-and-identifying-your-application" class="headerlink" title="Learn about authorizing requests and identifying your application"></a>Learn about authorizing requests and identifying your application</h3><p>When your application requests private data, the request must be authorized by an authenticated user who has access to that data.</p><p>When your application requests public data, the request doesn’t need to be authorized, but does need to be accompanied by an identifier, such as an API key.</p><p>For information about how to authorize requests and use API keys, see Authorizing requests and identifying your application in the Using the API document.</p><h2 id="Blogger-API-background"><a href="#Blogger-API-background" class="headerlink" title="Blogger API background"></a>Blogger API background</h2><h3 id="Blogger-concepts"><a href="#Blogger-concepts" class="headerlink" title="Blogger concepts"></a>Blogger concepts</h3><p>Blogger is built on five basic concepts:</p><ul><li><strong>Blogs</strong>: The root concept of the API. A blog has posts and pages. This is the container for blog meta-information like blog name and Description.</li><li><strong>Posts</strong>: A blog post is the publishable item that the blog author has created. This information is meant to be timely, reflecting what the authors want to publish to the world now. It is understood that as time passes, blog posts content ages and becomes less relevent.</li><li><strong>Comments</strong>: A comment is the place where people other than the blog post author react to what the author has written. Everything from bricks to bouquets.</li><li><strong>Pages</strong>: A page is a place for static content, such as biographical information, or the ways to contact the user. This is generally timeless information that doesn’t change very often.</li><li><strong>Users</strong>: A user is someone who interacts with Blogger, be they acting as an Author, an Administrator, or just a Reader. For public blogs, readers may be anonymous, but on private blogs a reader must be identified by Blogger.</li></ul><h3 id="Blogger-API-data-model"><a href="#Blogger-API-data-model" class="headerlink" title="Blogger API data model"></a>Blogger API data model</h3><p>A resource is an individual data entity with a unique identifier. The Blogger JSON API operates on five types of resources:</p><ul><li><strong>Blogs resource</strong>: Represents a blog.</li><li><strong>Posts resource</strong>: Represents a post; each posts resource is a child of a blogs resource.</li><li><strong>Comments resource</strong>: Represents a comment on a specific post; each comments resource is a child of a posts resource.</li><li><strong>Pages resource</strong>: Represents a static page; each pages resource is a child of a blogs resource.</li><li><strong>Users resource</strong>: Represents a non-anonymous user. This is used to identify the Author of a page, post, or comment.</li></ul><p><img src="http://ot0en8caw.bkt.clouddn.com/20180421124224.png" alt="The blogs resource has two children resource types, pages and posts. A posts resource may have comments resource children."></p><p>Overview of the relationships between resources</p><p>The Blogger API data model is based on groups of resources, called collections:</p><p><strong>Blogs collection</strong></p><blockquote><p>A blogs collection consists of all the blogs a user has access rights to. You can list blogs by user, or retrieve a single blog by ID.</p></blockquote><p><strong>Posts collection</strong></p><blockquote><p>A Posts collection consists of all the posts resources within a specific blogs resource.</p></blockquote><p><strong>Comments collection</strong></p><blockquote><p>A comments collection consists of all the comments resources within a specific posts resource.</p></blockquote><p><strong>Pages collection</strong></p><blockquote><p>A pages collection consists of all the pages resources within a specific blogs resource.</p></blockquote><p><strong>Users Collection</strong></p><blockquote><p>A users collection consists of all the users resources on Blogger, and thus cannot be listed. A user can retrieve their own users resource (but nobody else’s) by ID, or by using the identifier self.</p></blockquote><h3 id="Blogger-API-operations"><a href="#Blogger-API-operations" class="headerlink" title="Blogger API operations"></a>Blogger API operations</h3><p>You can invoke a number of different methods on collections and resources in the Blogger API, as described in the following table.</p><table><thead><tr><th>Operation</th><th>Description</th><th>REST HTTP mappings</th></tr></thead><tbody><tr><td>list</td><td>Lists all resources within a collection.</td><td>GET on a collection URI.</td></tr><tr><td>get</td><td>Gets a specific resource.</td><td>GET on a resource URI.</td></tr><tr><td>getByUrl</td><td>Gets a resource, looking it up by URL.</td><td>GET with the URL passed in as a parameter.</td></tr><tr><td>getByPath</td><td>Gets a resource by looking it up by its path.</td><td>GET with the Path passed in as a parameter.</td></tr><tr><td>listByUser</td><td>Lists resources owned by a User.</td><td>GET on a user owned collection.</td></tr><tr><td>search</td><td>Search for resources, based on a query parameter.</td><td>GET on a Search URL, with the query passed in as a parameter.</td></tr><tr><td>insert</td><td>Create a resource in a collection.</td><td>POST on a collection URI.</td></tr><tr><td>delete</td><td>Deletes a resource.</td><td>DELETE on a resource URI.</td></tr><tr><td>patch</td><td>Update a resource, using Patch semantics.</td><td>PATCH on a resource URI.</td></tr><tr><td>update</td><td>Update a resource.</td><td>PUT on a resource URI.</td></tr></tbody></table><p>The table below shows which methods are supported by each resource type. All list and get operations on private blogs require authentication.</p><table><thead><tr><th>Resource Type</th><th>list</th><th>get</th><th>getByUrl</th><th>getByPath</th><th>listByUser</th><th>search</th><th>insert</th><th>delete</th><th>patch</th><th>update</th></tr></thead><tbody><tr><td>Blogs</td><td>no</td><td>yes</td><td>yes</td><td>no</td><td>yes</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td></tr><tr><td>Posts</td><td>yes</td><td>yes</td><td>no</td><td>yes</td><td>no</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>Comments</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td></tr><tr><td>Pages</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td></tr><tr><td>Users</td><td>no</td><td>yes</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td></tr></tbody></table><h2 id="Calling-styles"><a href="#Calling-styles" class="headerlink" title="Calling styles"></a>Calling styles</h2><p>There are several ways to invoke the API:</p><ul><li>Using REST directly or from JavaScript (no server-side code required)</li><li>Using the client libraries.</li></ul><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p>REST is a style of software architecture that provides a convenient and consistent approach to requesting and modifying data.</p><p>The term REST is short for “Representational State Transfer.” In the context of Google APIs, it refers to using HTTP verbs to retrieve and modify representations of data stored by Google.</p><p>In a RESTful system, resources are stored in a data store; a client sends a request that the server perform a particular action (such as creating, retrieving, updating, or deleting a resource), and the server performs the action and sends a response, often in the form of a representation of the specified resource.</p><p>In Google’s RESTful APIs, the client specifies an action using an HTTP verb such as POST, GET, PUT, or DELETE. It specifies a resource by a globally-unique URI of the following form:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/apiName/apiVersion/resourcePath?parameters</span><br></pre></td></tr></table></figure><p>Because all API resources have unique HTTP-accessible URIs, REST enables data caching and is optimized to work with the web’s distributed infrastructure.</p><p>You may find the method definitions in the HTTP 1.1 standards documentation useful; they include specifications for GET, POST, PUT, and DELETE.</p><h3 id="REST-in-the-Blogger-API"><a href="#REST-in-the-Blogger-API" class="headerlink" title="REST in the Blogger API"></a>REST in the Blogger API</h3><p>The supported Blogger operations map directly to REST HTTP verbs, as described in Blogger API operations.</p><p>The specific format for Blogger API URIs are:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/blogger/v3/users/userId</span><br><span class="line">https://www.googleapis.com/blogger/v3/users/self</span><br><span class="line">https://www.googleapis.com/blogger/v3/users/userId/blogs</span><br><span class="line">https://www.googleapis.com/blogger/v3/users/self/blogs</span><br><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId</span><br><span class="line">https://www.googleapis.com/blogger/v3/blogs/byurl</span><br><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/posts</span><br><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/bypath</span><br><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/search</span><br><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId</span><br><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId/comments</span><br><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId/comments/commentId</span><br><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/pages</span><br><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/pages/pageId</span><br></pre></td></tr></table></figure></p><p>The full explanation of URIs used and the results for each supported operation in the API is summarized in the Blogger API Reference document.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>List the blogs that the authenticated user has access rights to:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://www.googleapis.com/blogger/v3/users/self/blogs?key=YOUR-API-KEY</span><br></pre></td></tr></table></figure></p><p>Get the posts on the code.blogger.com blog, which has blog ID 3213900:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://www.googleapis.com/blogger/v3/blogs/3213900?key=YOUR-API-KEY</span><br></pre></td></tr></table></figure></p><h3 id="REST-from-JavaScript"><a href="#REST-from-JavaScript" class="headerlink" title="REST from JavaScript"></a>REST from JavaScript</h3><p>You can invoke the Blogger API from JavaScript, using the callback query parameter and by providing a callback function. When the browser loads the script, the callback function is executed and the response is provided to the callback function. This approach allows you to write rich applications that display Blogger data without requiring server side code.</p><p>The following example retrieves a post from the code.blogger.com blog, after you replace YOUR-API-KEY with your API key.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Blogger API Example&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      function handleResponse(response) &#123;</span><br><span class="line">        document.getElementById(&quot;content&quot;).innerHTML += &quot;&lt;h1&gt;&quot; + response.title + &quot;&lt;/h1&gt;&quot; + response.content;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script</span><br><span class="line">    src=&quot;https://www.googleapis.com/blogger/v3/blogs/3213900/posts/8398240586497962757?callback=handleResponse&amp;key=YOUR-API-KEY&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Data-format"><a href="#Data-format" class="headerlink" title="Data format"></a>Data format</h2><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON (JavaScript Object Notation) is a common, language-independent data format that provides a simple text representation of arbitrary data structures. For more information, see json.org.</p><h1 id="Blogger-API-Using-the-API"><a href="#Blogger-API-Using-the-API" class="headerlink" title="Blogger API: Using the API"></a>Blogger API: Using the API</h1><p>The Blogger API enables you to integrate Blogger content with your application by using the REST APIs. Before you begin, you will need to set up authorization.</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This document is intended for developers who want to write applications that can interact with the Blogger API. Blogger is a tool for creating websites that allow people to publish their thoughts on an ongoing basis.</p><p>If you’re unfamiliar with Blogger concepts, you should read Getting Started before starting to code.</p><h3 id="Authorizing-requests-and-identifying-your-application"><a href="#Authorizing-requests-and-identifying-your-application" class="headerlink" title="Authorizing requests and identifying your application"></a>Authorizing requests and identifying your application</h3><p>Every request your application sends to the Blogger APIs needs to identify your application to Google. There are two ways to identify your application: using an OAuth 2.0 token (which also authorizes the request) and/or using the application’s API key. Here’s how to determine which of those options to use:</p><p>If the request requires authorization (such as a request for an individual’s private data), then the application must provide an OAuth 2.0 token with the request. The application may also provide the API key, but it doesn’t have to.<br>If the request doesn’t require authorization (such as a request for public data), then the application must provide either the API key or an OAuth 2.0 token, or both—whatever option is most convenient for you.</p><h4 id="About-authorization-protocols"><a href="#About-authorization-protocols" class="headerlink" title="About authorization protocols"></a>About authorization protocols</h4><p>Your application must use OAuth 2.0 to authorize requests. No other authorization protocols are supported. If your application uses Google Sign-In, some aspects of authorization are handled for you.</p><h4 id="Authorizing-requests-with-OAuth-2-0"><a href="#Authorizing-requests-with-OAuth-2-0" class="headerlink" title="Authorizing requests with OAuth 2.0"></a>Authorizing requests with OAuth 2.0</h4><p>Requests to the Blogger APIs for non-public user data must be authorized by an authenticated user.</p><p>This process is facilitated with an OAuth client ID.</p><p>GET AN OAUTH CLIENT ID<br>Or create one in the Credentials page.</p><p>The details of the authorization process, or “flow,” for OAuth 2.0 vary somewhat depending on what kind of application you’re writing. The following general process applies to all application types:</p><p>When your application needs access to user data, it asks Google for a particular scope of access.<br>Google displays a consent screen to the user, asking them to authorize your application to request some of their data.<br>If the user approves, then Google gives your application a short-lived access token.<br>Your application requests user data, attaching the access token to the request.<br>If Google determines that your request and the token are valid, it returns the requested data.<br>Some flows include additional steps, such as using refresh tokens to acquire new access tokens. For detailed information about flows for various types of applications, see Google’s OAuth 2.0 documentation.</p><p>Here’s the OAuth 2.0 scope information for the Blogger APIs:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/auth/blogger</span><br></pre></td></tr></table></figure></p><p>To request access using OAuth 2.0, your application needs the scope information, as well as information that Google supplies when you register your application (such as the client ID and the client secret).</p><p>Tip: The Google APIs client libraries can handle some of the authorization process for you. They are available for a variety of programming languages; check the page with libraries and samples for more details.</p><h4 id="Acquiring-and-using-an-API-key"><a href="#Acquiring-and-using-an-API-key" class="headerlink" title="Acquiring and using an API key"></a>Acquiring and using an API key</h4><p>Requests to the Blogger APIs for public data must be accompanied by an identifier, which can be an API key or an access token.</p><p>GET A KEY<br>Or create one in the Credentials page.</p><p>After you have an API key, your application can append the query parameter key=yourAPIKey to all request URLs.</p><p>The API key is safe for embedding in URLs; it doesn’t need any encoding.</p><h2 id="Working-with-blogs"><a href="#Working-with-blogs" class="headerlink" title="Working with blogs"></a>Working with blogs</h2><h3 id="Retrieving-a-blog"><a href="#Retrieving-a-blog" class="headerlink" title="Retrieving a blog"></a>Retrieving a blog</h3><p>You can retrieve information for a particular blog by sending an HTTP GET request to the blog’s URI. The URI for a blog has the following format:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId</span><br></pre></td></tr></table></figure></p><p>Request<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://www.googleapis.com/blogger/v3/blogs/2399953?key=YOUR-API-KEY</span><br></pre></td></tr></table></figure></p><p>A user does not need to be authenticated to retrieve a public blog. The application does not need to include Authorization HTTP header for a public blog request; however, you do need to provide the API key.</p><p>Blogger also has private blogs, which require authentication.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the blog data:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"kind"</span>: <span class="string">"blogger#blog"</span>,</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"2399953"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Blogger Buzz"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"The Official Buzz from Blogger at Google"</span>,</span><br><span class="line">  <span class="attr">"published"</span>: <span class="string">"2007-04-23T22:17:29.261Z"</span>,</span><br><span class="line">  <span class="attr">"updated"</span>: <span class="string">"2011-08-02T06:01:15.941Z"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"http://buzz.blogger.com/"</span>,</span><br><span class="line">  <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/2399953"</span>,</span><br><span class="line">  <span class="attr">"posts"</span>: &#123;</span><br><span class="line">    <span class="attr">"totalItems"</span>: <span class="number">494</span>,</span><br><span class="line">    <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/2399953/posts"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"pages"</span>: &#123;</span><br><span class="line">    <span class="attr">"totalItems"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/2399953/pages"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"locale"</span>: &#123;</span><br><span class="line">    <span class="attr">"language"</span>: <span class="string">"en"</span>,</span><br><span class="line">    <span class="attr">"country"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"variant"</span>: <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Retrieving-a-blog-by-its-URL"><a href="#Retrieving-a-blog-by-its-URL" class="headerlink" title="Retrieving a blog by its URL"></a>Retrieving a blog by its URL</h3><p>You can retrieve a blog using its URL by sending an HTTP GET request to the following URI with a url parameter:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/blogger/v3/blogs/byurl?url=blog-url</span><br></pre></td></tr></table></figure></p><p>Request<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/blogger/v3/blogs/byurl?url=http://code.blogger.com/</span><br></pre></td></tr></table></figure></p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the full representation of the identified blog:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"kind"</span>: <span class="string">"blogger#blog"</span>,</span><br><span class="line"> <span class="attr">"id"</span>: <span class="string">"3213900"</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Blogger Developers Network"</span>,</span><br><span class="line"> <span class="attr">"description"</span>: <span class="string">"The official Blogger Developers Network weblog."</span>,</span><br><span class="line"> <span class="attr">"published"</span>: <span class="string">"2007-02-09T10:13:10-08:00"</span>,</span><br><span class="line"> <span class="attr">"updated"</span>: <span class="string">"2012-04-15T19:38:01-07:00"</span>,</span><br><span class="line"> <span class="attr">"url"</span>: <span class="string">"http://code.blogger.com/"</span>,</span><br><span class="line"> <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/3213900"</span>,</span><br><span class="line"> <span class="attr">"posts"</span>: &#123;</span><br><span class="line">  <span class="attr">"totalItems"</span>: <span class="number">55</span>,</span><br><span class="line">  <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/3213900/posts"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"pages"</span>: &#123;</span><br><span class="line">  <span class="attr">"totalItems"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/3213900/pages"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"locale"</span>: &#123;</span><br><span class="line">  <span class="attr">"language"</span>: <span class="string">"en"</span>,</span><br><span class="line">  <span class="attr">"country"</span>: <span class="string">"US"</span>,</span><br><span class="line">  <span class="attr">"variant"</span>: <span class="string">""</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Retrieving-a-user’s-blogs"><a href="#Retrieving-a-user’s-blogs" class="headerlink" title="Retrieving a user’s blogs"></a>Retrieving a user’s blogs</h3><p>You can retrieve a list of a user’s blogs by sending an HTTP GET request to the blogs collection URI:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/blogger/v3/users/userId/blogs</span><br></pre></td></tr></table></figure></p><p>Request<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://www.googleapis.com/blogger/v3/users/self/blogs</span><br></pre></td></tr></table></figure></p><p>Authorization: /<em> OAuth 2.0 token here </em>/<br>Note: The user must be authenticated to list their own blogs, so you must provide the Authorization HTTP header with the GET request.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the full representation of the list of the user’s blogs:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"kind"</span>: <span class="string">"blogger#blogList"</span>,</span><br><span class="line">  <span class="attr">"items"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"kind"</span>: <span class="string">"blogger#blog"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"4967929378133675647"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Brett's Test Blawg"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"published"</span>: <span class="string">"2010-10-06T23:33:31.662Z"</span>,</span><br><span class="line">      <span class="attr">"updated"</span>: <span class="string">"2011-08-08T06:50:02.005Z"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"http://brettmorgan-test-blawg.blogspot.com/"</span>,</span><br><span class="line">      <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/4967929378133675647"</span>,</span><br><span class="line">      <span class="attr">"posts"</span>: &#123;</span><br><span class="line">        <span class="attr">"totalItems"</span>: <span class="number">13</span>,</span><br><span class="line">        <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/4967929378133675647/posts"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"pages"</span>: &#123;</span><br><span class="line">        <span class="attr">"totalItems"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/4967929378133675647/pages"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"locale"</span>: &#123;</span><br><span class="line">        <span class="attr">"language"</span>: <span class="string">"en"</span>,</span><br><span class="line">        <span class="attr">"country"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"variant"</span>: <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Working-with-posts"><a href="#Working-with-posts" class="headerlink" title="Working with posts"></a>Working with posts</h2><h3 id="Retrieving-posts-from-a-blog"><a href="#Retrieving-posts-from-a-blog" class="headerlink" title="Retrieving posts from a blog"></a>Retrieving posts from a blog</h3><p>You can retrieve a list of posts from a given blog by sending a GET request to the posts collection URI. The URI for a posts collection has the following format:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/posts</span><br></pre></td></tr></table></figure></p><p>Request</p><p>Here is an example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://www.googleapis.com/blogger/v3/blogs/2399953/posts?key=YOUR-API-KEY</span><br></pre></td></tr></table></figure></p><p>A user does not need to be authenticated to retrieve a public blog. The application does not need to include Authorization HTTP header for a public blog request; however, you do need to provide the API key.</p><p>Blogger also has private blogs, which require authentication.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the list of posts:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"kind"</span>: <span class="string">"blogger#postList"</span>,</span><br><span class="line">  <span class="attr">"nextPageToken"</span>: <span class="string">"CgkIChiAkceVjiYQ0b2SAQ"</span>,</span><br><span class="line">  <span class="attr">"prevPageToken"</span>: <span class="string">"CgkIChDBwrK3mCYQ0b2SAQ"</span>,</span><br><span class="line">  <span class="attr">"items"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"kind"</span>: <span class="string">"blogger#post"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"7706273476706534553"</span>,</span><br><span class="line">      <span class="attr">"blog"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"2399953"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"published"</span>: <span class="string">"2011-08-01T19:58:00.000Z"</span>,</span><br><span class="line">      <span class="attr">"updated"</span>: <span class="string">"2011-08-01T19:58:51.947Z"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"http://buzz.blogger.com/2011/08/latest-updates-august-1st.html"</span>,</span><br><span class="line">      <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/2399953/posts/7706273476706534553"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Latest updates, August 1st"</span>,</span><br><span class="line">      <span class="attr">"content"</span>: <span class="string">"elided for readability"</span>,</span><br><span class="line">      <span class="attr">"author"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"401465483996"</span>,</span><br><span class="line">        <span class="attr">"displayName"</span>: <span class="string">"Brett Wiltshire"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"http://www.blogger.com/profile/01430672582309320414"</span>,</span><br><span class="line">        <span class="attr">"image"</span>: &#123;</span><br><span class="line">          <span class="attr">"url"</span>: <span class="string">"http://4.bp.blogspot.com/_YA50adQ-7vQ/S1gfR_6ufpI/AAAAAAAAAAk/1ErJGgRWZDg/S45/brett.png"</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"replies"</span>: &#123;</span><br><span class="line">        <span class="attr">"totalItems"</span>: <span class="string">"0"</span>,</span><br><span class="line">        <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/2399953/posts/7706273476706534553/comments"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"kind"</span>: <span class="string">"blogger#post"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"6069922188027612413"</span>,</span><br><span class="line">      elided for readability</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Retrieving-a-specific-post"><a href="#Retrieving-a-specific-post" class="headerlink" title="Retrieving a specific post"></a>Retrieving a specific post</h3><p>You can retrieve a specific post from a blog by sending a GET request to the posts resource URI. The URI for a posts resource has the following format:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId</span><br></pre></td></tr></table></figure></p><p>Request<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://www.googleapis.com/blogger/v3/blogs/2399953/posts/7706273476706534553?key=YOUR-API-KEY</span><br></pre></td></tr></table></figure></p><p>A user does not need to be authenticated to retrieve a public blog. The application does not need to include Authorization HTTP header for a public blog request; however, you do need to provide the API key.</p><p>Blogger also has private blogs, which require authentication.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the contents of the post:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;blogger#post&quot;,</span><br><span class="line">  &quot;id&quot;: &quot;7706273476706534553&quot;,</span><br><span class="line">  &quot;blog&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;2399953&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;published&quot;: &quot;2011-08-01T19:58:00.000Z&quot;,</span><br><span class="line">  &quot;updated&quot;: &quot;2011-08-01T19:58:51.947Z&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://buzz.blogger.com/2011/08/latest-updates-august-1st.html&quot;,</span><br><span class="line">  &quot;selfLink&quot;: &quot;https://www.googleapis.com/blogger/v3/blogs/2399953/posts/7706273476706534553&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;Latest updates, August 1st&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;elided for readability&quot;,</span><br><span class="line">  &quot;author&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;401465483996&quot;,</span><br><span class="line">    &quot;displayName&quot;: &quot;Brett Wiltshire&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;http://www.blogger.com/profile/01430672582309320414&quot;,</span><br><span class="line">    &quot;image&quot;: &#123;</span><br><span class="line">      &quot;url&quot;: &quot;http://4.bp.blogspot.com/_YA50adQ-7vQ/S1gfR_6ufpI/AAAAAAAAAAk/1ErJGgRWZDg/S45/brett.png&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;replies&quot;: &#123;</span><br><span class="line">    &quot;totalItems&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;https://www.googleapis.com/blogger/v3/blogs/2399953/posts/7706273476706534553/comments&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Searching-for-a-post"><a href="#Searching-for-a-post" class="headerlink" title="Searching for a post"></a>Searching for a post</h3><p>You can search for posts from a blog by sending a GET request to the post search URI with the q search query parameter:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/search?q=query terms</span><br></pre></td></tr></table></figure></p><p>Request<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://www.googleapis.com/blogger/v3/blogs/3213900/posts/search?q=documentation&amp;key=YOUR-API-KEY</span><br></pre></td></tr></table></figure></p><p>A user does not need to be authenticated to retrieve a public blog. The application does not need to include Authorization HTTP header for a public blog request; however, you do need to provide the API key.</p><p>Blogger also has private blogs, which require authentication.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the contents of the post:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"kind"</span>: <span class="string">"blogger#postList"</span>,</span><br><span class="line">  <span class="attr">"nextPageToken"</span>: <span class="string">"CgkIChiAj86CpB8QzJTEAQ"</span>,</span><br><span class="line">  <span class="attr">"prevPageToken"</span>: <span class="string">"CgkIChDBq5v24yYQzJTEAQ"</span>,</span><br><span class="line">  <span class="attr">"items"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"kind"</span>: <span class="string">"blogger#post"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"1387873546480002228"</span>,</span><br><span class="line">    <span class="attr">"blog"</span>: &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"3213900"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"published"</span>: <span class="string">"2012-03-23T01:58:00-07:00"</span>,</span><br><span class="line">    <span class="attr">"updated"</span>: <span class="string">"2012-03-23T01:58:12-07:00"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"http://code.blogger.com/2012/03/blogger-documentation-has-moved-to.html"</span>,</span><br><span class="line">    <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/3213900/posts/1387873546480002228"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"Blogger Documentation has moved to developers.google.com"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"content elided for readability"</span>,</span><br><span class="line">    <span class="attr">"author"</span>: &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"16258312240222542576"</span>,</span><br><span class="line">      <span class="attr">"displayName"</span>: <span class="string">"Brett Morgan"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"http://www.blogger.com/profile/16258312240222542576"</span>,</span><br><span class="line">      <span class="attr">"image"</span>: &#123;</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"https://resources.blogblog.com/img/b16-rounded.gif"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"replies"</span>: &#123;</span><br><span class="line">      <span class="attr">"totalItems"</span>: <span class="string">"0"</span>,</span><br><span class="line">      <span class="attr">"selfLink"</span>: <span class="string">"https://www.googleapis.com/blogger/v3/blogs/3213900/posts/1387873546480002228/comments"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Adding-a-post"><a href="#Adding-a-post" class="headerlink" title="Adding a post"></a>Adding a post</h3><p>You can add a post for a blog by sending a POST request to the post collection URI with a post JSON body:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/</span><br></pre></td></tr></table></figure></p><p>Request<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/</span><br></pre></td></tr></table></figure></p><p>Authorization: /<em> OAuth 2.0 token here </em>/<br>Content-Type: application/json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"kind"</span>: <span class="string">"blogger#post"</span>,</span><br><span class="line">  <span class="attr">"blog"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"8070105920543249955"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"A new post"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"With &lt;b&gt;exciting&lt;/b&gt; content..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>You must be authenticated to create a post.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the contents of the post:</p><p>{<br> “kind”: “blogger#post”,<br> “id”: “6819100329896798058”,<br> “blog”: {<br>  “id”: “8070105920543249955”<br> },<br> “published”: “2012-05-20T20:08:00-07:00”,<br> “updated”: “2012-05-20T20:08:35-07:00”,<br> “url”: “<a href="http://brettmorgan-test2.blogspot.com/2012/05/new-post.html&quot;" target="_blank" rel="noopener">http://brettmorgan-test2.blogspot.com/2012/05/new-post.html&quot;</a>,<br> “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058&quot;</a>,<br> “title”: “A new post”,<br> “content”: “With <b>exciting</b> content…”,<br> “author”: {<br>  “id”: “16258312240222542576”,<br>  “displayName”: “Brett Morgan”,<br>  “url”: “<a href="http://www.blogger.com/profile/16258312240222542576&quot;" target="_blank" rel="noopener">http://www.blogger.com/profile/16258312240222542576&quot;</a>,<br>  “image”: {<br>   “url”: “<a href="https://resources.blogblog.com/img/b16-rounded.gif&quot;" target="_blank" rel="noopener">https://resources.blogblog.com/img/b16-rounded.gif&quot;</a><br>  }<br> },<br> “replies”: {<br>  “totalItems”: “0”,<br>  “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058/comments&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058/comments&quot;</a><br> }<br>}<br>Deleting a post<br>You can delete a post for a blog by sending a DELETE request to the post resource URI:</p><p><a href="https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId</a><br>Request<br>Here is an example:</p><p>DELETE <a href="https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058</a><br>Authorization: /<em> OAuth 2.0 token here </em>/<br>You must be authenticated to delete a post.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code.</p><p>Retrieving a post by its path<br>You can retrieve a post from a blog by sending a GET request to the posts bypath URI with a path parameter. The URI for a posts by path request has the following format:</p><p><a href="https://www.googleapis.com/blogger/v3/blogs/blogId/posts/bypath?path=post-path" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/bypath?path=post-path</a><br>Request<br><a href="https://www.googleapis.com/blogger/v3/blogs/2399953/posts/bypath?path=/2011/08/latest-updates-august-1st.html&amp;key=YOUR-API-KEY" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/2399953/posts/bypath?path=/2011/08/latest-updates-august-1st.html&amp;key=YOUR-API-KEY</a><br>A user does not need to be authenticated to retrieve a public blog. The application does not need to include Authorization HTTP header for a public blog request; however, you do need to provide the API key.</p><p>Blogger also has private blogs, which require authentication.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the contents of the post:</p><p>{<br>  “kind”: “blogger#post”,<br>  “id”: “7706273476706534553”,<br>  “blog”: {<br>    “id”: “2399953”<br>  },<br>  “published”: “2011-08-01T19:58:00.000Z”,<br>  “updated”: “2011-08-01T19:58:51.947Z”,<br>  “url”: “<a href="http://buzz.blogger.com/2011/08/latest-updates-august-1st.html&quot;" target="_blank" rel="noopener">http://buzz.blogger.com/2011/08/latest-updates-august-1st.html&quot;</a>,<br>  “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/2399953/posts/7706273476706534553&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/2399953/posts/7706273476706534553&quot;</a>,<br>  “title”: “Latest updates, August 1st”,<br>  “content”: “elided for readability”,<br>  “author”: {<br>    “id”: “401465483996”,<br>    “displayName”: “Brett Wiltshire”,<br>    “url”: “<a href="http://www.blogger.com/profile/01430672582309320414&quot;" target="_blank" rel="noopener">http://www.blogger.com/profile/01430672582309320414&quot;</a>,<br>    “image”: {<br>      “url”: “<a href="http://4.bp.blogspot.com/_YA50adQ-7vQ/S1gfR_6ufpI/AAAAAAAAAAk/1ErJGgRWZDg/S45/brett.png&quot;" target="_blank" rel="noopener">http://4.bp.blogspot.com/_YA50adQ-7vQ/S1gfR_6ufpI/AAAAAAAAAAk/1ErJGgRWZDg/S45/brett.png&quot;</a><br>    }<br>  },<br>  “replies”: {<br>    “totalItems”: “0”,<br>    “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/2399953/posts/7706273476706534553/comments&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/2399953/posts/7706273476706534553/comments&quot;</a><br>  }<br>}<br>Updating a post<br>You can update a post for a blog by sending a PUT request to the post resource URI with a post JSON body:</p><p><a href="https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId</a><br>Request<br>PUT <a href="https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/3445355871727114160" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/3445355871727114160</a><br>Authorization: /<em> OAuth 2.0 token here </em>/<br>Content-Type: application/json</p><p>{<br> “kind”: “blogger#post”,<br> “id”: “3445355871727114160”,<br> “blog”: {<br>  “id”: “8070105920543249955”<br> },<br> “url”: “<a href="http://brettmorgan-test2.blogspot.com/2012/05/new-post_20.html&quot;" target="_blank" rel="noopener">http://brettmorgan-test2.blogspot.com/2012/05/new-post_20.html&quot;</a>,<br> “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/3445355871727114160&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/3445355871727114160&quot;</a>,<br> “title”: “An updated post”,<br> “content”: “With really <b>exciting</b> content…”<br>}<br>You must be authenticated to update a post.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the contents of the post:</p><p>{<br> “kind”: “blogger#post”,<br> “id”: “6819100329896798058”,<br> “blog”: {<br>  “id”: “8070105920543249955”<br> },<br> “published”: “2012-05-20T20:08:00-07:00”,<br> “updated”: “2012-05-20T20:08:35-07:00”,<br> “url”: “<a href="http://brettmorgan-test2.blogspot.com/2012/05/new-post.html&quot;" target="_blank" rel="noopener">http://brettmorgan-test2.blogspot.com/2012/05/new-post.html&quot;</a>,<br> “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058&quot;</a>,<br> “title”: “An updated post”,<br> “content”: “With really <b>exciting</b> content…”,<br> “author”: {<br>  “id”: “16258312240222542576”,<br>  “displayName”: “Brett Morgan”,<br>  “url”: “<a href="http://www.blogger.com/profile/16258312240222542576&quot;" target="_blank" rel="noopener">http://www.blogger.com/profile/16258312240222542576&quot;</a>,<br>  “image”: {<br>   “url”: “<a href="https://resources.blogblog.com/img/b16-rounded.gif&quot;" target="_blank" rel="noopener">https://resources.blogblog.com/img/b16-rounded.gif&quot;</a><br>  }<br> },<br> “replies”: {<br>  “totalItems”: “0”,<br>  “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058/comments&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058/comments&quot;</a><br> }<br>}<br>Updating A post with patch semantics<br>You can update a post with patch semantics by sending a PATCH request to the post resource URI with a post JSON body:</p><p><a href="https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId</a><br>Request<br>Here is an example:</p><p>PATCH <a href="https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/3445355871727114160" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/3445355871727114160</a><br>Authorization: /<em> OAuth 2.0 token here </em>/<br>Content-Type: application/json</p><p>{<br> “content”: “With absolutely <b>fabulous</b> content…”<br>}<br>You must be authenticated to update a post.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the contents of the post:</p><p>{<br> “kind”: “blogger#post”,<br> “id”: “6819100329896798058”,<br> “blog”: {<br>  “id”: “8070105920543249955”<br> },<br> “published”: “2012-05-20T20:08:00-07:00”,<br> “updated”: “2012-05-20T20:08:35-07:00”,<br> “url”: “<a href="http://brettmorgan-test2.blogspot.com/2012/05/new-post.html&quot;" target="_blank" rel="noopener">http://brettmorgan-test2.blogspot.com/2012/05/new-post.html&quot;</a>,<br> “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058&quot;</a>,<br> “title”: “An updated post”,<br> “content”: “With absolutely <b>fabulous</b> content…”,<br> “author”: {<br>  “id”: “16258312240222542576”,<br>  “displayName”: “Brett Morgan”,<br>  “url”: “<a href="http://www.blogger.com/profile/16258312240222542576&quot;" target="_blank" rel="noopener">http://www.blogger.com/profile/16258312240222542576&quot;</a>,<br>  “image”: {<br>   “url”: “<a href="https://resources.blogblog.com/img/b16-rounded.gif&quot;" target="_blank" rel="noopener">https://resources.blogblog.com/img/b16-rounded.gif&quot;</a><br>  }<br> },<br> “replies”: {<br>  “totalItems”: “0”,<br>  “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058/comments&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/8070105920543249955/posts/6819100329896798058/comments&quot;</a><br> }<br>}<br>Working with comments<br>Retrieving comments for a post<br>You can retrieve a list of comments for a post by sending a GET request to the comments collection URI. The URI for a comments collection has the following format:</p><p><a href="https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId/comments" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId/comments</a><br>Request<br>GET <a href="https://www.googleapis.com/blogger/v3/blogs/2399953/posts/6069922188027612413/comments?key=YOUR-API-KEY" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/2399953/posts/6069922188027612413/comments?key=YOUR-API-KEY</a><br>“A user does not need to be authenticated to retrieve a public blog. The application does not need to include Authorization HTTP header for a public blog request; however, you do need to provide the API key.</p><p>Blogger also has private blogs, which require authentication.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the list of comments:</p><p>{<br>  “kind”: “blogger#commentList”,<br>  “nextPageToken”: “CgkIFBDwjvDXlyYQ0b2SARj9mZe9n8KsnlQ”,<br>  “prevPageToken”: “CgkIFBisvMGRlyYQ0b2SARj9mZe9n8KsnlQ”,<br>  “items”: [<br>    {<br>       “kind”: “blogger#comment”,<br>       “id”: “9200761938824362519”,<br>       “post”: {<br>         “id”: “6069922188027612413”<br>       },<br>       “blog”: {<br>         “id”: “2399953”<br>       },<br>       “published”: “2011-07-28T19:19:57.740Z”,<br>       “updated”: “2011-07-28T21:29:42.015Z”,<br>       “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/2399953/posts/6069922188027612413/comments/9200761938824362519&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/2399953/posts/6069922188027612413/comments/9200761938824362519&quot;</a>,<br>       “content”: “elided”,<br>       “author”: {<br>         “id”: “530579030283”,<br>         “displayName”: “elided”,<br>         “url”: “elided”,<br>         “image”: {<br>           “url”: “elided”<br>         }<br>       }<br>    },<br>    {<br>      “kind”: “blogger#comment”,<br>      “id”: “400101178920857170”,<br>      elided for readability<br>    }<br>  ]<br>}<br>Retrieving a specific comment<br>You can retrieve a specific comment from a post by sending a GET request to the comments resource URI. The URI for a comments resource has the following format:</p><p><a href="https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId/comments/commentId" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/blogId/posts/postId/comments/commentId</a><br>Request<br>GET <a href="https://www.googleapis.com/blogger/v3/blogs/2399953/posts/6069922188027612413/comments/9200761938824362519?key=YOUR-API-KEY" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/2399953/posts/6069922188027612413/comments/9200761938824362519?key=YOUR-API-KEY</a><br>“A user does not need to be authenticated to retrieve a public blog. The application does not need to include Authorization HTTP header for a public blog request; however, you do need to provide the API key.</p><p>Blogger also has private blogs, which require authentication.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the comment data:</p><p>{<br>  “kind”: “blogger#comment”,<br>  “id”: “9200761938824362519”,<br>  “post”: {<br>    “id”: “6069922188027612413”<br>  },<br>  “blog”: {<br>    “id”: “2399953”<br>  },<br>  “published”: “2011-07-28T19:19:57.740Z”,<br>  “updated”: “2011-07-28T21:29:42.015Z”,<br>  “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/2399953/posts/6069922188027612413/comments/9200761938824362519&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/2399953/posts/6069922188027612413/comments/9200761938824362519&quot;</a>,<br>  “content”: “elided”,<br>  “author”: {<br>    “id”: “530579030283”,<br>    “displayName”: “elided”,<br>    “url”: “elided”,<br>    “image”: {<br>      “url”: “elided”<br>    }<br>  }<br>}<br>Working with pages<br>Retrieving pages for a blog<br>You can retrieve a list of pages for a blog by sending a GET request to the pages collection URI. The URI for a pages collection has the following format:</p><p><a href="https://www.googleapis.com/blogger/v3/blogs/blogId/pages" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/blogId/pages</a><br>Request<br>GET <a href="https://www.googleapis.com/blogger/v3/blogs/4967929378133675647/pages?key=YOUR-API-KEY" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/4967929378133675647/pages?key=YOUR-API-KEY</a><br>“A user does not need to be authenticated to retrieve a public blog. The application does not need to include Authorization HTTP header for a public blog request; however, you do need to provide the API key.</p><p>Blogger also has private blogs, which require authentication.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the list of pages:</p><p>{<br>  “kind”: “blogger#pageList”,<br>  “items”: [<br>    {<br>      “kind”: “blogger#page”,<br>      “id”: “273541696466681878”,<br>      “blog”: {<br>        “id”: “4967929378133675647”<br>      },<br>      “published”: “2011-07-14T16:16:00.000Z”,<br>      “updated”: “2011-07-14T16:16:23.602Z”,<br>      “url”: “<a href="http://brettmorgan-test-blawg.blogspot.com/p/static-content.html&quot;" target="_blank" rel="noopener">http://brettmorgan-test-blawg.blogspot.com/p/static-content.html&quot;</a>,<br>      “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/4967929378133675647/pages/273541696466681878&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/4967929378133675647/pages/273541696466681878&quot;</a>,<br>      “title”: “Static Content”,<br>      “content”: “elided for readability”,<br>      “author”: {<br>        “id”: “901569848744”,<br>        “displayName”: “brett”,<br>        “url”: “<a href="http://www.blogger.com/profile/16258312240222542576&quot;" target="_blank" rel="noopener">http://www.blogger.com/profile/16258312240222542576&quot;</a>,<br>        “image”: {<br>          “url”: “<a href="https://resources.blogblog.com/img/b16-rounded.gif&quot;" target="_blank" rel="noopener">https://resources.blogblog.com/img/b16-rounded.gif&quot;</a><br>        }<br>      }<br>    }<br>  ]<br>}<br>Retrieving a specific page<br>You can retrieve a specific page from a blog by sending a GET request to the pages resource URI. The URI for a pages Resource has the following format:</p><p><a href="https://www.googleapis.com/blogger/v3/blogs/blogId/pages/pageId" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/blogId/pages/pageId</a><br>Request<br>GET <a href="https://www.googleapis.com/blogger/v3/blogs/4967929378133675647/pages/273541696466681878?key=YOUR-API-KEY" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/4967929378133675647/pages/273541696466681878?key=YOUR-API-KEY</a><br>“A user does not need to be authenticated to retrieve a public blog. The application does not need to include Authorization HTTP header for a public blog request; however, you do need to provide the API key.</p><p>Blogger also has private blogs, which require authentication.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and the page data:</p><p>{<br>  “kind”: “blogger#page”,<br>  “id”: “273541696466681878”,<br>  “blog”: {<br>    “id”: “4967929378133675647”<br>  },<br>  “published”: “2011-07-14T16:16:00.000Z”,<br>  “updated”: “2011-07-14T16:16:23.602Z”,<br>  “url”: “<a href="http://brettmorgan-test-blawg.blogspot.com/p/static-content.html&quot;" target="_blank" rel="noopener">http://brettmorgan-test-blawg.blogspot.com/p/static-content.html&quot;</a>,<br>  “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/blogs/4967929378133675647/pages/273541696466681878&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/blogs/4967929378133675647/pages/273541696466681878&quot;</a>,<br>  “title”: “Static Content”,<br>  “content”: “elided for readability”,<br>  “author”: {<br>    “id”: “901569848744”,<br>    “displayName”: “brett”,<br>    “url”: “<a href="http://www.blogger.com/profile/16258312240222542576&quot;" target="_blank" rel="noopener">http://www.blogger.com/profile/16258312240222542576&quot;</a>,<br>    “image”: {<br>      “url”: “<a href="https://resources.blogblog.com/img/b16-rounded.gif&quot;" target="_blank" rel="noopener">https://resources.blogblog.com/img/b16-rounded.gif&quot;</a><br>    }<br>  }<br>}<br>Working with users<br>Retrieving a user<br>You can retrieve a user’s information by sending an HTTP GET request to the users resource URI:</p><p><a href="https://www.googleapis.com/blogger/v3/users/userId" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/users/userId</a><br>Request<br>GET <a href="https://www.googleapis.com/blogger/v3/users/self" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/users/self</a><br>Authorization: /<em> OAuth 2.0 token here </em>/<br>Note: The user must be authenticated to list their own information, so you must provide the Authorization HTTP header with the GET request.</p><p>Response<br>If the request succeeds, the server responds with an HTTP 200 OK status code and a link to a list of the user’s blogs:</p><p>{<br>  “kind”: “blogger#user”,<br>  “id”: “901569848744”,<br>  “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/users/901569848744&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/users/901569848744&quot;</a>,<br>  “blogs”: {<br>    “selfLink”: “<a href="https://www.googleapis.com/blogger/v3/users/901569848744/blogs&quot;" target="_blank" rel="noopener">https://www.googleapis.com/blogger/v3/users/901569848744/blogs&quot;</a><br>  }<br>}<br>Standard query parameters<br>The following query parameters can be used with all methods and all resources in the Blogger APIs.</p><p>Query parameters that apply to all Blogger APIs operations are shown in the table below.</p><p>Notes (on API keys and auth tokens):</p><p>The key parameter is required with every request, unless you provide an OAuth 2.0 token with the request.<br>You must send an authorization token with every request that requires an OAuth scope. OAuth 2.0 is the only supported authorization protocol.<br>You can provide an OAuth 2.0 token with any request in one of two ways:<br>Using the access_token query parameter like this: ?access_token=oauth2-token<br>Using the HTTP Authorization header like this: Authorization: Bearer oauth2-token<br>All parameters are optional except where noted.</p><p>Parameter    Meaning    Notes<br>access_token    OAuth 2.0 token for the current user.<br>One possible way to provide an OAuth 2.0 token.<br>callback    Callback function.<br>Name of the JavaScript callback function that handles the response.<br>Used in JavaScript JSON-P requests.<br>fields    Selector specifying a subset of fields to include in the response.<br>For more information, see the partial response section in the Performance Tips document.<br>Use for better performance.<br>key    API key. (REQUIRED<em>)    </em>Required unless you provide an OAuth 2.0 token.<br>Your API key identifies your project and provides you with API access, quota, and reports.<br>Obtain your project’s API key from the Google API Console.<br>prettyPrint<br>Returns response with indentations and line breaks.</p><p>Returns the response in a human-readable format if true.<br>Default value: true.<br>When this is false, it can reduce the response payload size, which might lead to better performance in some environments.<br>quotaUser    Alternative to userIp.<br>Lets you enforce per-user quotas from a server-side application even in cases when the user’s IP address is unknown. This can occur, for example, with applications that run cron jobs on App Engine on a user’s behalf.<br>You can choose any arbitrary string that uniquely identifies a user, but it is limited to 40 characters.<br>Overrides userIp if both are provided.<br>Learn more about Capping API usage.<br>userIp    IP address of the end user for whom the API call is being made.<br>Lets you enforce per-user quotas when calling the API from a server-side application.<br>Learn more about Capping API usage.<br>Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code samples are licensed under the Apache 2.0 License. For details, see our Site Policies. Java is a registered trademark of Oracle and/or its affiliates.</p><p>Blogger JSON API: Performance Tips<br>This document covers some techniques you can use to improve the performance of your application. In some cases, examples from other APIs or generic APIs are used to illustrate the ideas presented. However, the same concepts are applicable to the Blogger APIs.</p><p>Using gzip<br>An easy and convenient way to reduce the bandwidth needed for each request is to enable gzip compression. Although this requires additional CPU time to uncompress the results, the trade-off with network costs usually makes it very worthwhile.</p><p>In order to receive a gzip-encoded response you must do two things: Set an Accept-Encoding header, and modify your user agent to contain the string gzip. Here is an example of properly formed HTTP headers for enabling gzip compression:</p><p>Accept-Encoding: gzip<br>User-Agent: my program (gzip)<br>Working with partial resources<br>Another way to improve the performance of your API calls is by sending and receiving only the portion of the data that you’re interested in. This lets your application avoid transferring, parsing, and storing unneeded fields, so it can use resources including network, CPU, and memory more efficiently.</p><p>There are two types of partial requests:</p><p>Partial response: A request where you specify which fields to include in the response (use the fields request parameter).<br>Patch: An update request where you send only the fields you want to change (use the PATCH HTTP verb).<br>More details on making partial requests are provided in the following sections.</p><p>Partial response<br>By default, the server sends back the full representation of a resource after processing requests. For better performance, you can ask the server to send only the fields you really need and get a partial response instead.</p><p>To request a partial response, use the fields request parameter to specify the fields you want returned. You can use this parameter with any request that returns response data.</p><p>Note that the fields parameter only affects the response data; it does not affect the data that you need to send, if any. To reduce the amount of data you send when modifying resources, use a patch request.</p><p>Example<br>The following example shows the use of the fields parameter with a generic (fictional) “Demo” API.</p><p>Simple request: This HTTP GET request omits the fields parameter and returns the full resource.</p><p><a href="https://www.googleapis.com/demo/v1?key=YOUR-API-KEY" target="_blank" rel="noopener">https://www.googleapis.com/demo/v1?key=YOUR-API-KEY</a><br>Full resource response: The full resource data includes the following fields, along with many others that have been omitted for brevity.</p><p>{<br>  “kind”: “demo”,<br>  …<br>  “items”: [<br>  {<br>    “title”: “First title”,<br>    “comment”: “First comment.”,<br>    “characteristics”: {<br>      “length”: “short”,<br>      “accuracy”: “high”,<br>      “followers”: [“Jo”, “Will”],<br>    },<br>    “status”: “active”,<br>    …<br>  },<br>  {<br>    “title”: “Second title”,<br>    “comment”: “Second comment.”,<br>    “characteristics”: {<br>      “length”: “long”,<br>      “accuracy”: “medium”<br>      “followers”: [ ],<br>    },<br>    “status”: “pending”,<br>    …<br>  },<br>  …<br>  ]<br>}<br>Request for a partial response: The following request for this same resource uses the fields parameter to significantly reduce the amount of data returned.</p><p><a href="https://www.googleapis.com/demo/v1?key=YOUR-API-KEY&amp;fields=kind,items(title,characteristics/length)" target="_blank" rel="noopener">https://www.googleapis.com/demo/v1?key=YOUR-API-KEY&amp;fields=kind,items(title,characteristics/length)</a><br>Partial response: In response to the request above, the server sends back a response that contains only the kind information along with a pared-down items array that includes only HTML title and length characteristic information in each item.</p><p>200 OK</p><p>{<br>  “kind”: “demo”,<br>  “items”: [<br>  {<br>    “title”: “First title”,<br>    “characteristics”: {<br>      “length”: “short”<br>    }<br>  },<br>  {<br>    “title”: “Second title”,<br>    “characteristics”: {<br>      “length”: “long”<br>    }<br>  },<br>  …<br>  ]<br>Note that the response is a JSON object that includes only the selected fields and their enclosing parent objects.</p><p>Details on how to format the fields parameter is covered next, followed by more details about what exactly gets returned in the response.</p><p>Fields parameter syntax summary<br>The format of the fields request parameter value is loosely based on XPath syntax. The supported syntax is summarized below, and additional examples are provided in the following section.</p><p>Use a comma-separated list to select multiple fields.<br>Use a/b to select a field b that is nested within field a; use a/b/c to select a field c nested within b.<br>Exception: For API responses that use “data” wrappers, where the response is nested within a data object that looks like data: { … }, do not include “data” in the fields specification. Including the data object with a fields specification like data/a/b causes an error. Instead, just use a fields specification like a/b.</p><p>Use a sub-selector to request a set of specific sub-fields of arrays or objects by placing expressions in parentheses “( )”.<br>For example: fields=items(id,author/email) returns only the item ID and author’s email for each element in the items array. You can also specify a single sub-field, where fields=items(id) is equivalent to fields=items/id.</p><p>Use wildcards in field selections, if needed.<br>For example: fields=items/pagemap/* selects all objects in a pagemap.</p><p>More examples of using the fields parameter<br>The examples below include descriptions of how the fields parameter value affects the response.</p><p>Note: As with all query parameter values, the fields parameter value must be URL encoded. For better readability, the examples in this document omit the encoding.</p><p>Identify the fields you want returned, or make field selections.<br>The fields request parameter value is a comma-separated list of fields, and each field is specified relative to the root of the response. Thus, if you are performing a list operation, the response is a collection, and it generally includes an array of resources. If you are performing an operation that returns a single resource, fields are specified relative to that resource. If the field you select is (or is part of) an array, the server returns the selected portion of all elements in the array.</p><p>Here are some collection-level examples:<br>Examples    Effect<br>items    Returns all elements in the items array, including all fields in each element, but no other fields.<br>etag,items    Returns both the etag field and all elements in the items array.<br>items/title    Returns only the title field for all elements in the items array.</p><p>Whenever a nested field is returned, the response includes the enclosing parent objects. The parent fields do not include any other child fields unless they are also selected explicitly.<br>context/facets/label    Returns only the label field for all members of the facets array, which is itself nested under the context object.<br>items/pagemap/*/title    For each element in the items array, returns only the title field (if present) of all objects that are children of pagemap.</p><p>Here are some resource-level examples:<br>Examples    Effect<br>title    Returns the title field of the requested resource.<br>author/uri    Returns the uri sub-field of the author object in the requested resource.<br>links/*/href<br>Returns the href field of all objects that are children of links.<br>Request only parts of specific fields using sub-selections.<br>By default, if your request specifies particular fields, the server returns the objects or array elements in their entirety. You can specify a response that includes only certain sub-fields. You do this using “( )” sub-selection syntax, as in the example below.<br>Example    Effect<br>items(title,author/uri)    Returns only the values of the title and author’s uri for each element in the items array.<br>Handling partial responses<br>After a server processes a valid request that includes the fields query parameter, it sends back an HTTP 200 OK status code, along with the requested data. If the fields query parameter has an error or is otherwise invalid, the server returns an HTTP 400 Bad Request status code, along with an error message telling the user what was wrong with their fields selection (for example, “Invalid field selection a/b”).</p><p>Here is the partial response example shown in the introductory section above. The request uses the fields parameter to specify which fields to return.</p><p><a href="https://www.googleapis.com/demo/v1?key=YOUR-API-KEY&amp;fields=kind,items(title,characteristics/length)" target="_blank" rel="noopener">https://www.googleapis.com/demo/v1?key=YOUR-API-KEY&amp;fields=kind,items(title,characteristics/length)</a><br>The partial response looks like this:</p><p>200 OK</p><p>{<br>  “kind”: “demo”,<br>  “items”: [<br>  {<br>    “title”: “First title”,<br>    “characteristics”: {<br>      “length”: “short”<br>    }<br>  },<br>  {<br>    “title”: “Second title”,<br>    “characteristics”: {<br>      “length”: “long”<br>    }<br>  },<br>  …<br>  ]<br>Note: For APIs that support query parameters for data pagination (maxResults and nextPageToken, for example), use those parameters to reduce the results of each query to a manageable size. Otherwise, the performance gains possible with partial response might not be realized.</p><p>Patch (partial update)<br>You can also avoid sending unnecessary data when modifying resources. To send updated data only for the specific fields that you’re changing, use the HTTP PATCH verb. The patch semantics described in this document are different (and simpler) than they were for the older, GData implementation of partial update.</p><p>The short example below shows how using patch minimizes the data you need to send to make a small update.</p><p>Example<br>This example shows a simple patch request to update only the title of a generic (fictional) “Demo” API resource. The resource also has a comment, a set of characteristics, status, and many other fields, but this request only sends the title field, since that’s the only field being modified:</p><p>PATCH <a href="https://www.googleapis.com/demo/v1/324" target="_blank" rel="noopener">https://www.googleapis.com/demo/v1/324</a><br>Authorization: Bearer your_auth_token<br>Content-Type: application/json</p><p>{<br>  “title”: “New title”<br>}<br>Response:</p><p>200 OK</p><p>{<br>  “title”: “New title”,<br>  “comment”: “First comment.”,<br>  “characteristics”: {<br>    “length”: “short”,<br>    “accuracy”: “high”,<br>    “followers”: [“Jo”, “Will”],<br>  },<br>  “status”: “active”,<br>  …<br>}<br>The server returns a 200 OK status code, along with the full representation of the updated resource. Since only the title field was included in the patch request, that’s the only value that is different from before.</p><p>Note: If you use the partial response fields parameter in combination with patch, you can increase the efficiency of your update requests even further. A patch request only reduces the size of the request. A partial response reduces the size of the response. So to reduce the amount of data sent in both directions, use a patch request with the fields parameter.</p><p>Semantics of a patch request<br>The body of the patch request includes only the resource fields you want to modify. When you specify a field, you must include any enclosing parent objects, just as the enclosing parents are returned with a partial response. The modified data you send is merged into the data for the parent object, if there is one.</p><p>Add: To add a field that doesn’t already exist, specify the new field and its value.<br>Modify: To change the value of an existing field, specify the field and set it to the new value.<br>Delete: To delete a field, specify the field and set it to null. For example, “comment”: null. You can also delete an entire object (if it is mutable) by setting it to null. If you are using the Java API Client Library, use Data.NULL_STRING instead; for details, see JSON null.<br>Note about arrays: Patch requests that contain arrays replace the existing array with the one you provide. You cannot modify, add, or delete items in an array in a piecemeal fashion.</p><p>Using patch in a read-modify-write cycle<br>It can be a useful practice to start by retrieving a partial response with the data you want to modify. This is especially important for resources that use ETags, since you must provide the current ETag value in the If-Match HTTP header in order to update the resource successfully. After you get the data, you can then modify the values you want to change and send the modified partial representation back with a patch request. Here is an example that assumes the Demo resource uses ETags:</p><p>GET <a href="https://www.googleapis.com/demo/v1/324?fields=etag,title,comment,characteristics" target="_blank" rel="noopener">https://www.googleapis.com/demo/v1/324?fields=etag,title,comment,characteristics</a><br>Authorization: Bearer your_auth_token<br>This is the partial response:</p><p>200 OK</p><p>{<br>  “etag”: “ETagString”<br>  “title”: “New title”<br>  “comment”: “First comment.”,<br>  “characteristics”: {<br>    “length”: “short”,<br>    “level”: “5”,<br>    “followers”: [“Jo”, “Will”],<br>  }<br>}<br>The following patch request is based on that response. As shown below, it also uses the fields parameter to limit the data returned in the patch response:</p><p>PATCH <a href="https://www.googleapis.com/demo/v1/324?fields=etag,title,comment,characteristics" target="_blank" rel="noopener">https://www.googleapis.com/demo/v1/324?fields=etag,title,comment,characteristics</a><br>Authorization: Bearer your_auth_token<br>Content-Type: application/json<br>If-Match: “ETagString”</p><p>{<br>  “etag”: “ETagString”<br>  “title”: “”,                  /<em> Clear the value of the title by setting it to the empty string. </em>/<br>  “comment”: null,              /<em> Delete the comment by replacing its value with null. </em>/<br>  “characteristics”: {<br>    “length”: “short”,<br>    “level”: “10”,              /<em> Modify the level value. </em>/<br>    “followers”: [“Jo”, “Liz”], /<em> Replace the followers array to delete Will and add Liz. </em>/<br>    “accuracy”: “high”          /<em> Add a new characteristic. </em>/<br>  },<br>}<br>The server responds with a 200 OK HTTP status code, and the partial representation of the updated resource:</p><p>200 OK</p><p>{<br>  “etag”: “newETagString”<br>  “title”: “”,                 /<em> Title is cleared; deleted comment field is missing. </em>/<br>  “characteristics”: {<br>    “length”: “short”,<br>    “level”: “10”,             /<em> Value is updated.</em>/<br>    “followers”: [“Jo” “Liz”], /<em> New follower Liz is present; deleted Will is missing. </em>/<br>    “accuracy”: “high”         /<em> New characteristic is present. </em>/<br>  }<br>}<br>Constructing a patch request directly<br>For some patch requests, you need to base them on the data you previously retrieved. For example, if you want to add an item to an array and don’t want to lose any of the existing array elements, you must get the existing data first. Similarly, if an API uses ETags, you need to send the previous ETag value with your request in order to update the resource successfully.</p><p>Note: You can use an “If-Match: *” HTTP header to force a patch to go through when ETags are in use.  If you do this, you don’t need to do the read before the write.</p><p>For other situations, however, you can construct the patch request directly, without first retrieving the existing data. For example, you can easily set up a patch request that updates a field to a new value or adds a new field. Here is an example:</p><p>PATCH <a href="https://www.googleapis.com/demo/v1/324?fields=comment,characteristics" target="_blank" rel="noopener">https://www.googleapis.com/demo/v1/324?fields=comment,characteristics</a><br>Authorization: Bearer your_auth_token<br>Content-Type: application/json</p><p>{<br>  “comment”: “A new comment”,<br>  “characteristics”: {<br>    “volume”: “loud”,<br>    “accuracy”: null<br>  }<br>}<br>With this request, if the comment field has an existing value, the new value overwrites it; otherwise it is set to the new value. Similarly, if there was a volume characteristic, its value is overwritten; if not, it is created. The accuracy field, if set, is removed.</p><p>Handling the response to a patch<br>After processing a valid patch request, the API returns a 200 OK HTTP response code along with the complete representation of the modified resource. If ETags are used by the API, the server updates ETag values when it successfully processes a patch request, just as it does with PUT.</p><p>The patch request returns the entire resource representation unless you use the fields parameter to reduce the amount of data it returns.</p><p>If a patch request results in a new resource state that is syntactically or semantically invalid, the server returns a 400 Bad Request or 422 Unprocessable Entity HTTP status code, and the resource state remains unchanged. For example, if you attempt to delete the value for a required field, the server returns an error.</p><p>Alternate notation when PATCH HTTP verb is not supported<br>If your firewall does not allow HTTP PATCH requests, then do an HTTP POST request and set the override header to PATCH, as shown below:</p><p>POST <a href="https://www.googleapis.com/.." target="_blank" rel="noopener">https://www.googleapis.com/..</a>.<br>X-HTTP-Method-Override: PATCH<br>…<br>Difference between patch and update<br>In practice, when you send data for an update request that uses the HTTP PUT verb, you only need to send those fields which are either required or optional; if you send values for fields that are set by the server, they are ignored. Although this might seem like another way to do a partial update, this approach has some limitations. With updates that use the HTTP PUT verb, the request fails if you don’t supply required parameters, and it clears previously set data if you don’t supply optional parameters.</p><p>It’s much safer to use patch for this reason. You only supply data for the fields you want to change; fields that you omit are not cleared. The only exception to this rule occurs with repeating elements or arrays: If you omit all of them, they stay just as they are; if you provide any of them, the whole set is replaced with the set that you provide.</p><p>Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code samples are licensed under the Apache 2.0 License. For details, see our Site Policies. Java is a registered trademark of Oracle and/or its affiliates.</p>]]></content>
    
    <summary type="html">
    
      分享下 Blogger Api 希望大家喜欢
    
    </summary>
    
      <category term="随笔" scheme="http://localhost/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="api" scheme="http://localhost/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 上手指南</title>
    <link href="http://localhost/2018/04/08/soft/hexo/"/>
    <id>http://localhost/2018/04/08/soft/hexo/</id>
    <published>2018-04-08T06:08:33.134Z</published>
    <updated>2018-04-08T06:55:44.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><ul><li><p>超快速度</p><blockquote><p>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p></blockquote></li><li><p>支持 Markdown</p><blockquote><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p></blockquote></li><li><p>一键部署</p><blockquote><p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p></blockquote></li><li><p>丰富的插件</p><blockquote><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p></blockquote><h1 id="安装-amp-运行"><a href="#安装-amp-运行" class="headerlink" title="安装&amp;运行"></a>安装&amp;运行</h1></li></ul><h2 id="安装-amp-运行-1"><a href="#安装-amp-运行-1" class="headerlink" title="安装&amp;运行"></a>安装&amp;运行</h2><p>依次运行以下代码，其中 <code>&lt;folder&gt;</code> 为项目文件夹名称<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g         # 安装命令行</span><br><span class="line">hexo init &lt;folder&gt;              # 初始化目录结构</span><br><span class="line">cd &lt;folder&gt;                     # 进入项目</span><br><span class="line">npm i                           # 安装依赖</span><br><span class="line">hexo server                     # 启动服务</span><br></pre></td></tr></table></figure></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>网站的 配置 信息，您可以在此配置大部分的参数。</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h2><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</td></tr><tr><td>url</td><td>网址    </td></tr><tr><td>root</td><td>网站根目录    </td></tr><tr><td>permalink</td><td>文章的 永久链接 格式</td><td>:year/:month/:day/:title/</td></tr><tr><td>permalink_defaults</td><td>永久链接中各部分的默认值    </td></tr><tr><td>source_dir</td><td>资源文件夹，这个文件夹用来存放内容。</td><td>source</td></tr><tr><td>public_dir</td><td>公共文件夹，这个文件夹用于存放生成的站点文件。</td><td>public</td></tr><tr><td>tag_dir</td><td>标签文件夹</td><td>tags</td></tr><tr><td>archive_dir</td><td>归档文件夹</td><td>archives</td></tr><tr><td>category_dir</td><td>分类文件夹</td><td>categories</td></tr><tr><td>code_dir</td><td>Include code 文件夹</td><td>downloads/code</td></tr><tr><td>i18n_dir</td><td>国际化（i18n）文件夹</td><td>:lang</td></tr><tr><td>skip_render</td><td>跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。    </td></tr><tr><td>new_post_name</td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td>default_layout</td><td>预设布局</td><td>post</td></tr><tr><td>auto_spacing</td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td>titlecase</td><td>把标题转换为 title case</td><td>false</td></tr><tr><td>external_link</td><td>在新标签中打开链接</td><td>true</td></tr><tr><td>filename_case</td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td>render_drafts</td><td>显示草稿</td><td>false</td></tr><tr><td>post_asset_folder</td><td>启动 Asset 文件夹</td><td>false</td></tr><tr><td>relative_link</td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td>future</td><td>显示未来的文章</td><td>true</td></tr><tr><td>highlight</td><td>代码块的设置    </td></tr><tr><td>default_category</td><td>默认分类</td><td>uncategorized</td></tr><tr><td>category_map</td><td>分类别名</td><td></td></tr><tr><td>tag_map</td><td>标签别名</td><td></td></tr><tr><td>date_format</td><td>日期格式</td><td>YYYY-MM-DD</td></tr><tr><td>time_format</td><td>时间格式</td><td>H:mm:ss</td></tr><tr><td>per_page</td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td>10</td></tr><tr><td>pagination_dir</td><td>分页目录</td><td>page</td></tr><tr><td>theme</td><td>当前主题名称。值为false时禁用主题</td></tr><tr><td>deploy</td><td>部署部分的设置</td></tr></tbody></table><ul><li>Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a> 。</li><li>如果您的网站存放在子目录中，例如 <a href="http://yoursite.com/blog，则请将您的" target="_blank" rel="noopener">http://yoursite.com/blog，则请将您的</a> url 设为 <a href="http://yoursite.com/blog" target="_blank" rel="noopener">http://yoursite.com/blog</a> 并把 root 设为 /blog/。</li><li>Hexo 使用 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 来解析和显示时间。</li></ul><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      想用Hexo写文章吗？想用Hexo发布Blog吗？别急，小米带你一步步来。
    
    </summary>
    
      <category term="软件" scheme="http://localhost/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="soft" scheme="http://localhost/tags/soft/"/>
    
      <category term="Hexo" scheme="http://localhost/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown画图指南 -- 小米规整</title>
    <link href="http://localhost/2018/04/05/%E6%94%B6%E9%9B%86/Hexo%20Lean/"/>
    <id>http://localhost/2018/04/05/收集/Hexo Lean/</id>
    <published>2018-04-05T05:24:20.464Z</published>
    <updated>2018-04-08T03:51:45.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><h2 id="Hello-Word"><a href="#Hello-Word" class="headerlink" title="Hello Word"></a>Hello Word</h2><p>代码：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">``sequence</span><br><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br><span class="line">``</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><pre class="mermaid">sequenceDiagram    participant Alice    participant Bob    Alice->>John: Hello John, how are you?    loop Healthcheck        John->>John: Fight against hypochondria    end    Note right of John: Rational thoughts <br>prevail...    John-->>Alice: Great!    John->>Bob: How about you?    Bob-->>John: Jolly good!</pre><h2 id="d"><a href="#d" class="headerlink" title="d"></a>d</h2><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><h2 id="Hello-Word-1"><a href="#Hello-Word-1" class="headerlink" title="Hello Word"></a>Hello Word</h2><p>代码：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">``mermaid</span><br><span class="line">graph TD;</span><br><span class="line"><span class="code">    A--&gt;B;</span></span><br><span class="line"><span class="code">    A--&gt;C;</span></span><br><span class="line"><span class="code">    B--&gt;D;</span></span><br><span class="line"><span class="code">    C--&gt;D;</span></span><br><span class="line">``</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><pre class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</pre>## 基本格式<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">``mermaid</span><br><span class="line">graph TD</span><br><span class="line"><span class="code">    Start --&gt; Stop</span></span><br><span class="line">``</span><br></pre></td></tr></table></figure><pre class="mermaid">graph TD    Start --> Stop</pre><ul><li>Hexo图例语言–mermaid–在有道云中不需要声明该项</li><li>图例配置<ul><li>图例类型 graph</li><li>流程图绘画方向 TD</li></ul></li><li>流程图语句</li></ul><h2 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h2><p>流程图绘画方向</p><ul><li>TB - 从上而下</li><li>BT - 从下而上</li><li>RL - 从右到左</li><li>LR - 从左到右</li><li>TD - 从上到下</li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">``mermaid</span><br><span class="line">graph LR</span><br><span class="line"><span class="code">    Start --&gt; Stop</span></span><br><span class="line">``</span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR    Start --> Stop</pre><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><h3 id="默认节点"><a href="#默认节点" class="headerlink" title="默认节点"></a>默认节点</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">``</span><br><span class="line">graph LR</span><br><span class="line"><span class="code">    id</span></span><br><span class="line">``</span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR    id</pre>节点的标识符和内容一致### 文本节点<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">``</span><br><span class="line">graph LR</span><br><span class="line"><span class="code">    id1[This is the text in the box]</span></span><br><span class="line">``</span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR    id1[This is the text in the box]</pre>`[]`,`()`,`(())`,`>]`,`{}`可以声明节点的文本，使得文本和标识符不一致。其中- `[]` : 方形- `()` : 圆方- `(())` : 圆形- `>]` : 标签形- `{}` : 菱形<pre class="mermaid">graph LR    id1[This is the text in the box]    id2(This is the text in the box)    id3((This is the text in the box))    id4>This is the text in the box]    id5{This is the text in the box}</pre><h3 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h3><p>使用标识符进行连线，例如 A 连到 B <code>a --&gt; b</code><br>其中</p><ul><li><code>---</code> 实线无箭头</li><li><code>--&gt;</code> 实线带箭头</li><li><code>-.-</code> 虚线无箭头</li><li><code>-.&gt;</code> 虚线带箭头</li><li><code>===</code> 粗线无箭头</li><li><code>==&gt;</code> 粗线带箭头</li></ul><p>可以在线上加文字，例如 A 连到 B 文字为 你好 <code>a -- 你好 --&gt; b</code><br>以Text为例</p><ul><li><code>-- Text ---</code> 实线无箭头</li><li><code>-- Text --&gt;</code> 实线带箭头</li><li><code>-. Text -.-</code> 虚线无箭头</li><li><code>-. Text -.&gt;</code> 虚线带箭头</li><li><code>== Text ===</code> 粗线无箭头</li><li><code>== Text ==&gt;</code> 粗线带箭头</li></ul><blockquote><p>未完待续</p></blockquote><h1 id="GitGraph"><a href="#GitGraph" class="headerlink" title="GitGraph"></a>GitGraph</h1><p>代码：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">``mermaid</span><br><span class="line">gitGraph:</span><br><span class="line">options</span><br><span class="line">&#123;</span><br><span class="line"><span class="code">    "nodeSpacing": 150,</span></span><br><span class="line"><span class="code">    "nodeRadius": 10</span></span><br><span class="line">&#125;</span><br><span class="line">end</span><br><span class="line">commit</span><br><span class="line">branch newbranch</span><br><span class="line">checkout newbranch</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">checkout master</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">merge newbranch</span><br><span class="line">``</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><pre class="mermaid">gitGraph:options{    "nodeSpacing": 150,    "nodeRadius": 10}endcommitbranch newbranchcheckout newbranchcommitcommitcheckout mastercommitcommitmerge newbranch</pre># 甘特图代码：<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">``mermaid</span><br><span class="line">gantt</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">title Adding GANTT diagram to mermaid</span><br><span class="line"></span><br><span class="line">section A section</span><br><span class="line">Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">Future task               :         des3, after des2, 5d</span><br><span class="line">Future task2               :         des4, after des3, 5d</span><br><span class="line">``</span><br></pre></td></tr></table></figure>效果如下：<pre class="mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</pre>]]></content>
    
    <summary type="html">
    
      Markdown的一些高级使用
    
    </summary>
    
      <category term="随笔" scheme="http://localhost/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://localhost/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="hexo" scheme="http://localhost/tags/hexo/"/>
    
      <category term="md" scheme="http://localhost/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 插件推荐 -- 小米推荐</title>
    <link href="http://localhost/2018/04/05/%E6%94%B6%E9%9B%86/Chrome%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90--%E5%B0%8F%E7%B1%B3%E6%8E%A8%E8%8D%90/"/>
    <id>http://localhost/2018/04/05/收集/Chrome插件推荐--小米推荐/</id>
    <published>2018-04-05T04:01:41.910Z</published>
    <updated>2018-04-08T03:28:51.625Z</updated>
    
    <content type="html"><![CDATA[<p>闲话不多说，直接上推荐的插件，可以翻墙的直接点击标题跳转谷歌商店下载，不信的我下面也给出离线安装文件</p><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405120713.png" alt="我的插件"></p><h1 id="通用类插件"><a href="#通用类插件" class="headerlink" title="通用类插件"></a>通用类插件</h1><ol><li><p>历史记录管理 – Better History</p><p> 官方介绍：更好地查看您的历史记录。为查看您的历史记录带来最好的搜索体验，最清晰的界面和最有帮助的筛选。</p><p> 小米点评：个人觉得Chrome自带的历史管理工具很难用，界面虽然好看但是很不好管理，所以推荐这个大家使用。</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405121159.png" alt=""></p><ul><li><a href="https://chrome.google.com/webstore/detail/better-history/obciceimmggglbmelaidpjlmodcebijb" target="_blank" rel="noopener">官方地址</a></li></ul></li><li><p>下载管理器 – Chrono下载管理器</p><p> 官方介绍：做Chrome浏览器中最好的下载管理器</p><p> 小米点评：我用了很久的一个插件，可以分类显示下载的内容，还可以嗅探出当前页面的资源，并可以批量下载网页的内容（图片和视频）</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405121856.png" alt="弹出框"></p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405121957.png" alt="全屏页面"></p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405122043.png" alt="当前页面的资源"></p><ul><li><a href="https://chrome.google.com/webstore/detail/mciiogijehkdemklbdcbfkefimifhecn" target="_blank" rel="noopener">官方地址</a></li></ul></li><li><p>新标签页 – oscnews</p><p> 官方介绍：查看开源中国软件更新资讯，内置文档导航，GitHub 趋势榜，linux命令索引，浏览历史记录和时钟页面。</p><p> 小米点评：我目前在用的新标签页插件。可能不适用大家，不关注开发的可以尝试另一个Infinity。</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405124044.png" alt=""></p><ul><li><a href="https://chrome.google.com/webstore/detail/mciiogijehkdemklbdcbfkefimifhecn" target="_blank" rel="noopener">官方地址</a></li></ul></li><li><p>新标签页 – Infinity</p><p> 官方介绍：Infinity新标签页，基于Chrome的云应用服务，让你更优雅、轻松地使用Chrome。</p><p> 小米点评：功能很丰富，具有导航，天前，TODO，壁纸，界面还不错。</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405123724.png" alt=""></p><ul><li><a href="https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg" target="_blank" rel="noopener">官方地址</a></li><li></li></ul></li><li><p>目录 – Smart TOC</p><p> 官方介绍：Add a table of contents for web article or documentation</p><p> 小米点评：不是所有的网站都有一个悬浮的目录，这个插件可以生成一个悬浮的目录在页面上，比如Spring的官方文档的目录，长篇大幅的文章，目前在最顶上，阅读很不方便，这个插件的作用就尤为突出。</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405124622.png" alt=""></p><ul><li><a href="https://chrome.google.com/webstore/detail/lifgeihcfpkmmlfjbailfpfhbahhibba" target="_blank" rel="noopener">官方地址</a></li></ul></li><li><p>油猴子 – Tampermonkey</p><p> 官方介绍：The world’s most popular userscript manager</p><p> 小米点评：插件中的神器，可以安装各种脚本，比如百度云Ex等，谁用谁知道。</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405124828.png" alt=""></p><ul><li><a href="https://chrome.google.com/webstore/detail/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">官方地址</a></li></ul></li><li><p>广告过滤 – uBlock Origin</p><p> 官方介绍：一款高效的网络请求过滤工具，占用极低的内存和 CPU。</p><p> 小米点评：广告过滤妥妥的。</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405124944.png" alt=""></p><ul><li><a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm" target="_blank" rel="noopener">官方地址</a></li></ul></li><li><p>阅读 – 简悦 - SimpRead</p><p> 官方介绍：让你瞬间进入沉浸式阅读的 Chrome 扩展，类似 Safari 的阅读模式。</p><p> 小米点评：给你高效的阅读体验。</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405125638.png" alt="开启前"></p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405125617.png" alt="开启后"></p><ul><li><a href="https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll" target="_blank" rel="noopener">官方地址</a></li></ul></li></ol><h1 id="开发类插件"><a href="#开发类插件" class="headerlink" title="开发类插件"></a>开发类插件</h1><ol><li><p>CSS调试器 – Code Cola</p><p> 官方介绍：Code Cola 是一个可视化编辑在线页面 css 样式的 chrome 插件。</p><p> 小米点评：很直观调试样式，先选择页面元素后，可以在弹出框中修改样式 ，之后便可以导出 CSS 。</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405122647.png" alt="样式修改死的截图"></p><ul><li><a href="https://chrome.google.com/webstore/detail/code-cola/lomkpheldlbkkfiifcbfifipaofnmnkn" target="_blank" rel="noopener">官方地址</a></li></ul></li><li><p>JSON查看器 – JSON-handle</p><p>官方介绍：It’s a browser and editor for JSON document.You can get a beautiful view</p><p>小米点评：打开页面后可以很方便的查看JSON的层次结构和数据类型和值。在值为Base64图片和图片Url的时候悬停可以直接预览图片。</p><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405123112.png" alt=""></p><ul><li><a href="https://chrome.google.com/webstore/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj" target="_blank" rel="noopener">官方地址</a></li></ul></li><li><p>DIV查看 – Outliner</p><p> 官方介绍：This extension outlines all the DOM elements on a page</p><p> 小米点评：给每一个Div加上边框，可以很方便的查看Div的位置</p><p> <img src="http://ot0en8caw.bkt.clouddn.com/20180405124247.png" alt=""></p><ul><li><a href="https://chrome.google.com/webstore/detail/outliner/hmdacajmldpieoadpgloddgkeamdhoka" target="_blank" rel="noopener">官方地址</a></li></ul></li></ol><h1 id="网站加强"><a href="#网站加强" class="headerlink" title="网站加强"></a>网站加强</h1><ol><li><p>GitHub – Insight.io for Github</p><p> 官方介绍：IDE like code intelligence and code search for GitHub by Insight.io.</p><p> 小米点评：可以在GitHub的左侧查看当前项目的目录结构，也可以单文件下载，还可以全局搜索。GitHub党必备。</p><ul><li><a href="https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh" target="_blank" rel="noopener">官方地址</a></li></ul></li><li><p>百度云 – 云盘万能钥匙</p><p> 官方介绍：你的云盘智能助手</p><p> 小米点评：在你打开网盘分享的链接的时候，可以自动充填提取密码。基于和WiFi万能钥匙一样的原理，属于记录各个分享链接的密码在充填密码，在装有该插件的人中你若是第一个打开，还是得要自己来填写。</p><ul><li><a href="https://chrome.google.com/webstore/detail/anlllmnpjodopgbkbpnghnjlelnogfjc" target="_blank" rel="noopener">官方地址</a></li></ul></li><li><p>新浪微博 – 眼不见心不烦（新浪微博）</p><p> 官方介绍：新浪微博（weibo.com）非官方功能增强插件，可以无限制地屏蔽关键词、用户、来源，去除页面广告和推广微博，反刷屏，还您一个清爽干净的微博！</p><p> 小米点评：还你干净的微博浏览体验。</p><ul><li><a href="https://chrome.google.com/webstore/detail/aognaapdfnnldnjglanfbbklaakbpejm" target="_blank" rel="noopener">官方地址</a></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      分享下本米自用的 Chrome 插件希望大家喜欢
    
    </summary>
    
      <category term="随笔" scheme="http://localhost/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://localhost/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="soft" scheme="http://localhost/tags/soft/"/>
    
      <category term="chrome" scheme="http://localhost/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>图文并茂，深入浅出 Nginx</title>
    <link href="http://localhost/2018/04/05/%E6%94%B6%E9%9B%86/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82%EF%BC%8C%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANginx/"/>
    <id>http://localhost/2018/04/05/收集/图文并茂，深入浅出Nginx/</id>
    <published>2018-04-04T16:13:46.430Z</published>
    <updated>2018-04-04T16:42:30.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Nginx 是一款轻量级的 Web 服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。</p><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405001432.png" alt="架构图"></p><p>上图基本上说明了当下流行的技术架构，其中 Nginx 有点入口网关的味道。<br><a id="more"></a></p><h1 id="反向代理服务器？"><a href="#反向代理服务器？" class="headerlink" title="反向代理服务器？"></a>反向代理服务器？</h1><p>经常听人说到一些术语，如反向代理，那么什么是反向代理，什么又是正向代理呢？</p><p>正向代理：</p><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405001549.png" alt="正向代理"></p><p>反向代理：</p><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405001608.png" alt="反向代理"></p><p>由于防火墙的原因，我们并不能直接访问谷歌，那么我们可以借助 VPN 来实现，这就是一个简单的正向代理的例子。这里你能够发现，正向代理 “代理” 的是客户端，而且客户端是知道目标的，而目标是不知道客户端是通过 VPN 访问的。</p><p>当我们在外网访问百度的时候，其实会进行一个转发，代理到内网去，这就是所谓的反向代理，即反向代理 “代理” 的是服务器端，而且这一个过程对于客户端而言是透明的。</p><h1 id="Nginx-的-Master-Worker-模式"><a href="#Nginx-的-Master-Worker-模式" class="headerlink" title="Nginx 的 Master-Worker 模式"></a>Nginx 的 Master-Worker 模式</h1><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405001635.png" alt="nginx 进程"></p><p>启动 Nginx 后，其实就是在 80 端口启动了 Socket 服务进行监听，如图所示，Nginx 涉及 Master 进程和 Worker 进程。</p><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405001659.png" alt="Master-Worker 模式"></p><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405001721.png" alt="nginx.conf"></p><h2 id="Master-进程的作用是？"><a href="#Master-进程的作用是？" class="headerlink" title="Master 进程的作用是？"></a>Master 进程的作用是？</h2><p>读取并验证配置文件 nginx.conf；管理 worker 进程；</p><h2 id="Worker-进程的作用是？"><a href="#Worker-进程的作用是？" class="headerlink" title="Worker 进程的作用是？"></a>Worker 进程的作用是？</h2><p>每一个 Worker 进程都维护一个线程（避免线程切换），处理连接和请求；注意 Worker 进程的个数由配置文件决定，一般和 CPU 个数相关（有利于进程切换），配置几个就有几个 Worker 进程。</p><h1 id="思考：Nginx-如何做到热部署？"><a href="#思考：Nginx-如何做到热部署？" class="headerlink" title="思考：Nginx 如何做到热部署？"></a>思考：Nginx 如何做到热部署？</h1><p>所谓热部署，就是配置文件 nginx.conf 修改后，不需要 stop Nginx，不需要中断请求，就能让配置文件生效！（nginx -s reload 重新加载 / nginx -t 检查配置 / nginx -s stop）</p><p>通过上文我们已经知道 worker 进程负责处理具体的请求，那么如果想达到热部署的效果，可以想象：</p><p>方案一：</p><p>修改配置文件 nginx.conf 后，主进程 master 负责推送给 woker 进程更新配置信息，woker 进程收到信息后，更新进程内部的线程信息。（有点 valatile 的味道）</p><p>方案二：</p><p>修改配置文件 nginx.conf 后，重新生成新的 worker 进程，当然会以新的配置进行处理请求，而且新的请求必须都交给新的 worker 进程，至于老的 worker 进程，等把那些以前的请求处理完毕后，kill 掉即可。</p><p>Nginx 采用的就是方案二来达到热部署的！</p><h1 id="思考：Nginx-如何做到高并发下的高效处理？"><a href="#思考：Nginx-如何做到高并发下的高效处理？" class="headerlink" title="思考：Nginx 如何做到高并发下的高效处理？"></a>思考：Nginx 如何做到高并发下的高效处理？</h1><p>上文已经提及 Nginx 的 worker 进程个数与 CPU 绑定、worker 进程内部包含一个线程高效回环处理请求，这的确有助于效率，但这是不够的。</p><p>作为专业的程序员，我们可以开一下脑洞：BIO/NIO/AIO、异步 / 同步、阻塞 / 非阻塞…</p><p>要同时处理那么多的请求，要知道，有的请求需要发生 IO，可能需要很长时间，如果等着它，就会拖慢 worker 的处理速度。</p><p>Nginx 采用了 Linux 的 epoll 模型，epoll 模型基于事件驱动机制，它可以监控多个事件是否准备完毕，如果 OK，那么放入 epoll 队列中，这个过程是异步的。worker 只需要从 epoll 队列循环处理即可。</p><h1 id="思考：Nginx-挂了怎么办？"><a href="#思考：Nginx-挂了怎么办？" class="headerlink" title="思考：Nginx 挂了怎么办？"></a>思考：Nginx 挂了怎么办？</h1><p>Nginx 既然作为入口网关，很重要，如果出现单点问题，显然是不可接受的。</p><p>答案是：Keepalived+Nginx 实现高可用。</p><p>Keepalived 是一个高可用解决方案，主要是用来防止服务器单点发生故障，可以通过和 Nginx 配合来实现 Web 服务的高可用。</p><p>（其实，Keepalived 不仅仅可以和 Nginx 配合，还可以和很多其他服务配合）</p><h1 id="Keepalived-Nginx-实现高可用的思路："><a href="#Keepalived-Nginx-实现高可用的思路：" class="headerlink" title="Keepalived+Nginx 实现高可用的思路："></a>Keepalived+Nginx 实现高可用的思路：</h1><p>第一：请求不要直接打到 Nginx 上，应该先通过 Keepalived（这就是所谓虚拟 IP，VIP）</p><p>第二：Keepalived 应该能监控 Nginx 的生命状态（提供一个用户自定义的脚本，定期检查 Nginx 进程状态，进行权重变化,，从而实现 Nginx 故障切换）</p><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405002123.png" alt="Keepalived+Nginx"></p><h1 id="我们的主战场：nginx-conf"><a href="#我们的主战场：nginx-conf" class="headerlink" title="我们的主战场：nginx.conf"></a>我们的主战场：nginx.conf</h1><p>很多时候，在开发、测试环境下，我们都得自己去配置 Nginx，就是去配置 nginx.conf。</p><p>nginx.conf 是典型的分段配置文件，下面我们来分析下。</p><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405003223.png" alt="http 的 server 段"></p><p><img src="http://ot0en8caw.bkt.clouddn.com/20180405003235.png" alt="访问结果"></p><p>其实这是把 Nginx 作为 web server 来处理静态资源。</p><p>第一：location 可以进行正则匹配，应该注意正则的几种形式以及优先级。（这里不展开）</p><p>第二：Nginx 能够提高速度的其中一个特性就是：动静分离，就是把静态资源放到 Nginx 上，由 Nginx 管理，动态请求转发给后端。</p><p>第三：我们可以在 Nginx 下把静态资源、日志文件归属到不同域名下（也即是目录），这样方便管理维护。</p><p>第四：Nginx 可以进行 IP 访问控制，有些电商平台，就可以在 Nginx 这一层，做一下处理，内置一个黑名单模块，那么就不必等请求通过 Nginx 达到后端在进行拦截，而是直接在 Nginx 这一层就处理掉。</p><h1 id="反向代理【proxy-pass】"><a href="#反向代理【proxy-pass】" class="headerlink" title="反向代理【proxy_pass】"></a>反向代理【proxy_pass】</h1><p>所谓反向代理，很简单，其实就是在 location 这一段配置中的 root 替换成 proxy_pass 即可。root 说明是静态资源，可以由 Nginx 进行返回；而 proxy_pass 说明是动态请求，需要进行转发，比如代理到 Tomcat 上。</p><p>反向代理，上面已经说了，过程是透明的，比如说 request -&gt; Nginx -&gt; Tomcat，那么对于 Tomcat 而言，请求的 IP 地址就是 Nginx 的地址，而非真实的 request 地址，这一点需要注意。不过好在 Nginx 不仅仅可以反向代理请求，还可以由用户自定义设置 HTTP HEADER。</p><h1 id="负载均衡【upstream】"><a href="#负载均衡【upstream】" class="headerlink" title="负载均衡【upstream】"></a>负载均衡【upstream】</h1><p>上面的反向代理中，我们通过 proxy_pass 来指定 Tomcat 的地址，很显然我们只能指定一台 Tomcat 地址，那么我们如果想指定多台来达到负载均衡呢？</p><p>第一，通过 upstream 来定义一组 Tomcat，并指定负载策略（IPHASH、加权论调、最少连接），健康检查策略（Nginx 可以监控这一组 Tomcat 的状态）等。</p><p>第二，将 proxy_pass 替换成 upstream 指定的值即可。</p><h1 id="负载均衡可能带来的问题？"><a href="#负载均衡可能带来的问题？" class="headerlink" title="负载均衡可能带来的问题？"></a>负载均衡可能带来的问题？</h1><p>负载均衡所带来的明显的问题是，一个请求，可以到 A server，也可以到 B server，这完全不受我们的控制，当然这也不是什么问题，只是我们得注意的是：用户状态的保存问题，如 Session 会话信息，不能在保存到服务器上。</p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>缓存，是 Nginx 提供的，可以加快访问速度的机制，说白了，在配置上就是一个开启，同时指定目录，让缓存可以存储到磁盘上。具体配置，大家可以参考 Nginx 官方文档，这里就不在展开了。</p><p>好了，到这里，Nginx 的介绍就到这里了。欢迎转发。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Nginx 是一款轻量级的 Web 服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ot0en8caw.bkt.clouddn.com/20180405001432.png&quot; alt=&quot;架构图&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图基本上说明了当下流行的技术架构，其中 Nginx 有点入口网关的味道。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://localhost/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://localhost/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Nginx" scheme="http://localhost/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>史上最污技术解读，60 个 IT 术语我竟然秒懂了......</title>
    <link href="http://localhost/2018/04/04/%E6%94%B6%E9%9B%86/%E5%8F%B2%E4%B8%8A%E6%9C%80%E6%B1%A1%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB%EF%BC%8C60%20%E4%B8%AA%20IT%20%E6%9C%AF%E8%AF%AD%E6%88%91%E7%AB%9F%E7%84%B6%E7%A7%92%E6%87%82%E4%BA%86/"/>
    <id>http://localhost/2018/04/04/收集/史上最污技术解读，60 个 IT 术语我竟然秒懂了/</id>
    <published>2018-04-04T06:17:26.727Z</published>
    <updated>2018-04-04T06:25:04.693Z</updated>
    
    <content type="html"><![CDATA[<p>假设你是个妹子，你有一位男朋友，于此同时你和另外一位男生暧昧不清，比朋友好，又不是恋人。你随时可以甩了现任男友，另外一位马上就能补上。这是<strong>冷备份</strong>。</p><p>假设你是个妹子，同时和两位男性在交往，两位都是你男朋友。并且他们还互不干涉，独立运行。这就是<strong>双机热备份</strong>。</p><p>假设你是个妹子，不安于男朋友给你的安全感。在遥远的男友未知的地方，和一位男生保持着联系，你告诉他你没有男朋友，你现在处于纠结期，一旦你和你男朋友分开了，你马上可以把自己感情转移到异地男人那里去。这是<strong>异地容灾备份</strong>。</p><p>假设你是个妹子，有一位男朋友，你又付了钱给一家婚姻介绍所，让他帮你留意好的资源，一旦你和你这位男朋友分开，婚姻介绍所马上给你安排资源，你感情不间断运行，这是<strong>云备份</strong>。。。。</p><p>假设你是个妹子，你怀疑男朋友对你的忠诚，在某宝购买了一个测试忠诚度的服务。这是<strong>灾难演练</strong>。友情提醒，在没有备份的情况下，切忌进行灾难演练，说不好会让你数据血本无归。</p><p>假设你是个妹子，你和男友异地恋，你每天晚上都打电话查岗，问他还爱不爱你了，这叫<strong>ping</strong>。</p><p>假设你是个妹子，你的男友经常玩失踪，所以你希望时刻掌握他的行踪，你先打电话给他的好基友A，A说好基友B知道，B说好基友C知道，C说好基友D知道，D说你男朋友正在网吧打游戏，你终于知道了男友在哪儿，这叫<strong>TraceRoute</strong>。</p><p>假设你是个妹子，你的男友沉迷游戏经常不接电话无故宕机，所以当你们约好下午逛街以后你要时不时的打个电话询问，看看他是不是还能正常提供服务，这叫<strong>心跳监测</strong>。</p><p>假设你是个妹子，你想去逛街而你的男友A在打游戏不接电话，于是乎你把逛街的请求发给了替补男友B，从而保障服务不间断运行，这叫<strong>故障切换</strong>。</p><p>假设你是个妹子，你有很多需要男朋友完成的事情，于是乎你跟A逛街旅游吃饭不可描述，而B只能陪你逛街，不能拥有全部男朋友的权利，这叫<strong>主从配置 master-slave</strong>。</p><p>假设你是个妹子，你败家太厉害，以至于你的男友根本吃不消，于是呼你找了两个男朋友，一三五单号，二四六双号限行，从而减少一个男朋友所面临的压力，这叫<strong>负载均衡</strong>。</p><p>假设你是个妹子并且有多个男朋友，配合心跳检测与故障切换和负载均衡将会达到极致的体验，这叫<strong>集群LVS</strong>，注意，当需求单机可以处理的情况下不建议启用集群，会造成大量资源闲置，提高维护成本。</p><p>假设你是个妹子，你的需求越来越高导致一个男朋友集群已经处理不了了，于是乎你又新增了另外几个，这叫<strong>多集群横向扩容</strong>，简称<strong>multi-cluster grid</strong>。</p><p>假设你是个妹子，你的男朋友身体瘦弱从而无法满足需求，于是乎你买了很多大补产品帮你男朋友升级，从而提高单机容量，这叫<strong>纵向扩容</strong>，<strong>Scale up</strong>。切记，纵向扩容的成本会越来越高而效果越来越不明显。</p><p>假设你是个妹子，你跟男友经常出去游玩，情到深处想做点什么的时候却苦于没有tt，要去超市购买，于是乎你在你们经常去的地方都放置了tt，从而大幅度降低等待时间，这叫<strong>CDN</strong>。</p><p>假设你是个妹子,你的男朋友英俊潇洒风流倜傥财大气粗对你唯一,于是乎你遭到了女性B的敌视，B会以朋友名义在周末请求你男朋友修电脑,修冰箱,占用男朋友大量时间,造成男朋友无法为你服务,这叫<strong>拒绝服务攻击</strong>,简称<strong>DOS</strong>。</p><p>假设你是个妹子,你因男朋友被一位女性敌视,但是你男朋友的处理能力十分强大,处理速度已经高于她的请求速度,于是她雇佣了一票女性来轮流麻烦你的男朋友,这叫<strong>分布式拒绝服务攻击</strong>,简称<strong>DDOS</strong>。</p><p>假设你是个妹子，你发现男朋友总是在处理一些无关紧要的其它请求，于是乎你给男朋友了一个白名单,要求他只处理白名单内的请求，而拒绝其它身份不明的人的要求,这叫<strong>访问控制</strong>。</p><p>假设你是个妹子，你男朋友风流倜傥，你总担心他出轨，于是你在他身上安装了一个窃听器，里面内置了一些可疑女生勾搭行为的特征库，只要出现疑似被勾搭的情况，就会立刻向你报警，这叫<strong>入侵检测系统（IDS）</strong>。</p><p>假设你是个妹子，你改良了上面的窃听器，当可疑女性对你男朋友做出勾搭行为的时候，立刻释放1万伏电压，把可疑人击昏，终止这次勾搭。这叫<strong>入侵防御系统（IPS）</strong>。</p><p>假设你是个妹子，虽然你装了各种窃听器、报警器，可是你蓝朋友处处留情，报警器响个不停，让你应接不暇，疲于奔命，于是你搞了个装置集中收集这些出轨告警，进行综合分析，生成你男朋友的出轨报告。这叫<strong>SIEM</strong>或者<strong>SOC</strong>。</p><p>假设你是个妹子，你把男朋友的出轨报告提交给他父母，得到了他们的大力支持，男友父母开始对他严加管教、限期整改，为你们的爱情保驾护航，做到合情合理、合法合规，这叫<strong>等级保护</strong>。</p><p>假设你是个妹子，你离男朋友家有点远，你开车去，这叫自建专线，你打车过去，这叫租用专线，你骑摩拜单车过去，这叫<strong>SDWAN</strong>。</p><p>假设你是个妹子，你和男朋友的恋爱遭到了双方家长的反对，不准双方往来，你们偷偷挖了一条隧道，便于进行幽会，这叫<strong>VPN</strong>。</p><p>假设你是个妹子，你的男朋友太优秀而造人窥视，于是乎它们研究了一下你的男朋友，稍微修改了一点点生产出一个男朋友B，与你的男朋友百分制99相似，这不叫剽窃，这叫<strong>逆向工程</strong>,比如男朋友外挂。</p><p>假设你是个妹子，你要求你的男朋友坚持十分钟，然后十五分钟继而二十分钟，以测试你男朋友的极限在哪里，这叫<strong>压力测试</strong>。</p><p>假设你是个妹子，为了保证你男朋友的正常运行，于是乎你每天查看他的微信微博等社交资料来寻找可能产生问题的线索，这叫<strong>数据分析</strong>。</p><p>假设你是个妹子，你的男朋友属于社交活跃选手，每天的微博知乎微信生产了大量信息，你发现自己的分析速度远远低于他生的速度，于是乎你找来你的闺蜜一起分析，这叫<strong>并行计算</strong>。</p><p>假设你是个妹子，你的男朋友太能折腾处处留情产生了天量的待处理信息，你和你的闺蜜们已经累趴也没赶上他创造的速度，于是你付费在知乎上找了20个小伙伴帮你一起分析，这叫<strong>云计算</strong>。</p><p>假设你是个妹子，你在得到男朋友经常出没的地点后，根据酒店，敏感时间段等信息确定男朋友因该是出轨了，这叫<strong>数据挖掘</strong>。</p><p>假设你是个妹子，在分析男友的数据后，得知他下午又要出去开房，于是乎你在他准备出门前给他发了个短信，问他有没有带tt，没有的话可以在我这里买，这叫<strong>精准推送</strong>，需要配合数据挖掘。</p><p>假如你是个妹子，你的男朋友总该出去浪而各种出问题，于是乎你租了间屋子并准备好了所有需要的东西并告诉他，以后不用找酒店了，直接来我这屋子吧，什么都准备好了，这叫<strong>容器</strong>。</p><p>假如你是个妹子，你每天都要和男朋友打通一次接口，<strong>采集数据</strong>。你一天24小时不停地采，这叫<strong>实时数据采集</strong>。你决定开发新的接口来和男朋友交流，这叫<strong>虚拟化</strong>。你决定从不同的男友身上采集数据，你就是<strong>大数据中心</strong>。有一天你决定生一个宝宝，这叫<strong>大数据应用</strong>。宝宝生下来不知道是谁的，这叫<strong>大数据脱敏</strong>。但是从宝宝外观来看，黑色皮肤金色头发，这叫<strong>数据融合跨域建模</strong>。你决定把这个宝宝拿来展览收点门票，这叫<strong>大数据变现</strong>。</p><p>假如妹纸男友多多多，看都看不过来、用不到也记不住，索性把最典型、必不可少、有潜力的那些优质男友挑出来，这叫<strong>数据简化</strong>。至于如何挑，用到<strong>数据简化技术</strong>。</p>]]></content>
    
    <summary type="html">
    
      假设你是个妹子......
    
    </summary>
    
      <category term="随笔" scheme="http://localhost/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://localhost/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Swift 与 Kotlin 的简单对比</title>
    <link href="http://localhost/2018/04/03/Java/Swift%20%E4%B8%8E%20Kotlin%20%E7%9A%84%E7%AE%80%E5%8D%95%E5%AF%B9%E6%AF%94/"/>
    <id>http://localhost/2018/04/03/Java/Swift 与 Kotlin 的简单对比/</id>
    <published>2018-04-03T05:15:17.247Z</published>
    <updated>2018-04-03T05:21:05.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BASICS"><a href="#BASICS" class="headerlink" title="BASICS"></a>BASICS</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Hello, world!&quot;);</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(&quot;Hello, world!&quot;);</span><br></pre></td></tr></table></figure></p><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myVariable = 42;</span><br><span class="line">myVariable = 50;</span><br><span class="line">let myConstant = 42;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myVariable = 42;</span><br><span class="line">myVariable = 50;</span><br><span class="line">val myConstant = 42;</span><br></pre></td></tr></table></figure></p><h2 id="显式类型"><a href="#显式类型" class="headerlink" title="显式类型"></a>显式类型</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let explicitDouble: Double = 70</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val explicitDouble: Double = 70.0</span><br></pre></td></tr></table></figure></p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let label = &quot;The width is &quot;</span><br><span class="line">let width = 94</span><br><span class="line">let widthLabel = label + String(width)</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val label = &quot;The width is &quot;</span><br><span class="line">val width = 94</span><br><span class="line">val widthLabel = label + width</span><br></pre></td></tr></table></figure></p><h2 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let apples = 3</span><br><span class="line">let oranges = 5</span><br><span class="line">let fruitSummary = &quot;I have \(apples + oranges) &quot; +</span><br><span class="line">                   &quot;pieces of fruit.&quot;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val apples = 3</span><br><span class="line">val oranges = 5</span><br><span class="line">val fruitSummary = &quot;I have $&#123;apples + oranges&#125; &quot; +</span><br><span class="line">                   &quot;pieces of fruit.&quot;</span><br></pre></td></tr></table></figure></p><h2 id="范围操作符"><a href="#范围操作符" class="headerlink" title="范围操作符"></a>范围操作符</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let names = [&quot;Anna&quot;, &quot;Alex&quot;, &quot;Brian&quot;, &quot;Jack&quot;]</span><br><span class="line">let count = names.count</span><br><span class="line">for i in 0..&lt;count &#123;</span><br><span class="line">    print(&quot;Person \(i + 1) is called \(names[i])&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// Person 1 is called Anna</span><br><span class="line">// Person 2 is called Alex</span><br><span class="line">// Person 3 is called Brian</span><br><span class="line">// Person 4 is called Jack</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">val names = arrayOf(&quot;Anna&quot;, &quot;Alex&quot;, &quot;Brian&quot;, &quot;Jack&quot;)</span><br><span class="line">val count = names.count()</span><br><span class="line">for (i in 0..count - 1) &#123;</span><br><span class="line">    println(&quot;Person $&#123;i + 1&#125; is called $&#123;names[i]&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// Person 1 is called Anna</span><br><span class="line">// Person 2 is called Alex</span><br><span class="line">// Person 3 is called Brian</span><br><span class="line">// Person 4 is called Jack</span><br></pre></td></tr></table></figure></p><h2 id="包罗广泛的范围操作符（Inclusive-Range-Operator）"><a href="#包罗广泛的范围操作符（Inclusive-Range-Operator）" class="headerlink" title="包罗广泛的范围操作符（Inclusive Range Operator）"></a>包罗广泛的范围操作符（Inclusive Range Operator）</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for index in 1...5 &#123;</span><br><span class="line">    print(&quot;\(index) times 5 is \(index * 5)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 1 times 5 is 5</span><br><span class="line">// 2 times 5 is 10</span><br><span class="line">// 3 times 5 is 15</span><br><span class="line">// 4 times 5 is 20</span><br><span class="line">// 5 times 5 is 25</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (index in 1..5) &#123;</span><br><span class="line">    println(&quot;$index times 5 is $&#123;index * 5&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 1 times 5 is 5</span><br><span class="line">// 2 times 5 is 10</span><br><span class="line">// 3 times 5 is 15</span><br><span class="line">// 4 times 5 is 20</span><br><span class="line">// 5 times 5 is 25</span><br></pre></td></tr></table></figure></p><h1 id="BASICS-1"><a href="#BASICS-1" class="headerlink" title="BASICS"></a>BASICS</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var shoppingList = [&quot;catfish&quot;, &quot;water&quot;,</span><br><span class="line">    &quot;tulips&quot;, &quot;blue paint&quot;]</span><br><span class="line">shoppingList[1] = &quot;bottle of water&quot;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val shoppingList = arrayOf(&quot;catfish&quot;, &quot;water&quot;,</span><br><span class="line">    &quot;tulips&quot;, &quot;blue paint&quot;)</span><br><span class="line">shoppingList[1] = &quot;bottle of water&quot;</span><br></pre></td></tr></table></figure></p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var occupations = [</span><br><span class="line">    &quot;Malcolm&quot;: &quot;Captain&quot;,</span><br><span class="line">    &quot;Kaylee&quot;: &quot;Mechanic&quot;,</span><br><span class="line">]</span><br><span class="line">occupations[&quot;Jayne&quot;] = &quot;Public Relations&quot;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val occupations = mutableMapOf(</span><br><span class="line">    &quot;Malcolm&quot; to &quot;Captain&quot;,</span><br><span class="line">    &quot;Kaylee&quot; to &quot;Mechanic&quot;</span><br><span class="line">)</span><br><span class="line">occupations[&quot;Jayne&quot;] = &quot;Public Relations&quot;</span><br></pre></td></tr></table></figure></p><h2 id="空集合"><a href="#空集合" class="headerlink" title="空集合"></a>空集合</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let emptyArray = [String]()</span><br><span class="line">let emptyDictionary = [String: Float]()</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val emptyArray = arrayOf&lt;String&gt;()</span><br><span class="line">val emptyMap = mapOf&lt;String, Float&gt;()</span><br></pre></td></tr></table></figure></p><h1 id="FUNCTIONS"><a href="#FUNCTIONS" class="headerlink" title="FUNCTIONS"></a>FUNCTIONS</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func greet(_ name: String,_ day: String) -&gt; String &#123;</span><br><span class="line">    return &quot;Hello \(name), today is \(day).&quot;</span><br><span class="line">&#125;</span><br><span class="line">greet(&quot;Bob&quot;, &quot;Tuesday&quot;)</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun greet(name: String, day: String): String &#123;</span><br><span class="line">    return &quot;Hello $name, today is $day.&quot;</span><br><span class="line">&#125;</span><br><span class="line">greet(&quot;Bob&quot;, &quot;Tuesday&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="元组返回"><a href="#元组返回" class="headerlink" title="元组返回"></a>元组返回</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func getGasPrices() -&gt; (Double, Double, Double) &#123;</span><br><span class="line">    return (3.59, 3.69, 3.79)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data class GasPrices(val a: Double, val b: Double,</span><br><span class="line">     val c: Double)</span><br><span class="line">fun getGasPrices() = GasPrices(3.59, 3.69, 3.79)</span><br></pre></td></tr></table></figure></p><h2 id="参数的变量数目（Variable-Number-Of-Arguments）"><a href="#参数的变量数目（Variable-Number-Of-Arguments）" class="headerlink" title="参数的变量数目（Variable Number Of Arguments）"></a>参数的变量数目（Variable Number Of Arguments）</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func sumOf(_ numbers: Int...) -&gt; Int &#123;</span><br><span class="line">    var sum = 0</span><br><span class="line">    for number in numbers &#123;</span><br><span class="line">        sum += number</span><br><span class="line">    &#125;</span><br><span class="line">    return sum</span><br><span class="line">&#125;</span><br><span class="line">sumOf(42, 597, 12)</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun sumOf(vararg numbers: Int): Int &#123;</span><br><span class="line">    var sum = 0</span><br><span class="line">    for (number in numbers) &#123;</span><br><span class="line">        sum += number</span><br><span class="line">    &#125;</span><br><span class="line">    return sum</span><br><span class="line">&#125;</span><br><span class="line">sumOf(42, 597, 12)</span><br><span class="line"></span><br><span class="line">// sumOf() can also be written in a shorter way:</span><br><span class="line">fun sumOf(vararg numbers: Int) = numbers.sum()</span><br></pre></td></tr></table></figure></p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func makeIncrementer() -&gt; (Int -&gt; Int) &#123;</span><br><span class="line">    func addOne(number: Int) -&gt; Int &#123;</span><br><span class="line">        return 1 + number</span><br><span class="line">    &#125;</span><br><span class="line">    return addOne</span><br><span class="line">&#125;</span><br><span class="line">let increment = makeIncrementer()</span><br><span class="line">increment(7)</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun makeIncrementer(): (Int) -&gt; Int &#123;</span><br><span class="line">    val addOne = fun(number: Int): Int &#123;</span><br><span class="line">        return 1 + number</span><br><span class="line">    &#125;</span><br><span class="line">    return addOne</span><br><span class="line">&#125;</span><br><span class="line">val increment = makeIncrementer()</span><br><span class="line">increment(7)</span><br><span class="line"></span><br><span class="line">// makeIncrementer can also be written in a shorter way:</span><br><span class="line">fun makeIncrementer() = fun(number: Int) = 1 + number</span><br></pre></td></tr></table></figure></p><h2 id="映射-1"><a href="#映射-1" class="headerlink" title="映射"></a>映射</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let numbers = [20, 19, 7, 12]</span><br><span class="line">numbers.map &#123; 3 * $0 &#125;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val numbers = listOf(20, 19, 7, 12)</span><br><span class="line">numbers.map &#123; 3 * it &#125;</span><br></pre></td></tr></table></figure></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var mutableArray = [1, 5, 3, 12, 2]</span><br><span class="line">mutableArray.sort()</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listOf(1, 5, 3, 12, 2).sorted()</span><br></pre></td></tr></table></figure></p><h2 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func area(width: Int, height: Int) -&gt; Int &#123;</span><br><span class="line">    return width * height</span><br><span class="line">&#125;</span><br><span class="line">area(width: 2, height: 3)</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun area(width: Int, height: Int) = width * height</span><br><span class="line">area(width = 2, height = 3)</span><br><span class="line"></span><br><span class="line">// This is also possible with named arguments</span><br><span class="line">area(2, height = 2)</span><br><span class="line">area(height = 3, width = 2)</span><br></pre></td></tr></table></figure></p><h1 id="CLASSES"><a href="#CLASSES" class="headerlink" title="CLASSES"></a>CLASSES</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Shape &#123;</span><br><span class="line">    var numberOfSides = 0</span><br><span class="line">    func simpleDescription() -&gt; String &#123;</span><br><span class="line">        return &quot;A shape with \(numberOfSides) sides.&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Shape &#123;</span><br><span class="line">    var numberOfSides = 0</span><br><span class="line">    fun simpleDescription() =</span><br><span class="line">        &quot;A shape with $numberOfSides sides.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var shape = Shape()</span><br><span class="line">shape.numberOfSides = 7</span><br><span class="line">var shapeDescription = shape.simpleDescription()</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var shape = Shape()</span><br><span class="line">shape.numberOfSides = 7</span><br><span class="line">var shapeDescription = shape.simpleDescription()</span><br></pre></td></tr></table></figure></p><h2 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class NamedShape &#123;</span><br><span class="line">    var numberOfSides: Int = 0</span><br><span class="line">    let name: String</span><br><span class="line"></span><br><span class="line">    init(name: String) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func simpleDescription() -&gt; String &#123;</span><br><span class="line">        return &quot;A shape with \(numberOfSides) sides.&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Square: NamedShape &#123;</span><br><span class="line">    var sideLength: Double</span><br><span class="line"></span><br><span class="line">    init(sideLength: Double, name: String) &#123;</span><br><span class="line">        self.sideLength = sideLength</span><br><span class="line">        super.init(name: name)</span><br><span class="line">        self.numberOfSides = 4</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func area() -&gt; Double &#123;</span><br><span class="line">        return sideLength * sideLength</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override func simpleDescription() -&gt; String &#123;</span><br><span class="line">        return &quot;A square with sides of length &quot; +</span><br><span class="line">       sideLength + &quot;.&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let test = Square(sideLength: 5.2, name: &quot;square&quot;)</span><br><span class="line">test.area()</span><br><span class="line">test.simpleDescription()</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">open class NamedShape(val name: String) &#123;</span><br><span class="line">    var numberOfSides = 0</span><br><span class="line"></span><br><span class="line">    open fun simpleDescription() =</span><br><span class="line">        &quot;A shape with $numberOfSides sides.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Square(var sideLength: BigDecimal, name: String) :</span><br><span class="line">        NamedShape(name) &#123;</span><br><span class="line">    init &#123;</span><br><span class="line">        numberOfSides = 4</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun area() = sideLength.pow(2)</span><br><span class="line"></span><br><span class="line">    override fun simpleDescription() =</span><br><span class="line">        &quot;A square with sides of length $sideLength.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val test = Square(BigDecimal(&quot;5.2&quot;), &quot;square&quot;)</span><br><span class="line">test.area()</span><br><span class="line">test.simpleDescription()</span><br></pre></td></tr></table></figure></p><h2 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var movieCount = 0</span><br><span class="line">var songCount = 0</span><br><span class="line"></span><br><span class="line">for item in library &#123;</span><br><span class="line">    if item is Movie &#123;</span><br><span class="line">        movieCount += 1</span><br><span class="line">    &#125; else if item is Song &#123;</span><br><span class="line">        songCount += 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var movieCount = 0</span><br><span class="line">var songCount = 0</span><br><span class="line"></span><br><span class="line">for (item in library) &#123;</span><br><span class="line">    if (item is Movie) &#123;</span><br><span class="line">        ++movieCount</span><br><span class="line">    &#125; else if (item is Song) &#123;</span><br><span class="line">        ++songCount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let nb = 42</span><br><span class="line">switch nb &#123;</span><br><span class="line">    case 0...7, 8, 9: print(&quot;single digit&quot;)</span><br><span class="line">    case 10: print(&quot;double digits&quot;)</span><br><span class="line">    case 11...99: print(&quot;double digits&quot;)</span><br><span class="line">    case 100...999: print(&quot;triple digits&quot;)</span><br><span class="line">    default: print(&quot;four or more digits&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val nb = 42</span><br><span class="line">when (nb) &#123;</span><br><span class="line">    in 0..7, 8, 9 -&gt; println(&quot;single digit&quot;)</span><br><span class="line">    10 -&gt; println(&quot;double digits&quot;)</span><br><span class="line">    in 11..99 -&gt; println(&quot;double digits&quot;)</span><br><span class="line">    in 100..999 -&gt; println(&quot;triple digits&quot;)</span><br><span class="line">    else -&gt; println(&quot;four or more digits&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="类型向下转换"><a href="#类型向下转换" class="headerlink" title="类型向下转换"></a>类型向下转换</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for current in someObjects &#123;</span><br><span class="line">    if let movie = current as? Movie &#123;</span><br><span class="line">        print(&quot;Movie: &apos;\(movie.name)&apos;, &quot; +</span><br><span class="line">            &quot;dir. \(movie.director)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (current in someObjects) &#123;</span><br><span class="line">    if (current is Movie) &#123;</span><br><span class="line">        println(&quot;Movie: &apos;$&#123;current.name&#125;&apos;, &quot; +</span><br><span class="line">    &quot;dir. $&#123;current.director&#125;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protocol Nameable &#123;</span><br><span class="line">    func name() -&gt; String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func f&lt;T: Nameable&gt;(x: T) &#123;</span><br><span class="line">    print(&quot;Name is &quot; + x.name())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface Nameable &#123;</span><br><span class="line">    fun name(): String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun f&lt;T: Nameable&gt;(x: T) &#123;</span><br><span class="line">    println(&quot;Name is &quot; + x.name())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>Swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">extension Double &#123;</span><br><span class="line">    var km: Double &#123; return self * 1_000.0 &#125;</span><br><span class="line">    var m: Double &#123; return self &#125;</span><br><span class="line">    var cm: Double &#123; return self / 100.0 &#125;</span><br><span class="line">    var mm: Double &#123; return self / 1_000.0 &#125;</span><br><span class="line">    var ft: Double &#123; return self / 3.28084 &#125;</span><br><span class="line">&#125;</span><br><span class="line">let oneInch = 25.4.mm</span><br><span class="line">print(&quot;One inch is \(oneInch) meters&quot;)</span><br><span class="line">// prints &quot;One inch is 0.0254 meters&quot;</span><br><span class="line">let threeFeet = 3.ft</span><br><span class="line">print(&quot;Three feet is \(threeFeet) meters&quot;)</span><br><span class="line">// prints &quot;Three feet is 0.914399970739201 meters&quot;</span><br></pre></td></tr></table></figure></p><p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">val Double.km: Double get() = this * 1000</span><br><span class="line">val Double.m: Double get() = this</span><br><span class="line">val Double.cm: Double get() = this / 100</span><br><span class="line">val Double.mm: Double get() = this / 1000</span><br><span class="line">val Double.ft: Double get() = this / 3.28084</span><br><span class="line"></span><br><span class="line">val oneInch = 25.4.mm</span><br><span class="line">println(&quot;One inch is $oneInch meters&quot;)</span><br><span class="line">// prints &quot;One inch is 0.0254 meters&quot;</span><br><span class="line">val threeFeet = 3.0.ft</span><br><span class="line">println(&quot;Three feet is $threeFeet meters&quot;)</span><br><span class="line">// prints &quot;Three feet is 0.914399970739201 meters&quot;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Swift 与 Kotlin 的简单对比
    
    </summary>
    
      <category term="Java" scheme="http://localhost/categories/Java/"/>
    
      <category term="Kotlin" scheme="http://localhost/categories/Java/Kotlin/"/>
    
    
      <category term="Java" scheme="http://localhost/tags/Java/"/>
    
      <category term="Swift" scheme="http://localhost/tags/Swift/"/>
    
      <category term="Kotlin" scheme="http://localhost/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>在 Java 8 中避免 Null 检查</title>
    <link href="http://localhost/2018/04/03/Java/jdk8/%E5%9C%A8%20Java%208%20%E4%B8%AD%E9%81%BF%E5%85%8D%20Null%20%E6%A3%80%E6%9F%A5/"/>
    <id>http://localhost/2018/04/03/Java/jdk8/在 Java 8 中避免 Null 检查/</id>
    <published>2018-04-03T05:11:06.286Z</published>
    <updated>2018-04-03T05:13:01.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源：ostatsu，</p><p><a href="http://www.oschina.net/translate/avoid-null-checks-in-java" target="_blank" rel="noopener">www.oschina.net/translate/avoid-null-checks-in-java</a></p></blockquote><p>如何预防 Java 中著名的 NullPointerException 异常？这是每个 Java 初学者迟早会问到的关键问题之一。而且中级和高级程序员也在时时刻刻规避这个错误。其是迄今为止 Java 以及很多其他编程语言中最流行的一种错误。</p><p>Null 引用的发明者 Tony Hoare 在 2009 年道歉，并称这种错误为他的十亿美元错误。</p><blockquote><p>我将其称之为自己的十亿美元错误。它的发明是在1965 年，那时我用一个面向对象语言（ALGOL W）设计了第一个全面的引用类型系统。我的目的是确保所有引用的使用都是绝对安全的，编译器会自动进行检查。但是我未能抵御住诱惑，加入了 Null 引用，仅仅是因为实现起来非常容易。它导致了数不清的错误、漏洞和系统崩溃，可能在之后 40 年中造成了十亿美元的损失。</p></blockquote><p>无论如何，我们必须要面对它。所以，我们到底能做些什么来防止 NullPointerException 异常呢？那么，答案显然是对其添加 null 检查。由于 null 检查还是挺麻烦和痛苦的，很多语言为了处理 null 检查添加了特殊的语法，即空合并运算符 —— 其在像 Groovy 或 Kotlin 这样的语言中也被称为 Elvis 运算符。</p><p>不幸的是 Java 没有提供这样的语法糖。但幸运的是这在 Java 8 中得到了改善。这篇文章介绍了如何利用像 lambda 表达式这样的 Java 8 新特性来防止编写不必要的 null 检查的几个技巧。</p><h1 id="在-Java-8-中提高-Null-的安全性"><a href="#在-Java-8-中提高-Null-的安全性" class="headerlink" title="在 Java 8 中提高 Null 的安全性"></a>在 Java 8 中提高 Null 的安全性</h1><p>我已经在另一篇文章中说明了我们可以如何利用 Java 8 的 Optional 类型来预防 null 检查。下面是那篇文章中的示例代码。</p><p><a href="http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/" target="_blank" rel="noopener">http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/</a></p><p>假设我们有一个像这样的类层次结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Nested nested;</span><br><span class="line"></span><br><span class="line">    <span class="function">Nested <span class="title">getNested</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nested;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nested</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Inner inner;</span><br><span class="line"></span><br><span class="line">    <span class="function">Inner <span class="title">getInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String foo;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getFoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> foo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决这种结构的深层嵌套路径是有点麻烦的。我们必须编写一堆 null 检查来确保不会导致一个 NullPointerException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (outer != <span class="keyword">null</span> &amp;&amp; outer.nested != <span class="keyword">null</span> &amp;&amp; outer.nested.inner != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(outer.nested.inner.foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过利用 Java 8 的 Optional 类型来摆脱所有这些 null 检查。map 方法接收一个 Function 类型的 lambda 表达式，并自动将每个 function 的结果包装成一个 Optional 对象。这使我们能够在一行中进行多个 map 操作。Null 检查是在底层自动处理的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Optional.of(<span class="keyword">new</span> Outer())</span><br><span class="line"></span><br><span class="line">    .map(Outer::getNested)</span><br><span class="line"></span><br><span class="line">    .map(Nested::getInner)</span><br><span class="line"></span><br><span class="line">    .map(Inner::getFoo)</span><br><span class="line"></span><br><span class="line">    .ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><p>还有一种实现相同作用的方式就是通过利用一个 supplier 函数来解决嵌套路径的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Outer obj = <span class="keyword">new</span> Outer();</span><br><span class="line"></span><br><span class="line">resolve(() -&gt; obj.getNested().getInner().getFoo());</span><br><span class="line"></span><br><span class="line">    .ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><p>调用 obj.getNested().getInner().getFoo()) 可能会抛出一个 NullPointerException 异常。在这种情况下，该异常将会被捕获，而该方法会返回 Optional.empty()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">resolve</span><span class="params">(Supplier&lt;T&gt; resolver)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        T result = resolver.get();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请记住，这两个解决方案可能没有传统 null 检查那么高的性能。不过在大多数情况下不会有太大问题。</p>]]></content>
    
    <summary type="html">
    
      如何预防 Java 中著名的 NullPointerException 异常？这是每个 Java 初学者迟早会问到的关键问题之一。而且中级和高级程序员也在时时刻刻规避这个错误。其是迄今为止 Java 以及很多其他编程语言中最流行的一种错误。
    
    </summary>
    
      <category term="Java" scheme="http://localhost/categories/Java/"/>
    
      <category term="JDK8" scheme="http://localhost/categories/Java/JDK8/"/>
    
    
      <category term="Java" scheme="http://localhost/tags/Java/"/>
    
      <category term="JDK8" scheme="http://localhost/tags/JDK8/"/>
    
  </entry>
  
  <entry>
    <title>JDK 10 的 109 项新特性</title>
    <link href="http://localhost/2018/04/03/Java/jdk10/JDK%2010%20%E7%9A%84%20109%20%E9%A1%B9%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://localhost/2018/04/03/Java/jdk10/JDK 10 的 109 项新特性/</id>
    <published>2018-04-03T05:03:28.879Z</published>
    <updated>2018-04-03T05:09:59.917Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源：开源中国，</p><p><a href="http://www.oschina.net/translate/109-new-features-in-jdk-10" target="_blank" rel="noopener">www.oschina.net/translate/109-new-features-in-jdk-10</a></p></blockquote><p>虽然感觉 JDK9 发布才仅仅几周的时间，然而，随着新的 OpenJDK 的发布节奏，JDK10 已经到达发布候选里程碑阶段。</p><p>我看过各种关于 JDK10 新特性的博客，但是它们都倾向于关注通过 JEPS 定义的大方面。这篇博文，我将看看是否可以罗列出 JDK10 中已经发生变化的方方面面（包括新增的和剔除的）。</p><p>有时候，我会做一些关于 Java SE 的报告会。之前我在“ JDK9 的 55 个新特性”的报告会上曾开玩笑说：下次我将做的恐怕是“ JDK10 的 5 个新特性”。然而事实证明，即使仅有六个多月的开发时间，JDK10 依然超乎想象。</p><p>即便我不再为 Oracle 工作，我也在此先做一个“安全港声明”，以便消除误会。这个列表是由下面这些公开可用的信息整理编辑的：JDK Enhancement Proposals (JEPs)、the OpenJDK bug database 和 Java SE 10 public review specification (JSR 383) 。当然，尽管我已尽可能的研究以保证信息准确，但在 JDK 10 最终发布之前仍可能会发生变化。</p><h1 id="大事记"><a href="#大事记" class="headerlink" title="大事记"></a>大事记</h1><p>JDK10 包含 12 个JEP (改善提议）：</p><p><strong>[286]局部变量类型推断</strong> ：对于开发者来说，这是 JDK10 唯一的真正特性。它向 Java 中引入在其他语言中很常见的  var   ，比如 JavaScript 。只要编译器可以推断此种类型，你不再需要专门声明一个局部变量的类型。一个简单的例子是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>这就消除了我们之前必须执行的 ArrayList<string> 类型定义的重复。我鼓励你们去读 JEP ，因为上面有一些关于这个句法是否能用的规则。</string></p><p>有趣的是，需要注意 var 不能成为一个关键字，而是一个保留字。这意味着你仍然可以使用 var 作为一个变量，方法或包名，但是现在（尽管我确定你绝不会）你不能再有一个类被调用。</p><p><strong>[310]应用类数据共享(CDS)</strong> ：CDS 在 JDK5 时被引进以改善 JVM 启动的表现，同时减少当多个虚拟机在同一个物理或虚拟的机器上运行时的资源占用。JDK10 将扩展 CDS 到允许内部系统的类加载器、内部平台的类加载器和自定义类加载器来加载获得的类。之前，CDS 的使用仅仅限制在了 bootstrap 的类加载器。</p><p><strong>[314]额外的 Unicode 语言标签扩展</strong>：这将改善 java.util.Locale 类和相关的 API 以实现额外 BCP 47 语言标签的 Unicode 扩展。尤其是，货币类型，一周的第一天，区域覆盖和时区等标签现在将被支持。</p><p><strong>[322]基于时间的版本控制</strong>：正如我在之前的博客中所讨论的，我们的 JDK 版本字符串格式几乎与 JDK 版本一样多。有幸的是，这是最后需要使用到的，我们可以坚持用它。这种格式使用起来很像 JDK9 中介绍的提供一个更加语义的形式。有一件困扰我的事是包含了一个 INTERIM 元素，正如 JEP 提议中所说，“永远是0”。好吧，如果永远是0，那它有什么意义呢？他们说这是为未来使用做保留，但我仍不是很赞同。我认为，这有些冗余繁杂。这也消除了在 JDK9 中有过的相当奇怪的情形。第一次更新是 JDK 9.0.1 , 非常符合逻辑。第二次更新是 JDK 9.0.4 ，不合逻辑。原因是，在 JDK9 的版本计数模式下，需要留下空白以便应急或不在预期安排的更新使用。但既然没有更新是必须的，为什么不简单称之为 JDK 9.0.2 呢？</p><p><strong>[319]根证书</strong>：在 JDK 中将提供一套默认的 CA 根证书。关键的安全部件，如 TLS ，在 OpenJDK 构建中将默认有效。这是 Oracle 正在努力确保 OpenJDK 二进制和 Oracle JDK 二进制功能上一样的工作的一部分，是一项有用的补充内容。</p><p><strong>[307] 并行全垃圾回收器 G1</strong> : G1 是设计来作为一种低延时的垃圾回收器（但是如果它跟不上旧的堆碎片产生的提升速率的话，将仍然采用完整压缩集合）。在 JDK9 之前，默认的收集器是并行，吞吐，收集器。为了减少在使用默认的收集器的应用性能配置文件的差异，G1 现在有一个并行完整收集机制。</p><p><strong>[313]移除 Native-Header 自动生成工具</strong>：Java9 开始了一些对 JDK 的家务管理，这项特性是对它的延续。当编译 JNI 代码时，已不再需要单独的工具来生成头文件，因为这可以通过 javac 完成。在未来的某一时刻，JNI 将会被 Panama 项目的结果取代，但是何时发生还不清楚。</p><p><strong>[304]垃圾回收器接口</strong>: 这不是让开发者用来控制垃圾回收的接口；而是一个在 JVM 源代码中的允许另外的垃圾回收器快速方便的集成的接口。</p><p><strong>[312]线程-局部变量管控</strong>：这是在 JVM 内部相当低级别的更改，现在将允许在不运行全局虚拟机安全点的情况下实现线程回调。这将使得停止单个线程变得可能和便宜，而不是只能启用或停止所有线程。</p><p><strong>[316]在备用存储装置上的堆分配</strong>：硬件技术在持续进化，现在可以使用与传统 DRAM 具有相同接口和类似性能特点的非易失性 RAM 。这项 JEP 将使得 JVM 能够使用适用于不同类型的存储机制的堆。</p><p><strong>[317] 试验性的基于 Java 的 JIT 编译器</strong>：最近宣布的 Metropolis 项目，提议用 Java 重写大部分 JVM 。乍一想，觉得很奇怪。如果 JVM 是用 Java 编写的，那么是否需要一个 JVM 来运行 JVM ？ 相应的，这导致了一个很好的镜像类比。 现实情况是，使用 Java 编写 JVM 并不意味着必须将其编译为字节码，你可以使用 AOT 编译，然后在运行时编译代码以提高性能。这项 JEP 将 Graal 编译器研究项目引入到 JDK 中。并给将 Metropolis 项目成为现实，使 JVM 性能与当前 C++ 所写版本匹敌（或有幸超越）提供基础。</p><p><strong>[296]: 合并 JDK 多个代码仓库到一个单独的储存库中</strong>：在 JDK9 中，有 8 个仓库： root、corba、hotspot、jaxp、jaxws、jdk、langtools 和 nashorn 。在 JDK10 中这些将被合并为一个，使得跨相互依赖的变更集的存储库运行 atomic commit （原子提交）成为可能。</p><h1 id="新-API"><a href="#新-API" class="headerlink" title="新 API"></a>新 API</h1><p>有 73 项新增内容添加到了标准类库中。</p><p>java.awt.Toolkit</p><p>int getMenuShortcutKeyMaskEx(): 确定哪个扩展修饰符键是菜单快捷键的适当加速键。</p><p>java.awt.geom.Path2D:</p><p>void trimToSize(): 将此 Path2D 实例的容量计算到它当前的大小。应用可使用此操作将路径的存储空间最小化。这个方法也被添加到 Path2D.Double 和 Path2D.Float 类。</p><p>java.io.ByteArrayOutputStream:</p><p>String toString(Charset): 重载 toString()，通过使用指定的字符集解码字节，将缓冲区的内容转换为字符串。</p><p>java.io.PrintStream:</p><p>lang.io.PrintWriter:</p><p>这两个类都有三个新的构造函数，它们需要额外的 Charset 参数。</p><p>java.io.Reader:</p><p>long transferTo(Writer): 从这个 Reader 中读取所有字符，并按照所读的顺序将字符写入给定的 Writer 。</p><p>java.lang.Runtime.Version:</p><p>有四种新方法返回新（JEP 322）版本字符串字段的整数值: feature()、interim()、patch() 和 update() 。</p><p>java.lang.StackWalker.StackFrame:</p><p>String getDescriptor(): 按照 JVM 标准返回此堆栈帧所代表的方法的描述符。</p><p>String getMethodType():返回此堆栈帧所代表的方法类型，描述参数类型和返回值类型。</p><p>java.lang.invoke.MethodType:</p><p>Class&lt;?&gt; lastParameterType():返回这个方法类型的最后一个参数类型。如果这个方法类型没有参数，则返回空类型作为岗哨值（Sentinel Value）。</p><p>java.lang.management.RuntimeMXBean:</p><p>long getPid(): R 返回正在运行的 JVM 的进程 ID 。</p><p>java.lang.management.ThreadMXBean:</p><ul><li>ThreadInfo[] dumpAllThreads(boolean, boolean, int): 返回所有活动线程的线程信息，其中有指定的最大元素数量和同步信息的堆栈跟踪。</li><li>ThreadInfo[] getThreadInfo(long[], boolean, boolean, int): 返回每个线程的线程信息，这些线程的标识位于输入数组中，其中有指定的最大元素数量和同步信息的堆栈跟踪。</li></ul><p>java.lang.reflect.MalformedParameterizedTypeException: 添加了一个新的构造函数，它以字符串的形式作为参数来获取详细信息。</p><p>java.net.URLDecoder:</p><p>java.net.URLEncoder:</p><p>这两个类都有新的重载的解码和编码方法，将 charset 作为附加参数。</p><p>java.nio.channels.Channels:</p><p>两个新的静态重载方法，允许使用 Charset 的 newReader（ReadByteChannel，Charset）和newWriter（WriteByteChannel，Charset）。</p><p>java.nio.file.FileStore:</p><p>long getBlockSize(): 在这个文件存储中返回每个块的字节数。</p><p>java.time.chrono: 这个包里有三个类，HijrahEra、MiinguoEra 和 ThaiBuddhistEra ，都有同样的方法。</p><p>String getDisplayName(TextStyle, Locale): 这将返回用于识别 era 的文本名称，适合于向用户展示。</p><p>java.time.format.DateTimeFormatter:</p><p>localizedBy(Locale): 返回指定格式器的一个副本，其中包含地区、日历、区域、小数和/或时区的本地化值，这将取代该格式器中的值。</p><p>java.util: DoubleSummaryStatistics、IntSummaryStatistics 和 LongSummaryStatistics 都有一个新的构造函数，它包含 4 个数值。它使用指定的计数、最小值、最大值和总和构造一个非空实例。</p><p>java.util.List:</p><p>java.util.Map:</p><p>java.util.Set: 这些接口中的每一个都增加了一个新的静态方法，copyOf(Collection）。这些函数按照其迭代顺序返回一个不可修改的列表、映射或包含给定集合的元素的集合。</p><p>java.util.Optional:</p><p>java.util.OptionalDouble:</p><p>java.util.OptionalInt:</p><p>java.util.OptionalLong: 每一个类都有一个新的方法，orElseThrow() ，它本质上和 get() 一样，也就是说，如果 Optional 有值则返回。否则，将抛出 NoSuchElementException 。</p><p>java.util.Formatter:</p><p>java.util.Scanner:</p><p>这两个类都有三个新的构造函数，除了其他参数之外，它们都带有一个 charset 参数。</p><h1 id="其它翻译版本-1"><a href="#其它翻译版本-1" class="headerlink" title="其它翻译版本(1)"></a>其它翻译版本(1)</h1><p>java.util.Properties: 这有一个新的构造函数，它接受一个 int 参数。这将创建一个没有默认值的空属性列表，并且指定初始大小以容纳指定的元素数量，而无需动态调整大小。还有一个新的重载的 replace 方法，接受三个 Object 参数并返回一个布尔值。只有在当前映射到指定值时，才会替换指定键的条目。</p><p>java.SplittableRandom:</p><p>void nextBytes(byte[]): 用生成的伪随机字节填充一个用户提供的字节数组。</p><p>java.util.concurrent.FutureTask: 添加了 toString() 方法，该方法返回一个标识 FutureTask 的字符串，以及它的完成状态。在括号中，状态包含如下字符串中的一个，“Completed Normally” 、“Completed Exceptionally”、 “Cancelled” 或者 “Not completed”。</p><p>java.util.concurrent.locks.StampedLock:</p><ul><li><p>boolean isLockStamp(long): 返回一个标记戳表示是否持有一个锁。</p></li><li><p>boolean isOptimisticReadStamp(long): 返回一个标记戳代表是否成功的进行了乐观读（optimistic read）。</p></li><li><p>boolean isReadLockStamp(long): 返回一个标记戳表示是否持有一个非独占锁（即 read lock ）。</p></li><li><p>boolean isWriteLockStamp(long): 返回一个标记戳表示是否持有一个独占锁（即 write lock ）。</p></li></ul><p>java.jar.JarEntry:</p><p>String getRealName(): 返回这个 JarEntry 的真实名称。如果这个 JarEntry 是一个多版本 jar 文件的入口，它被配置为这样处理，这个方法返回的名字是 JarEntry 所代表的版本条目的入口，而不是 ZipEntry.getName（） 返回的基本条目的路径名。如果 JarEntry 不代表一个多版本 jar 文件的版本化条目或者 jar 文件没有被配置为作为一个多版本 jar 文件进行处理，这个方法将返回与 ZipEntry.getName（） 返回的相同名称。</p><p>java.util.jar.JarFile:</p><p>Stream<jarentry> versionedStream(): 返回 jar 文件中指定版本的入口对应 Stream 。与 JarEntry 的 getRealName 方法类似，这与多版本 jar 文件有关。</jarentry></p><p>java.util.spi.LocaleNameProvider:</p><p>getDisplayUnicodeExtensionKey(String, Locale): 为给定的 Unicode 扩展键返回一个本地化名称。</p><p>getDisplayUnicodeExtensionType(String, String, Locale): 为给定的 Unicode 扩展键返回一个本地化名称。</p><p>java.util.stream.Collectors:</p><p>toUnmodifiableList():</p><p>toUnmodifiableSet():</p><p>toUnmodifiableMap(Function, Function):</p><p>toUnmodifiableMap(Function, Function, BinaryOperator): 这四个新方法都返回 Collectors ，将输入元素聚集到适当的不可修改的集合中。</p><p>java.lang.model.SourceVersion: 现在有了一个字段，它代表了 JDK 10 的版本。</p><p>java.lang.model.util.TypeKindVisitor6:</p><p>javax.lang.model.util.TypeKindVisitor9:</p><p>（我必须承认，我从来没听说过这些类）</p><p>R visitNoTypeAsModule(NoType, P): 访问一个 MODULE 的 pseudo-type 。我不确定为什么只有这两个类得到这个方法，因为还有 Visitor7 和 Visitor8 变量。</p><p>javax.remote.management.rmi.RMIConnectorServer:</p><p>这个类已经添加了两个字段： CREDENTIALS_FILTER_PATTERN 和 SERIAL_FILTER_PATTERN 。</p><p>javax.ButtonModel：看，Swing 还在更新！</p><p>ButtonGroup getGroup(): 返回按钮所属的组。通常用于单选按钮，它们在组中是互斥的。</p><p>javax.plaf.basic.BasicMenuUI:</p><p>Dimension getMinimumSize(JComponent): 返回指定组件适合观感的最小大小。</p><h1 id="JVM-规范改动"><a href="#JVM-规范改动" class="headerlink" title="JVM 规范改动"></a>JVM 规范改动</h1><p>这些改动相当小：</p><ul><li><p>4.6节：类文件格式（第99页）。在方法访问标志方面有小的改动。</p></li><li><p>4.7节：模块属性（第169页）。如果模块不是 java.base ，则 JDK 10 不再允许设置 ACC_TRANSITIVE 或 ACC_STATIC_PHASE 。</p></li><li><p>4.10节：类文件的校验（第252页）。dup2 指令已改变了 typesafe form 1 的定义，颠倒了 canSafleyPushList 一节中类型的顺序（你需要仔细查看才能发现它）。</p></li><li><p>5.2节：Java 虚拟机启动（第350页）。该描述添加了在创建初始类或接口时可使用用户定义的类加载器（ bootstrap 类加载器除外）。</p></li></ul><h1 id="对-Java-语言规范的更改"><a href="#对-Java-语言规范的更改" class="headerlink" title="对 Java 语言规范的更改"></a>对 Java 语言规范的更改</h1><p>这里还有一些更改，但主要是为了支持局部变量类型推断。</p><ul><li><p>第3.8节：标识符（第23页）。在忽略了可忽略的字符之后，标识符的等价性现在被考虑了。这似乎是合乎逻辑的。</p></li><li><p>（第24页）一个新的 Token，TypeIdentifier，它支持对局部变量类型推断的新用法，而 var 的使用不是关键字，而是一个具有特殊含义的标识符，作为局部变量声明的类型。</p></li><li><p>第4.10.5节：类型预测（第76页）。这是一个相当复杂的部分，它涉及到捕获变量、嵌套类以及如何使用局部变量类型推断。我建议你阅读规范中的这一部分，而不是试图解释它。</p></li><li><p>第6.1节：声明（第134页）。一个反映使用 TypeIdentifier 来支持局部变量类型的推断的小改动。</p></li><li><p>第6.5节：确定名字的含义（第153页，第158页和第159页）。根据类型标识符的使用而更改类类型。</p></li><li><p>第6.5.4.1:简单的 PackageOrTypeNames（第160页）</p></li><li><p>第6.5.4.2节：合规的 PackageOrTypeNames（第160页）。这两种方式都与使用 TypeIdentifier 有细微的变化。</p></li><li><p>第7.5.3:单静态导入声明（第191页）。这改变了导入具有相同名称的静态类型的规则。除非类型是相同的，否则这将成为一个错误，在这种情况下，重复被忽略。</p></li><li><p>第7.7.1:依赖（第198页）。如果你明确声明一个模块需要 java.base ，那在必要的关键字之后，你就不能再使用修饰符（例如静态）了。</p></li><li><p>第8部分：正式参数（第244页）。接收者参数可能只出现在一个实例方法的 formalparameters 列表，或者是一个内部类的构造函数中，其中内部类没有在静态上下文中声明。</p></li><li><p>第9.7.4节：注释可能出现的地方（第335页）。有一个与局部变量类型推断相关的变更。</p></li><li><p>第14.4部分：局部变量声明语句（第433页）。实现局部变量类型推断所需的大量更改。</p></li><li><p>第14节：增强的 for 语句（第455页）。这个结构已经更新，包括对局部变量类型推断的支持。</p></li><li><p>第14.20.3节:try-with-resources（474页）。这个结构已经更新，包括对局部变量类型推断的支持。</p></li></ul><p>最后，第 19 章有多处语法更新，反映了应更多使用 TypeIdentifier 类型标识符，而不仅仅是 Identifier 标识符，以支持局部变量类型推断。</p>]]></content>
    
    <summary type="html">
    
      虽然感觉 JDK9 发布才仅仅几周的时间，然而，随着新的 OpenJDK 的发布节奏，JDK10 已经到达发布候选里程碑阶段。
    
    </summary>
    
      <category term="Java" scheme="http://localhost/categories/Java/"/>
    
      <category term="JDK10" scheme="http://localhost/categories/Java/JDK10/"/>
    
    
      <category term="Java" scheme="http://localhost/tags/Java/"/>
    
      <category term="JDK10" scheme="http://localhost/tags/JDK10/"/>
    
  </entry>
  
  <entry>
    <title>MySQL5.7解压包安装教程</title>
    <link href="http://localhost/2018/04/03/Linux/mysql57/"/>
    <id>http://localhost/2018/04/03/Linux/mysql57/</id>
    <published>2018-04-03T04:59:59.477Z</published>
    <updated>2018-04-03T05:01:01.390Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>创建配置文件<br> 创建 my.ini 文件</p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">basedir</span>=C:\\soft\mysql-<span class="number">5.7</span>.<span class="number">21</span>-winx64</span><br><span class="line"><span class="attr">datadir</span>=C:\\soft\mysql-<span class="number">5.7</span>.<span class="number">21</span>-winx64\data</span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br></pre></td></tr></table></figure></li><li><p>初始化Data目录</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --user=mysql --console</span><br></pre></td></tr></table></figure><p> 记录下默认密码</p></li><li><p>创建MySQL服务</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure></li><li><p>启动MySQL</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></li><li><p>修改密码</p><ol><li><p>登录root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li><li><p>修改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">'root'</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="MySQL" scheme="http://localhost/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://localhost/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux 文件权限管理剖析</title>
    <link href="http://localhost/2018/04/02/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%89%96%E6%9E%90/"/>
    <id>http://localhost/2018/04/02/Linux/文件权限管理剖析/</id>
    <published>2018-04-02T00:18:56.342Z</published>
    <updated>2018-04-02T00:24:00.123Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统中，为了保证文件的安全，对文件所有者、同组用户、其他用户的访问权限进行了分别管理。其中，文件所有者，即建立文件或目录的用户。同组用户，是所属组群中的所有用户。其他用户，指的是既不是文件所有者，也不是同组用户的其他用户。<br><img src="http://7xivgs.com1.z0.glb.clouddn.com/Linux%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""><br>此外，每个文件和目录都具有读取权限、写入权限和执行权限，这三个权限之间相互独立。<br>！<a href="http://7xivgs.com1.z0.glb.clouddn.com/Linux%20%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E5%8F%82%E7%85%A7%E8%A1%A8.PNG" target="_blank" rel="noopener"></a></p><h1 id="功能模式"><a href="#功能模式" class="headerlink" title="功能模式"></a>功能模式</h1><p>在Linux 系统中，每个文件的访问权限可以用 9 个字母表示，每 3 个字母表示一类用户权限，分别代表文件创建者、同组用户、其他用户。其中，r 表示读取权限，w 表示写入权限，x 表示执行权限。<br><img src="http://7xivgs.com1.z0.glb.clouddn.com/Linux%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><p>通过功能模式修改文件权限，有三个部分组成，包括对象、操作和权限。</p><p><img src="http://7xivgs.com1.z0.glb.clouddn.com/%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%BC%8F%E5%8F%82%E7%85%A7%E8%A1%A8.PNG" alt=""></p><p>假设需要增加同组用户写入权限，下面来看一个例子。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod g+w /root/install.log</span><br></pre></td></tr></table></figure></p><h1 id="数字模式"><a href="#数字模式" class="headerlink" title="数字模式"></a>数字模式</h1><p>每一类用户的访问也可以通过数字的方式进行表示。</p><p><img src="http://7xivgs.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E6%A8%A1%E5%BC%8F%E5%8F%82%E7%85%A7%E8%A1%A8.PNG" alt=""></p><p>那么，通过数字模式就可以对常见的 Linux 文件权限操作进行归纳。</p><p><img src="http://7xivgs.com1.z0.glb.clouddn.com/%E5%B8%B8%E7%94%A8%E7%9A%84Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90.PNG" alt=""></p><p>假设需要设置创建者可读可写可执行、同组用户可读、其他用户可读，下面来看一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /root/install.log</span><br></pre></td></tr></table></figure><p>注意的是，只有文件创建者和超级用户才可以修改文件权限。s</p>]]></content>
    
    <summary type="html">
    
      在 Linux 系统中，为了保证文件的安全，对文件所有者、同组用户、其他用户的访问权限进行了分别管理。其中，文件所有者，即建立文件或目录的用户。同组用户，是所属组群中的所有用户。其他用户，指的是既不是文件所有者，也不是同组用户的其他用户。
    
    </summary>
    
      <category term="Linux" scheme="http://localhost/categories/Linux/"/>
    
      <category term="Shell" scheme="http://localhost/categories/Linux/Shell/"/>
    
    
      <category term="Linux" scheme="http://localhost/tags/Linux/"/>
    
      <category term="Shell" scheme="http://localhost/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data Jpa 最大分页 size --原创 彭应智</title>
    <link href="http://localhost/2018/03/31/Java/spring/Spring%20Data%20Jpa%E6%9C%80%E5%A4%A7%E5%88%86%E9%A1%B5size/"/>
    <id>http://localhost/2018/03/31/Java/spring/Spring Data Jpa最大分页size/</id>
    <published>2018-03-31T07:21:24.091Z</published>
    <updated>2018-03-31T07:37:28.372Z</updated>
    
    <content type="html"><![CDATA[<p>我们需要重写PageableHandlerMethodArgumentResolver这个Bean，<br>调用其中的setMaxPageSize()来配置最大分页的size。默认值为2000.</p><p>如下代码配置最大分页的size为Integer的最大值2147483647：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaginationConfiguration</span> <span class="keyword">extends</span> <span class="title">SpringDataWebConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageableHandlerMethodArgumentResolver <span class="title">pageableResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PageableHandlerMethodArgumentResolver pageableHandlerMethodArgumentResolver =</span><br><span class="line">                <span class="keyword">new</span> PageableHandlerMethodArgumentResolver(sortResolver());</span><br><span class="line"></span><br><span class="line">        pageableHandlerMethodArgumentResolver.setMaxPageSize(Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageableHandlerMethodArgumentResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      如果你在项目使用Jpa并遇到Pageable的size最大2000的问题，那么这篇文章将会对你有帮助。
    
    </summary>
    
      <category term="Java" scheme="http://localhost/categories/Java/"/>
    
      <category term="Spring" scheme="http://localhost/categories/Java/Spring/"/>
    
    
      <category term="Java" scheme="http://localhost/tags/Java/"/>
    
      <category term="Spring" scheme="http://localhost/tags/Spring/"/>
    
      <category term="Spring Data Jpa" scheme="http://localhost/tags/Spring-Data-Jpa/"/>
    
      <category term="原创" scheme="http://localhost/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>Java 9 新特性概述</title>
    <link href="http://localhost/2018/03/31/Java/jdk9/Java%209%20%E6%96%B0%E7%89%B9%E6%80%A7%E6%A6%82%E8%BF%B0/"/>
    <id>http://localhost/2018/03/31/Java/jdk9/Java 9 新特性概述/</id>
    <published>2018-03-31T07:04:19.085Z</published>
    <updated>2018-03-31T07:13:20.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-平台-模块系统"><a href="#Java-平台-模块系统" class="headerlink" title="Java 平台 模块系统"></a>Java 平台 模块系统</h1><p>Java 平台模块系统，也就是 Project Jigsaw，把模块化开发实践引入到了 Java 平台中。在引入了模块系统之后，JDK 被重新组织成 94 个模块。Java 应用可以通过新增的 jlink 工具，创建出只包含所依赖的 JDK 模块的自定义运行时镜像。这样可以极大的减少 Java 运行时环境的大小。这对于目前流行的不可变基础设施的实践来说，镜像的大小的减少可以节省很多存储空间和带宽资源 。</p><p>模块化开发的实践在软件开发领域并不是一个新的概念。Java 开发社区已经使用这样的模块化实践有相当长的一段时间。主流的构建工具，包括 Apache Maven 和 Gradle 都支持把一个大的项目划分成若干个子项目。子项目之间通过不同的依赖关系组织在一起。每个子项目在构建之后都会产生对应的 JAR 文件。 在 Java9 中 ，已有的这些项目可以很容易的升级转换为 Java 9 模块 ，并保持原有的组织结构不变。</p><p>Java 9 模块的重要特征是在其工件（artifact）的根目录中包含了一个描述模块的 module-info.class 文 件。 工件的格式可以是传统的 JAR 文件或是 Java 9 新增的 JMOD 文件。这个文件由根目录中的源代码文件 module-info.java 编译而来。该模块声明文件可以描述模块的不同特征。模块声明文件中可以包含的内容如下：</p><ul><li>模块导出的包：使用 exports 可以声明模块对其他模块所导出的包。包中的 public 和 protected 类型，以及这些类型的 public 和 protected 成员可以被其他模块所访问。没有声明为导出的包相当于模块中的私有成员，不能被其他模块使用。</li><li>模块的依赖关系：使用 requires 可以声明模块对其他模块的依赖关系。使用 requires transitive 可 以把一个模块依赖声明为传递的。传递的模块依赖可以被依赖当前模块的其他模块所读取。 如果一个模块所导出的类型的型构中包含了来自它所依赖的模块的类型，那么对该模块的依赖应该声明为传递的。</li><li>服务的提供和使用：如果一个模块中包含了可以被 ServiceLocator 发现的服务接口的实现 ，需要使用 provides with 语句来声明具体的实现类 ；如果一个模块需要使用服务接口，可以使用 uses 语句来声明。<br>代码清单 1 中给出了一个模块声明文件的示例。在该声明文件中，模块 c om.mycompany.sample 导出了 Java 包 com.mycompany.sample。该模块依赖于模块 c om.mycompany.sample 。该模块也提供了服务接口 com.mycompany.common.DemoService 的实现类 c om.mycompany.sample.DemoServiceImpl 。</li></ul><p>清单 1. 模块声明示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> com.mycompany.sample &#123; </span><br><span class="line">    <span class="keyword">exports</span> com.mycompany.sample; </span><br><span class="line">    <span class="keyword">requires</span> com.mycompany.common; </span><br><span class="line">    provides com.mycompany.common.DemoService with</span><br><span class="line">        com.mycompany.sample.DemoServiceImpl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>模块系统中增加了模块路径的概念。模块系统在解析模块时，会从模块路径中进行查找。为了保持与之前 Java 版本的兼容性，CLASSPATH 依然被保留。所有的类型在运行时都属于某个特定的模块。对于从 CLASSPATH 中加载的类型，它们属于加载它们的类加载器对应的未命名模块。可以通过 Class 的 getModule()方法来获取到表示其所在模块的 Module 对象。</p><p>在 JVM 启动时，会从应用的根模块开始，根据依赖关系递归的进行解析，直到得到一个表示依赖关系的图。如果解析过程中出现找不到模块的情况，或是在模块路径的同一个地方找到了名称相同的模块，模块解析过程会终止，JVM 也会退出。Java 也提供了相应的 API 与模块系统进行交互。</p><h1 id="Jshell"><a href="#Jshell" class="headerlink" title="Jshell"></a>Jshell</h1><p>jshell 是 Java 9 新增的一个实用工具。jshell 为 Java 增加了类似 NodeJS 和 Python 中的读取-求值-打印循环（ Read-Evaluation-Print Loop ） 。 在 jshell 中 可以直接 输入表达式并查看其执行结果。当需要测试一个方法的运行效果，或是快速的对表达式进行求值时，jshell 都非常实用。只需要通过 jshell 命令启动 jshell，然后直接输入表达式即可。每个表达式的结果会被自动保存下来 ，以数字编号作为引用，类似 $1 和$2 这样的名称 。可以在后续的表达式中引用之前语句的运行结果。 在 jshell 中 ，除了表达式之外，还可以创建 Java 类和方法。jshell 也有基本的代码完成功能。</p><p>在代码清单 2 中，我们直接创建了一个方法 add。</p><p>清单 2. 在 jshell 中添加方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; int add(int x, int y) &#123; </span><br><span class="line">    ...&gt; return x + y; </span><br><span class="line">    ...&gt; &#125; </span><br><span class="line"> | created method add(int,int)</span><br></pre></td></tr></table></figure></p><p>接着就可以在 jshell 中直接使用这个方法，如 代码清单 3 所示。</p><p>清单 3. 在 jshell 中使用创建的方法<br><code>jshelljshell&gt; add(1, 2) $19 ==&gt; 3</code></p><h1 id="集合、Stream-和-Optional"><a href="#集合、Stream-和-Optional" class="headerlink" title="集合、Stream 和 Optional"></a>集合、Stream 和 Optional</h1><p>在集合上，Java 9 增加 了 List.of()、Set.of()、Map.of() 和 M ap.ofEntries()等工厂方法来创建不可变集合 ，如 代码清单 4 所示。</p><p>清单 4 . 创建不可变集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List.of(); </span><br><span class="line">List.of(<span class="string">"Hello"</span>, <span class="string">"World"</span>); </span><br><span class="line">List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Set.of(); </span><br><span class="line">Set.of(<span class="string">"Hello"</span>, <span class="string">"World"</span>); </span><br><span class="line">Set.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Map.of();</span><br><span class="line">Map.of(<span class="string">"Hello"</span>, <span class="number">1</span>, <span class="string">"World"</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p>Stream 中增加了新的方法 ofNullable、dropWhile、takeWhile 和 iterate。在 代码清单 5 中，流中包含了从 1 到 5 的 元素。断言检查元素是否为奇数。第一个元素 1 被删除，结果流中包含 4 个元素。</p><p>清单 5 . Stream 中的 dropWhile 方法示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDropWhile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> count = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) </span><br><span class="line">        .dropWhile(i -&gt; i % <span class="number">2</span> != <span class="number">0</span>) </span><br><span class="line">        .count(); </span><br><span class="line">    assertEquals(<span class="number">4</span>, count); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Collectors 中增加了新的方法 filtering 和 flatMapping。在 代码清单 6 中，对于输入的 String 流 ，先通过 flatMapping 把 String 映射成 Integer 流 ，再把所有的 Integer 收集到一个集合中。</p><p>清单 6 . Collectors 的 flatMapping 方法示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFlatMapping</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> Set&lt;Integer&gt; result = Stream.of(<span class="string">"a"</span>, <span class="string">"ab"</span>, <span class="string">"abc"</span>) </span><br><span class="line">        .collect(Collectors.flatMapping(v -&gt; v.chars().boxed(), </span><br><span class="line">            Collectors.toSet())); </span><br><span class="line">    assertEquals(<span class="number">3</span>, result.size()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Optiona l 类中新增了 ifPresentOrElse、or 和 stream 等方法。在 代码清单 7 中，Optiona l 流中包含 3 个 元素，其中只有 2 个有值。在使用 flatMap 之后，结果流中包含了 2 个值。</p><p>清单 7 . Optional 的 stream 方法示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStream</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> count = Stream.of( </span><br><span class="line">        Optional.of(<span class="number">1</span>), </span><br><span class="line">        Optional.empty(), </span><br><span class="line">        Optional.of(<span class="number">2</span>) </span><br><span class="line">    ).flatMap(Optional::stream) </span><br><span class="line">        .count(); </span><br><span class="line">    assertEquals(<span class="number">2</span>, count); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="进程-API"><a href="#进程-API" class="headerlink" title="进程 API"></a>进程 API</h1><p>Java 9 增加了 ProcessHandle 接口，可以对原生进程进行管理，尤其适合于管理长时间运行的进程。在使用 P rocessBuilder 来启动一个进程之后，可以通过 Process.toHandle()方法来得到一个 ProcessHandl e 对象的实例。通过 ProcessHandle 可以获取到由 ProcessHandle.Info 表 示的进程的基本信息，如命令行参数、可执行文件路径和启动时间等。ProcessHandle 的 onExit()方法返回一个 C ompletableFuture<processhandle>对象，可以在进程结束时执行自定义的动作。 代码清单 8 中给出了进程 API 的使用示例。</processhandle></p><p>清单 8 . 进程API 示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ProcessBuilder processBuilder = <span class="keyword">new</span> ProcessBuilder(<span class="string">"top"</span>) </span><br><span class="line">    .inheritIO(); </span><br><span class="line"><span class="keyword">final</span> ProcessHandle processHandle = processBuilder.start().toHandle(); </span><br><span class="line">processHandle.onExit().whenCompleteAsync((handle, throwable) -&gt; &#123; </span><br><span class="line">    <span class="keyword">if</span> (throwable == <span class="keyword">null</span>) &#123; </span><br><span class="line">        System.out.println(handle.pid()); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        throwable.printStackTrace(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="平台日志-API-和-服务"><a href="#平台日志-API-和-服务" class="headerlink" title="平台日志 API 和 服务"></a>平台日志 API 和 服务</h1><p>Java 9 允许为 JDK 和应用配置同样的日志实现。新增的 System.LoggerFinder 用来管理 JDK 使 用的日志记录器实现。JVM 在运行时只有一个系统范围的 LoggerFinder 实例。LoggerFinder 通 过服务查找机制来加载日志记录器实现。默认情况下，JDK 使用 java.logging 模块中的 java.util.logging 实现。通过 LoggerFinder 的 getLogger()方法就可以获取到表示日志记录器的 System.Logger 实现。应用同样可以使用 System.Logger 来记录日志。这样就保证了 JDK 和应用使用同样的日志实现。我们也可以通过添加自己的 System.LoggerFinder 实现来让 JDK 和应用使用 SLF4J 等其他日志记录框架。 代码清单 9 中给出了平台日志 API 的使用示例。</p><p>清单 9.使用平台日志 API<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> System.Logger LOGGER = System.getLogger(<span class="string">"Main"</span>); </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123; </span><br><span class="line">        LOGGER.log(Level.INFO, <span class="string">"Run!"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="反应式流-（-Reactive-Streams-）"><a href="#反应式流-（-Reactive-Streams-）" class="headerlink" title="反应式流 （ Reactive Streams ）"></a>反应式流 （ Reactive Streams ）</h1><p>反应式编程的思想最近得到了广泛的流行。 在 Java 平台上有流行的反应式 库 RxJava 和 R eactor。反应式流规范的出发点是提供一个带非阻塞负压（ non-blocking backpressure ） 的异步流处理规范。反应式流规范的核心接口已经添加到了 Java9 中的 java.util.concurrent.Flow 类中。</p><p>Flow 中包含了 Flow.Publisher、Flow.Subscriber、Flow.Subscription 和 F low.Processor 等 4 个核心接口。Java 9 还提供了 SubmissionPublisher 作为 Flow.Publisher 的一个实现。RxJava 2 和 Reactor 都可以很方便的 与 Flow 类的核心接口进行互操作。</p><h1 id="变量句柄"><a href="#变量句柄" class="headerlink" title="变量句柄"></a>变量句柄</h1><p>变量句柄是一个变量或一组变量的引用，包括静态域，非静态域，数组元素和堆外数据结构中的组成部分等。变量句柄的含义类似于已有的方法句柄。变量句柄由 J ava 类 java.lang.invoke.VarHandle 来表示。可以使用类 j ava.lang.invoke.MethodHandles.Looku p 中的静态工厂方法来创建 VarHandle 对 象。通过变量句柄，可以在变量上进行各种操作。这些操作称为访问模式。不同的访问模式尤其在内存排序上的不同语义。目前一共有 31 种 访问模式，而每种访问模式都 在 VarHandle 中 有对应的方法。这些方法可以对变量进行读取、写入、原子更新、数值原子更新和比特位原子操作等。VarHandle 还 可以用来访问数组中的单个元素，以及把 byte[]数组 和 ByteBuffer 当成是不同原始类型的数组来访问。</p><p>在 代码清单 10 中，我们创建了访问 HandleTarget 类中的域 count 的变量句柄，并在其上进行读取操作。</p><p>清单 10. 变量句柄使用示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandleTarget</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> count = <span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarHandleTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HandleTarget handleTarget = <span class="keyword">new</span> HandleTarget(); </span><br><span class="line">    <span class="keyword">private</span> VarHandle varHandle; </span><br><span class="line">    <span class="meta">@Before</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.handleTarget = <span class="keyword">new</span> HandleTarget(); </span><br><span class="line">        <span class="keyword">this</span>.varHandle = MethodHandles </span><br><span class="line">            .lookup() </span><br><span class="line">            .findVarHandle(HandleTarget.class, <span class="string">"count"</span>, <span class="keyword">int</span>.class); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        assertEquals(<span class="number">1</span>, <span class="keyword">this</span>.varHandle.get(<span class="keyword">this</span>.handleTarget)); </span><br><span class="line">        assertEquals(<span class="number">1</span>, <span class="keyword">this</span>.varHandle.getVolatile(<span class="keyword">this</span>.handleTarget)); </span><br><span class="line">        assertEquals(<span class="number">1</span>, <span class="keyword">this</span>.varHandle.getOpaque(<span class="keyword">this</span>.handleTarget)); </span><br><span class="line">        assertEquals(<span class="number">1</span>, <span class="keyword">this</span>.varHandle.getAcquire(<span class="keyword">this</span>.handleTarget)); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="改进方法句柄（Method-Handle）"><a href="#改进方法句柄（Method-Handle）" class="headerlink" title="改进方法句柄（Method Handle）"></a>改进方法句柄（Method Handle）</h1><p>类 java.lang.invoke.MethodHandles 增加了更多的静态方法来创建不同类型的方法句柄。</p><ul><li>arrayConstructor：创建指定类型的数组。</li><li>arrayLength：获取指定类型的数组的大小。</li><li>varHandleInvoker 和 varHandleExactInvoker：调用 VarHandle 中的访问模式方法。</li><li>zero：返回一个类型的默认值。</li><li>empty：返 回 MethodType 的返回值类型的默认值。</li><li>loop、countedLoop、iteratedLoop、whileLoop 和 doWhileLoop：创建不同类型的循环，包括 for 循环、while 循环 和 do-while 循环。</li><li>tryFinally：把对方法句柄的调用封装在 try-finally 语句中。<br>在 代码清单 11 中，我们使用 iteratedLoop 来创建一个遍历 S tring 类型迭代器的方法句柄，并计算所有字符串的长度的总和。</li></ul><p>清单 11. 循环方法句柄使用示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratedLoopTest</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">body</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> sum, <span class="keyword">final</span> String value)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> sum + value.length(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIteratedLoop</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; </span><br><span class="line">        <span class="keyword">final</span> MethodHandle iterator = MethodHandles.constant( </span><br><span class="line">            Iterator.class, </span><br><span class="line">            List.of(<span class="string">"a"</span>, <span class="string">"bc"</span>, <span class="string">"def"</span>).iterator()); </span><br><span class="line">        <span class="keyword">final</span> MethodHandle init = MethodHandles.zero(<span class="keyword">int</span>.class); </span><br><span class="line">        <span class="keyword">final</span> MethodHandle body = MethodHandles </span><br><span class="line">            .lookup() </span><br><span class="line">            .findStatic( </span><br><span class="line">                IteratedLoopTest.class, </span><br><span class="line">                <span class="string">"body"</span>, </span><br><span class="line">                MethodType.methodType( </span><br><span class="line">                    <span class="keyword">int</span>.class, </span><br><span class="line">                    <span class="keyword">int</span>.class, </span><br><span class="line">                    String.class)); </span><br><span class="line">        <span class="keyword">final</span> MethodHandle iteratedLoop = MethodHandles </span><br><span class="line">            .iteratedLoop(iterator, init, body); </span><br><span class="line">        assertEquals(<span class="number">6</span>, iteratedLoop.invoke()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>在并发方面，类 CompletableFuture 中增加了几个新的方法。completeAsync 使用一个异步任务来获取结果并完成该 CompletableFuture。orTimeout 在 CompletableFuture 没有在给定的超时时间之前完成，使用 TimeoutException 异常来完成 CompletableFuture。completeOnTimeout 与 o rTimeout 类似，只不过它在超时时使用给定的值来完成 CompletableFuture。新的 Thread.onSpinWai t 方法在当前线程需要使用忙循环来等待时，可以提高等待的效率。</p><h1 id="Nashorn"><a href="#Nashorn" class="headerlink" title="Nashorn"></a>Nashorn</h1><p>Nashorn 是 Java 8 中引入的新的 JavaScript 引擎。Java 9 中的 Nashorn 已经实现了一些 ECMAScript 6 规范中的新特性，包括模板字符串、二进制和八进制字面量、迭代器 和 for..of 循环和箭头函数等。Nashorn 还提供了 API 把 ECMAScript 源代码解析成抽象语法树（ Abstract Syntax Tree，AST ） ，可以用来对 ECMAScript 源代码进行分析。</p><h1 id="I-O-流新特性"><a href="#I-O-流新特性" class="headerlink" title="I/O 流新特性"></a>I/O 流新特性</h1><p>类 java.io.InputStream 中增加了新的方法来读取和复制 InputStream 中包含的数据。</p><ul><li>readAllBytes：读取 InputStream 中的所有剩余字节。</li><li>readNBytes： 从 InputStream 中读取指定数量的字节到数组中。</li><li>transferTo：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中 。<br>代码清单 12 中给出了这些新方法的使用示例。</li></ul><p>清单 12. InputStream 中的新方法使用示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInputStream</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream inputStream; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT = <span class="string">"Hello World"</span>; </span><br><span class="line">    <span class="meta">@Before</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.inputStream = </span><br><span class="line">            TestInputStream.class.getResourceAsStream(<span class="string">"/input.txt"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadAllBytes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">final</span> String content = <span class="keyword">new</span> String(<span class="keyword">this</span>.inputStream.readAllBytes()); </span><br><span class="line">        assertEquals(CONTENT, content); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadNBytes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>]; </span><br><span class="line">        <span class="keyword">this</span>.inputStream.readNBytes(data, <span class="number">0</span>, <span class="number">5</span>); </span><br><span class="line">        assertEquals(<span class="string">"Hello"</span>, <span class="keyword">new</span> String(data)); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransferTo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">final</span> ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream(); </span><br><span class="line">        <span class="keyword">this</span>.inputStream.transferTo(outputStream); </span><br><span class="line">        assertEquals(CONTENT, outputStream.toString()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ObjectInputFilter 可以对 ObjectInputStream 中 包含的内容进行检查，来确保其中包含的数据是合法的。可以使用 ObjectInputStream 的方法 setObjectInputFilter 来设置。ObjectInputFilter 在 进行检查时，可以检查如对象图的最大深度、对象引用的最大数量、输入流中的最大字节数和数组的最大长度等限制，也可以对包含的类的名称进行限制。</p><h1 id="改进应用安全性能"><a href="#改进应用安全性能" class="headerlink" title="改进应用安全性能"></a>改进应用安全性能</h1><p>Java 9 新增了 4 个 SHA- 3 哈希算法，SHA3-224、SHA3-256、SHA3-384 和 S HA3-512。另外也增加了通过 java.security.SecureRandom 生成使用 DRBG 算法的强随机数。 代码清单 13 中给出了 SHA-3 哈希算法的使用示例。</p><p>清单 13. SHA-3 哈希算法使用示例<br>清单 13. SHA-3 哈希算法使用示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Hex; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHA3</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123; </span><br><span class="line">        <span class="keyword">final</span> MessageDigest instance = MessageDigest.getInstance(<span class="string">"SHA3-224"</span>); </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] digest = instance.digest(<span class="string">""</span>.getBytes()); </span><br><span class="line">        System.out.println(Hex.encodeHexString(digest)); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h1><p>类 java.awt.Desktop 增加了新的与桌面进行互动的能力。可以使用 addAppEventListener 方法来添加不同应用事件的监听器，包括应用变为前台应用、应用隐藏或显示、屏幕和系统进入休眠与唤醒、以及 用户会话的开始和终止等。还可以在显示关于窗口和配置窗口时，添加自定义的逻辑。在用户要求退出应用时，可以通过自定义处理器来接受或拒绝退出请求。在 A WT 图像支持方面，可以在应用中使用多分辨率图像。</p><h1 id="统一-JVM-日志"><a href="#统一-JVM-日志" class="headerlink" title="统一 JVM 日志"></a>统一 JVM 日志</h1><p>Java 9 中 ，JVM 有了统一的日志记录系统，可以使用新的命令行选项-Xlog 来控制 JVM 上 所有组件的日志记录。该日志记录系统可以设置输出的日志消息的标签、级别、修饰符和输出目标等。Java 9 移除了在 Java 8 中 被废弃的垃圾回收器配置组合，同时 把 G1 设为默认的垃圾回收器实现。另外，CMS 垃圾回收器已经被声明为废弃。Java 9 也增加了很多可以通过 jcmd 调用的诊断命令。</p><h1 id="其他改动方面"><a href="#其他改动方面" class="headerlink" title="其他改动方面"></a>其他改动方面</h1><p>在 Java 语言本身，Java 9 允许在接口中使用私有方法。 在 try-with-resources 语句中可以使用 e ffectively-final 变量。 类 java.lang.StackWalker 可 以对线程的堆栈进行遍历，并且支持过滤和延迟访问。Java 9 把对 Unicode 的支持升级到了 8.0。ResourceBundle 加载属性文件的默认编码从 ISO-8859-1 改成了 UTF-8，不再需要使用 native2ascii 命 令来对属性文件进行额外处理。注解@Deprecated 也得到了增强，增加了 since 和 forRemoval 两 个属性，可以分别指定一个程序元素被废弃的版本，以及是否会在今后的版本中被删除。</p><p>在 代码清单 14 中，buildMessage 是接口 SayHi 中的私有方法，在默认方法 sayHi 中被使用。</p><p>清单 14. 接口中私有方法的示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SayHi</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">buildMessage</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(<span class="keyword">final</span> String message)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        sayHi(buildMessage()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>作为 Java 平台最新的一个重大更新，Java 9 中的很多新特性，尤其模块系统，对于 Java 应用的开发会产生深远的影响。本文对 Java 9 中的新特性做了概括的介绍，可以作为了解 Java 9 的基础。这些新特性的相信内容，可以通过官方文档来进一步的了解。</p><h1 id="参考资源-resources"><a href="#参考资源-resources" class="headerlink" title="参考资源 (resources )"></a>参考资源 (resources )</h1><p>参考 <a href="https://docs.oracle.com/javase/9/" target="_blank" rel="noopener">Java 9 官方文档</a> ，了解 Java 9 的更多内容 。<br>参考 <a href="https://docs.oracle.com/javase/9/docs/api/overview-summary.html" target="_blank" rel="noopener">Java 9 官方 Java 文档</a> ，了解 Java API 的细节。<br>了解 <a href="http://www.reactive-streams.org/" target="_blank" rel="noopener">反应式流规范</a> 的更多内容 。</p>]]></content>
    
    <summary type="html">
    
      Java 9 正式发布于 2017 年 9 月 21 日 。作为 Java8 之后 3 年半才发布的新版本，Java 9 带 来了很多重大的变化。其中最重要的改动是 Java 平台模块系统的引入。除此之外，还有一些新的特性。 本文对 Java9 中包含的新特性做了概括性的介绍，可以帮助你快速了解 Java 9。
    
    </summary>
    
      <category term="Java" scheme="http://localhost/categories/Java/"/>
    
      <category term="JDK9" scheme="http://localhost/categories/Java/JDK9/"/>
    
    
      <category term="Java" scheme="http://localhost/tags/Java/"/>
    
      <category term="JDK9" scheme="http://localhost/tags/JDK9/"/>
    
  </entry>
  
  <entry>
    <title>Spring Framework 5 中的新特性</title>
    <link href="http://localhost/2018/03/31/Java/spring/Spring%20Framework%205%20%E4%B8%AD%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://localhost/2018/03/31/Java/spring/Spring Framework 5 中的新特性/</id>
    <published>2018-03-31T06:55:48.316Z</published>
    <updated>2018-03-31T07:02:31.216Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 5 于 2017 年 9 月发布了通用版本 (GA)，它标志着自 2013 年 12 月以来第一个主要 Spring Framework 版本。它提供了一些人们期待已久的改进，还采用了一种全新的编程范例，以反应式宣言中陈述的反应式原则为基础。</p><p>这个版本是很长时间以来最令人兴奋的 Spring Framework 版本。Spring 5 兼容 Java™8 和 JDK 9，它集成了反应式流，以便提供一种颠覆性方法来实现端点和 Web 应用程序开发。</p><p>诚然，反应式编程不仅是此版本的主题，还是令许多开发人员激动不已的重大特性。人们对能够针对负载波动进行无缝扩展的灾备和响应式服务的需求在不断增加，Spring 5 很好地满足了这一需求。</p><p>本文将全面介绍 Spring 5。我将介绍 Java SE 8 和 Java EE 7 API 的基准升级、Spring 5 的新反应式编程模型、HTTP/2 支持，以及 Spring 通过 Kotlin 对函数式编程的全面支持。我还会简要介绍测试和性能增强，最后介绍对 Spring 核心和容器的一般性修订。</p><h1 id="升级到-Java-SE-8-和-Java-EE-7"><a href="#升级到-Java-SE-8-和-Java-EE-7" class="headerlink" title="升级到 Java SE 8 和 Java EE 7"></a>升级到 Java SE 8 和 Java EE 7</h1><p>直到现在，Spring Framework 仍支持一些弃用的 Java 版本，但 Spring 5 已从旧包袱中解放出来。为了充分利用 Java 8 特性，它的代码库已进行了改进，而且该框架要求将 Java 8 作为最低的 JDK 版本。</p><p>Spring 5 在类路径（和模块路径）上完全兼容 Java 9，而且它通过了 JDK 9 测试套件的测试。对 Java 9 爱好者而言，这是一条好消息，因为在 Java 9 发布后，Spring 能立即使用它。</p><p>在 API 级别上，Spring 5 兼容 Java EE 8 技术，满足对 Servlet 4.0、Bean Validation 2.0 和全新的 JSON Binding API 的需求。对 Java EE API 的最低要求为 V7，该版本引入了针对 Servlet、JPA 和 Bean Validation API 的次要版本。</p><h1 id="反应式编程模型"><a href="#反应式编程模型" class="headerlink" title="反应式编程模型"></a>反应式编程模型</h1><p>Spring 5 最令人兴奋的新特性是它的反应式编程模型。Spring 5 Framework 基于一种反应式基础而构建，而且是完全异步和非阻塞的。只需少量的线程，新的事件循环执行模型就可以垂直扩展。</p><p>该框架采用反应式流来提供在反应式组件中传播负压的机制。负压是一个确保来自多个生产者的数据不会让使用者不堪重负的概念。</p><p>Spring WebFlux 是 Spring 5 的反应式核心，它为开发人员提供了两种为 Spring Web 编程而设计的编程模型：一种基于注解的模型和 Functional Web Framework (WebFlux.fn)。</p><p>基于注解的模型是 Spring WebMVC 的现代替代方案，该模型基于反应式基础而构建，而 Functional Web Framework 是基于 @Controller 注解的编程模型的替代方案。这些模型都通过同一种反应式基础来运行，后者调整非阻塞 HTTP 来适应反应式流 API。</p><h1 id="使用注解进行编程"><a href="#使用注解进行编程" class="headerlink" title="使用注解进行编程"></a>使用注解进行编程</h1><p>WebMVC 程序员应该对 Spring 5 的基于注解的编程模型非常熟悉。Spring 5 调整了 WebMVC 的 @Controller 编程模型，采用了相同的注解。</p><p>在清单 1 中，BookController 类提供了两个方法，分别响应针对某个图书列表的 HTTP 请求，以及针对具有给定 id 的图书的 HTTP 请求。请注意 resource 方法返回的对象（Mono 和 Flux）。这些对象是实现反应式流规范中的 Publisher 接口的反应式类型。它们的职责是处理数据流。Mono 对象处理一个仅含 1 个元素的流，而 Flux 表示一个包含 N 个元素的流。</p><p>清单 1. 反应式控制器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line">    <span class="function">Flux&lt;Book&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.repository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/book/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Mono&lt;Book&gt; <span class="title">findById</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.repository.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Plumbing code omitted for brevity</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是针对 Spring Web 编程的注解。现在我们使用函数式 Web 框架来解决同一个问题。</p><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p>Spring 5 的新函数式方法将请求委托给处理函数，这些函数接受一个服务器请求实例并返回一种反应式类型。清单 2 演示了这一过程，其中 listBook 和 getBook 方法类似于清单 1 中的功能。</p><p>清单 2. 清单 2.BookHandler 函数类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookHandler</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">listBooks</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok()</span><br><span class="line">            .contentType(APPLICATION_JSON)</span><br><span class="line">            .body(repository.allPeople(), Book.class);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">getBook</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository.getBook(request.pathVariable(<span class="string">"id"</span>))</span><br><span class="line">            .then(book -&gt; ServerResponse.ok()</span><br><span class="line">            .contentType(APPLICATION_JSON)</span><br><span class="line">            .body(fromObject(book)))</span><br><span class="line">            .otherwiseIfEmpty(ServerResponse.notFound().build());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Plumbing code omitted for brevity</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过路由函数来匹配 HTTP 请求谓词与媒体类型，将客户端请求路由到处理函数。清单 3 展示了图书资源端点 URI 将调用委托给合适的处理函数：</p><p>清单 3. Router 函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BookHandler handler = <span class="keyword">new</span> BookHandler();</span><br><span class="line"> </span><br><span class="line">RouterFunction&lt;ServerResponse&gt; personRoute =</span><br><span class="line">    route(</span><br><span class="line">        GET(<span class="string">"/books/&#123;id&#125;"</span>)</span><br><span class="line">        .and(accept(APPLICATION_JSON)), handler::getBook)</span><br><span class="line">        .andRoute(</span><br><span class="line">    GET(<span class="string">"/books"</span>)</span><br><span class="line">        .and(accept(APPLICATION_JSON)), handler::listBooks);</span><br></pre></td></tr></table></figure></p><p>这些示例背后的数据存储库也支持完整的反应式体验，该体验是通过 Spring Data 对反应式 Couchbase、Reactive MongoDB 和 Cassandra 的支持来实现的。</p><h1 id="使用-REST-端点执行反应式编程"><a href="#使用-REST-端点执行反应式编程" class="headerlink" title="使用 REST 端点执行反应式编程"></a>使用 REST 端点执行反应式编程</h1><p>新的编程模型脱离了传统的 Spring WebMVC 模型，引入了一些很不错的新特性。</p><p>举例来说，WebFlux 模块为 RestTemplate 提供了一种完全非阻塞、反应式的替代方案，名为 WebClient。清单 4 创建了一个 WebClient，并调用 books 端点来请求一本给定 id 为 1234 的图书。</p><p>清单 4. 通过 WebClient 调用 REST 端点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mono&lt;Book&gt; book = WebClient.create(<span class="string">"http://localhost:8080"</span>)</span><br><span class="line">      .get()</span><br><span class="line">      .url(<span class="string">"/books/&#123;id&#125;"</span>, <span class="number">1234</span>)</span><br><span class="line">      .accept(APPLICATION_JSON)</span><br><span class="line">      .exchange(request)</span><br><span class="line">      .then(response -&gt; response.bodyToMono(Book.class));</span><br></pre></td></tr></table></figure></p><h1 id="HTTP-2-支持"><a href="#HTTP-2-支持" class="headerlink" title="HTTP/2 支持"></a>HTTP/2 支持</h1><blockquote><p><strong>HTTP/2 幕后原理</strong>：要了解 HTTP/2 如何提高传输性能，减少延迟，并帮助提高应用程序吞吐量，从而提供经过改进的丰富 Web 体验。</p></blockquote><p>Spring Framework 5.0 将提供专门的 HTTP/2 特性支持，还支持人们期望出现在 JDK 9 中的新 HTTP 客户端。尽管 HTTP/2 的服务器推送功能已通过 Jetty servlet 引擎的 ServerPushFilter 类向 Spring 开发人员公开了很长一段时间，但如果发现 Spring 5 中开箱即用地提供了 HTTP/2 性能增强，Web 优化者们一定会为此欢呼雀跃。</p><p>Java EE Servlet 规范预计将于 2017 年第 4 季度发布，Servlet 4.0 支持将在 Spring 5.1 中提供。到那时，HTTP/2 特性将由 Tomcat 9.0、Jetty 9.3 和 Undertow 1.4 原生提供。</p><h1 id="Kotlin-和-Spring-WebFlux"><a href="#Kotlin-和-Spring-WebFlux" class="headerlink" title="Kotlin 和 Spring WebFlux"></a>Kotlin 和 Spring WebFlux</h1><p>Kotlin 是一种来自 JetBrains 的面向对象的语言，它支持函数式编程。它的主要优势之一是与 Java 有非常高的互操作性。通过引入对 Kotlin 的专门支持，Spring 在 V5 中全面吸纳了这一优势。它的函数式编程风格与 Spring WebFlux 模块完美匹配，它的新路由 DSL 利用了函数式 Web 框架以及干净且符合语言习惯的代码。可以像清单 5 中这样简单地表达端点路由：</p><p>清单 5. Kotlin 的用于定义端点的路由 DSL<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">fun <span class="title">apiRouter</span><span class="params">()</span> </span>= router &#123;</span><br><span class="line">    (accept(APPLICATION_JSON) and <span class="string">"/api"</span>).nest &#123;</span><br><span class="line">        <span class="string">"/book"</span>.nest &#123;</span><br><span class="line">            GET(<span class="string">"/"</span>, bookHandler::findAll)</span><br><span class="line">            GET(<span class="string">"/&#123;id&#125;"</span>, bookHandler::findOne)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">"/video"</span>.nest &#123;</span><br><span class="line">            GET(<span class="string">"/"</span>, videoHandler::findAll)</span><br><span class="line">            GET(<span class="string">"/&#123;genre&#125;"</span>, videoHandler::findByGenre)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用 Kotlin 1.1.4+ 时，还添加了对 Kotlin 的不可变类的支持（通过带默认值的可选参数），以及对完全支持 null 的 API 的支持。</p><h1 id="使用-Lambda-表达式注册-bean"><a href="#使用-Lambda-表达式注册-bean" class="headerlink" title="使用 Lambda 表达式注册 bean"></a>使用 Lambda 表达式注册 bean</h1><p>作为传统 XML 和 JavaConfig 的替代方案，现在可以使用 lambda 表达式注册 Spring bean，使 bean 可以实际注册为提供者。清单 6 使用 lambda 表达式注册了一个 Book bean。</p><p>清单 6. 将 Bean 注册为提供者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">context.registerBean(Book.class, () -&gt; <span class="keyword">new</span> </span><br><span class="line">              Book(context.getBean(Author.class))</span><br><span class="line">        );</span><br></pre></td></tr></table></figure></p><h1 id="Spring-WebMVC-支持最新的-API"><a href="#Spring-WebMVC-支持最新的-API" class="headerlink" title="Spring WebMVC 支持最新的 API"></a>Spring WebMVC 支持最新的 API</h1><p>全新的 WebFlux 模块提供了许多新的、令人兴奋的功能，但 Spring 5 也迎合了愿意继续使用 Spring MVC 的开发人员的需求。Spring 5 中更新了模型-视图-控制器框架，以兼容 WebFlux 和最新版的 Jackson 2.9 和 Protobuf 3.0，甚至包括对新的 Java EE 8 JSON-Binding API 的支持。</p><p>除了 HTTP/2 特性的基础服务器实现之外，Spring WebMVC 还通过 MVC 控制器方法的一个参数来支持 Servlet 4.0 的 PushBuilder。最后，WebMVC 全面支持 Reactor 3.1 的 Flux 和 Mono 对象，以及 RxJava 1.3 和 2.1，它们被视为来自 MVC 控制器方法的返回值。这项支持的最终目的是支持 Spring Data 中的新的反应式 WebClient 和反应式存储库。</p><h1 id="使用-JUnit-5-执行条件和并发测试"><a href="#使用-JUnit-5-执行条件和并发测试" class="headerlink" title="使用 JUnit 5 执行条件和并发测试"></a>使用 JUnit 5 执行条件和并发测试</h1><blockquote><p><strong>JUnit 和 Spring 5</strong>：Spring 5 全面接纳了函数式范例，并支持 JUnit 5 及其新的函数式测试风格。还提供了对 JUnit 4 的向后兼容性，以确保不会破坏旧代码。</p></blockquote><p>Spring 5 的测试套件通过多种方式得到了增强，但最明显的是它对 JUnit 5 的支持。现在可以在您的单元测试中利用 Java 8 中提供的函数式编程特性。清单 7 演示了这一支持：</p><p>清单 7. 清单 7.JUnit 5 全面接纳了 Java 8 流和 lambda 表达式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">givenStreamOfInts_SumShouldBeMoreThanFive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertTrue(Stream.of(<span class="number">20</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line">      .stream()</span><br><span class="line">      .mapToInt(i -&gt; i)</span><br><span class="line">      .sum() &gt; <span class="number">110</span>, () -&gt; <span class="string">"Total should be more than 100"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>迁移到 JUnit 5</strong>：如果您对升级到 JUnit 5 持观望态度，Steve Perry 的分两部分的深入剖析教程将说服您冒险尝试。</p></blockquote><p>Spring 5 继承了 JUnit 5 在 Spring TestContext Framework 内实现多个扩展 API 的灵活性。举例而言，开发人员可以使用 JUnit 5 的条件测试执行注解 @EnabledIf 和 @DisabledIf 来自动计算一个 SpEL (Spring Expression Language) 表达式，并适当地启用或禁用测试。借助这些注解，Spring 5 支持以前很难实现的复杂的条件测试方案。Spring TextContext Framework 现在能够并发执行测试。</p><h1 id="使用-Spring-WebFlux-执行集成测试"><a href="#使用-Spring-WebFlux-执行集成测试" class="headerlink" title="使用 Spring WebFlux 执行集成测试"></a>使用 Spring WebFlux 执行集成测试</h1><p>Spring Test 现在包含一个 WebTestClient，后者支持对 Spring WebFlux 服务器端点执行集成测试。WebTestClient 使用模拟请求和响应来避免耗尽服务器资源，并能直接绑定到 WebFlux 服务器基础架构。</p><p>WebTestClient 可绑定到真实的服务器，或者使用控制器或函数。在清单 8 中，WebTestClient 被绑定到 localhost：</p><p>清单 8. 绑定到 localhost 的 WebTestClient<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WebTestClient testClient = WebTestClient</span><br><span class="line">  .bindToServer()</span><br><span class="line">  .baseUrl(<span class="string">"http://localhost:8080"</span>)</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure></p><p>在清单 9 中，测试了 RouterFunction：</p><p>清单 9. 将 WebTestClient 绑定到 RouterFunction<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RouterFunction bookRouter = RouterFunctions.route(</span><br><span class="line">  RequestPredicates.GET(<span class="string">"/books"</span>),</span><br><span class="line">  request -&gt; ServerResponse.ok().build()</span><br><span class="line">);</span><br><span class="line">  </span><br><span class="line">WebTestClient</span><br><span class="line">  .bindToRouterFunction(bookRouter)</span><br><span class="line">  .build().get().uri(<span class="string">"/books"</span>)</span><br><span class="line">  .exchange()</span><br><span class="line">  .expectStatus().isOk()</span><br><span class="line">  .expectBody().isEmpty();</span><br></pre></td></tr></table></figure></p><h1 id="包清理和弃用"><a href="#包清理和弃用" class="headerlink" title="包清理和弃用"></a>包清理和弃用</h1><p>Spring 5 中止了对一些过时 API 的支持。遭此厄运的还有 Hibernate 3 和 4，为了支持 Hibernate 5，它们遭到了弃用。另外，对 Portlet、Velocity、JasperReports、XMLBeans、JDO 和 Guava 的支持也已中止。</p><p>包级别上的清理工作仍在继续：Spring 5 不再支持 beans.factory.access、jdbc.support.nativejdbc、mock.staticmock（来自 spring-aspects 模块）或 web.view.tiles2M。Tiles 3 现在是 Spring 的最低要求。</p><h1 id="对-Spring-核心和容器的一般更新"><a href="#对-Spring-核心和容器的一般更新" class="headerlink" title="对 Spring 核心和容器的一般更新"></a>对 Spring 核心和容器的一般更新</h1><p>Spring Framework 5 改进了扫描和识别组件的方法，使大型项目的性能得到提升。目前，扫描是在编译时执行的，而且向 META-INF/spring.components 文件中的索引文件添加了组件坐标。该索引是通过一个为项目定义的特定于平台的应用程序构建任务来生成的。</p><p>标有来自 javax 包的注解的组件会添加到索引中，任何带 @Index 注解的类或接口都会添加到索引中。Spring 的传统类路径扫描方式没有删除，而是保留为一种后备选择。有许多针对大型代码库的明显性能优势，而托管许多 Spring 项目的服务器也会缩短启动时间。</p><p>Spring 5 还添加了对 @Nullable 的支持，后者可用于指示可选的注入点。使用者现在必须准备接受 null 值。此外，还可以使用此注解来标记可以为 null 的参数、字段和返回值。@Nullable 主要用于 IntelliJ IDEA 等 IDE，但也可用于 Eclipse 和 FindBugs，它使得在编译时处理 null 值变得更方便，而无需在运行时发送 NullPointerExceptions。</p><p>Spring Logging 还提升了性能，自带开箱即用的 Commons Logging 桥接器。现在已通过资源抽象支持防御性编程，为 getFile 访问提供了 isFile 指示器。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>Spring 5 的首要特性是新的反应式编程模型，这代表着对提供可无缝扩展、基于 Spring 的响应式服务的重大保障。随着人们对 Spring 5 的采用，开发人员有望看到反应式编程将会成为使用 Java 语言的 Web 和企业应用程序开发的未来发展道路。</p><p>未来的 Spring Framework 版本将继续反映这一承诺，因为 Spring Security、Spring Data 和 Spring Integration 有望采用反应式编程的特征和优势。</p><p>总之，Spring 5 代表着一次大受 Spring 开发人员欢迎的范例转变，同时也为其他框架指出了一条发展之路。</p>]]></content>
    
    <summary type="html">
    
      Spring 5 如何利用 Java 8 的函数式语法和一种新的反应式编程模型
    
    </summary>
    
      <category term="Java" scheme="http://localhost/categories/Java/"/>
    
      <category term="Spring" scheme="http://localhost/categories/Java/Spring/"/>
    
    
      <category term="Java" scheme="http://localhost/tags/Java/"/>
    
      <category term="Spring" scheme="http://localhost/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>通过实例理解 JDK8 的 CompletableFuture</title>
    <link href="http://localhost/2018/03/31/Java/jdk8/%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E7%90%86%E8%A7%A3%20JDK8%20%E7%9A%84%20CompletableFuture/"/>
    <id>http://localhost/2018/03/31/Java/jdk8/通过实例理解 JDK8 的 CompletableFuture/</id>
    <published>2018-03-31T06:26:50.225Z</published>
    <updated>2018-03-31T06:55:28.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java 5 并发库主要关注于异步任务的处理，它采用了这样一种模式，producer 线程创建任务并且利用阻塞队列将其传递给任务的 consumer。这种模型在 Java 7 和 8 中进一步发展，并且开始支持另外一种风格的任务执行，那就是将任务的数据集分解为子集，每个子集都可以由独立且同质的子任务来负责处理。</p><p>这种风格的基础库也就是 fork/join 框架，它允许程序员规定数据集该如何进行分割，并且支持将子任务提交到默认的标准线程池中，也就是 “通用的”ForkJoinPool。Java 8 中，fork/join 并行功能借助并行流的机制变得更加具有可用性。但是，不是所有的问题都适合这种风格的并行处理：所处理的元素必须是独立的，数据集要足够大，并且在并行加速方面，每个元素的处理成本要足够高，这样才能补偿建立 fork/join 框架所消耗的成本。CompletableFuture 类则是 Java 8 在并行流方面的创新。</p><h1 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h1><h2 id="异步计算"><a href="#异步计算" class="headerlink" title="异步计算"></a>异步计算</h2><p>所谓异步调用其实就是实现一个可无需等待被调用函数的返回值而让操作继续运行的方法。在 Java 语言中，简单的讲就是另启一个线程来完成调用中的部分计算，使调用继续运行或返回，而不需要等待计算结果。但调用者仍需要取线程的计算结果。</p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数比较通用的解释是，它是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用为调用它所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外一方调用的，用于对该事件或条件进行响应。</p><p>回调函数的机制：</p><ol><li><p>定义一个回调函数；</p></li><li><p>提供函数实现的一方在初始化时候，将回调函数的函数指针注册给调用者；</p></li><li><p>当特定的事件或条件发生的时候，调用者使用函数指针调用回调函数对事件进行处理。</p></li></ol><p>回调函数通常与原始调用者处于同一层次，如图 1 所示：</p><p>图 1 回调函数示例图<br><img src="https://www.ibm.com/developerworks/cn/java/j-cf-of-jdk8/image001.png" alt=""></p><h2 id="Future-接口介绍"><a href="#Future-接口介绍" class="headerlink" title="Future 接口介绍"></a>Future 接口介绍</h2><p>JDK5 新增了 Future 接口，用于描述一个异步计算的结果。虽然 Future 以及相关使用方法提供了异步执行任务的能力，但是对于结果的获取却是很不方便，只能通过阻塞或者轮询的方式得到任务的结果。阻塞的方式显然和我们的异步编程的初衷相违背，轮询的方式又会耗费无谓的 CPU 资源，而且也不能及时地得到计算结果，为什么不能用观察者设计模式呢？即当计算结果完成及时通知监听者。</p><p>有一些开源框架实现了我们的设想，例如 Netty 的 ChannelFuture 类扩展了 Future 接口，通过提供 addListener 方法实现支持回调方式的异步编程。Netty 中所有的 I/O 操作都是异步的, 这意味着任何的 I/O 调用都将立即返回，而不保证这些被请求的 I/O 操作在调用结束的时候已经完成。取而代之地，你会得到一个返回的 ChannelFuture 实例，这个实例将给你一些关于 I/O 操作结果或者状态的信息。当一个 I/O 操作开始的时候，一个新的 Future 对象就会被创建。在开始的时候，新的 Future 是未完成的状态－－它既非成功、失败，也非被取消，因为 I/O 操作还没有结束。如果 I/O 操作以成功、失败或者被取消中的任何一种状态结束了，那么这个 Future 将会被标记为已完成，并包含更多详细的信息（例如：失败的原因）。请注意，即使是失败和被取消的状态，也是属于已完成的状态。阻塞方式的示例代码如代码 1 所示。</p><p>代码 1 阻塞方式示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start the connection attempt.</span></span><br><span class="line">ChannelFuture Future = bootstrap.connect(<span class="keyword">new</span> InetSocketAddress(host, port));</span><br><span class="line"><span class="comment">// Wait until the connection is closed or the connection attempt fails.</span></span><br><span class="line">Future.getChannel().getCloseFuture().awaitUninterruptibly();</span><br><span class="line"><span class="comment">// Shut down thread pools to exit.</span></span><br><span class="line">bootstrap.releaseExternalResources();</span><br></pre></td></tr></table></figure></p><p>上面代码使用的是 awaitUninterruptibly 方法，源代码如代码 2 所示。</p><p>代码 2 awaitUninterruptibly 源代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">publicChannelFutureawaitUninterruptibly() &#123;</span><br><span class="line">    <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 循环等待到完成</span></span><br><span class="line">        <span class="keyword">while</span> (!done) &#123;</span><br><span class="line">            checkDeadLock();</span><br><span class="line">            waiters++;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// 不允许中断</span></span><br><span class="line">            interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            waiters--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码 3 异步非阻塞方式示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start the connection attempt.</span></span><br><span class="line">ChannelFuture Future = bootstrap.connect(<span class="keyword">new</span> InetSocketAddress(host, port));</span><br><span class="line">Future.addListener(<span class="keyword">new</span> ChannelFutureListener()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(<span class="keyword">final</span> ChannelFuture Future)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">        </span>&#123;           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Shut down thread pools to exit. </span></span><br><span class="line">bootstrap.releaseExternalResources();</span><br></pre></td></tr></table></figure></p><p>可以明显的看出，在异步模式下，上面这段代码没有阻塞，在执行 connect 操作后直接执行到 printTime(“异步时间：”)，随后 connect 完成，Future 的监听函数输出 connect 操作完成。</p><p>非阻塞则是添加监听类 ChannelFutureListener，通过覆盖 ChannelFutureListener 的 operationComplete 执行业务逻辑。</p><p>代码 4 异步非阻塞方式示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(<span class="keyword">final</span> ChannelFutureListener listener)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (listener == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"listener"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    booleannotifyNow = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (done) &#123;</span><br><span class="line">        notifyNow = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (firstListener == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//listener 链表头</span></span><br><span class="line">        firstListener = listener;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (otherListeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">        otherListeners = <span class="keyword">new</span> ArrayList&lt;ChannelFutureListener&gt;(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加到 listener 链表中，以便操作完成后遍历操作</span></span><br><span class="line">        otherListeners.add(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> (notifyNow) &#123;</span><br><span class="line">        <span class="comment">// 通知 listener 进行处理</span></span><br><span class="line">        notifyListener(listener);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这部分代码的逻辑很简单，就是注册回调函数，当操作完成后自动调用回调函数，就达到了异步的效果。</p><h2 id="CompletableFuture-类介绍"><a href="#CompletableFuture-类介绍" class="headerlink" title="CompletableFuture 类介绍"></a>CompletableFuture 类介绍</h2><p>Java 8 中, 新增加了一个包含 50 个方法左右的类 –CompletableFuture，它提供了非常强大的 Future 的扩展功能，可以帮助我们简化异步编程的复杂性，并且提供了函数式编程的能力，可以通过回调的方式处理计算结果，也提供了转换和组合 CompletableFuture 的方法。</p><p>对于阻塞或者轮询方式，依然可以通过 CompletableFuture 类的 CompletionStage 和 Future 接口方式支持。</p><p>CompletableFuture 类声明了 CompletionStage 接口，CompletionStage 接口实际上提供了同步或异步运行计算的舞台，所以我们可以通过实现多个 CompletionStage 命令，并且将这些命令串联在一起的方式实现多个命令之间的触发。</p><p>我们可以通过 CompletableFuture.supplyAsync(this::sendMsg); 这么一行代码创建一个简单的异步计算。在这行代码中，supplyAsync 支持异步地执行我们指定的方法，这个例子中的异步执行方法是 sendMsg。当然，我们也可以使用 Executor 执行异步程序，默认是 ForkJoinPool.commonPool()。</p><p>我们也可以在异步计算结束之后指定回调函数，例如 CompletableFuture.supplyAsync(this::sendMsg) .thenAccept(this::notify); 这行代码中的 thenAccept 被用于增加回调函数，在我们的示例中 notify 就成了异步计算的消费者，它会处理计算结果。</p><h1 id="CompletableFuture-类使用示例"><a href="#CompletableFuture-类使用示例" class="headerlink" title="CompletableFuture 类使用示例"></a>CompletableFuture 类使用示例</h1><p>接下来我们通过 20 个示例看看 CompletableFuture 类具体怎么用。</p><h2 id="创建完整的-CompletableFuture"><a href="#创建完整的-CompletableFuture" class="headerlink" title="创建完整的 CompletableFuture"></a>创建完整的 CompletableFuture</h2><p>代码 5 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completedFutureExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CompletableFuture&lt;String&gt;cf = CompletableFuture.completedFuture(<span class="string">"message"</span>);</span><br><span class="line">    assertTrue(cf.isDone());</span><br><span class="line">    assertEquals(<span class="string">"message"</span>, cf.getNow(<span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码一般来说被用于启动异步计算，getNow(null) 返回计算结果或者 null。</p><h2 id="运行简单的异步场景"><a href="#运行简单的异步场景" class="headerlink" title="运行简单的异步场景"></a>运行简单的异步场景</h2><p>代码 6 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runAsyncExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CompletableFuture&lt;Void&gt;cf = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        assertTrue(Thread.currentThread().isDaemon());</span><br><span class="line">        randomSleep();</span><br><span class="line">    &#125;);</span><br><span class="line">    assertFalse(cf.isDone());</span><br><span class="line">    sleepEnough();</span><br><span class="line">    assertTrue(cf.isDone());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码的关键点有两点：</p><ol><li>CompletableFuture 是异步执行方式；</li><li>使用 ForkJoinPool 实现异步执行，这种方式使用了 daemon 线程执行 Runnable 任务。</li></ol><h2 id="同步执行动作示例"><a href="#同步执行动作示例" class="headerlink" title="同步执行动作示例"></a>同步执行动作示例</h2><p>代码 7 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thenApplyExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CompletableFuture&lt;String&gt;cf = CompletableFuture.completedFuture(<span class="string">"message"</span>).thenApply(s -&gt; &#123;</span><br><span class="line">    assertFalse(Thread.currentThread().isDaemon());</span><br><span class="line">    returns.toUpperCase();</span><br><span class="line">    &#125;);</span><br><span class="line">    assertEquals(<span class="string">"MESSAGE"</span>, cf.getNow(<span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码在异步计算正常完成的前提下将执行动作（此处为转换成大写字母）。</p><h2 id="异步执行动作示例"><a href="#异步执行动作示例" class="headerlink" title="异步执行动作示例"></a>异步执行动作示例</h2><p>相较前一个示例的同步方式，以下代码实现了异步方式，仅仅是在上面的代码里的多个方法增加 “Async” 这样的关键字。</p><p>代码 8 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thenApplyAsyncExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CompletableFuture&lt;String&gt;cf = CompletableFuture.completedFuture(<span class="string">"message"</span>).thenApplyAsync(s -&gt; &#123;</span><br><span class="line">    assertTrue(Thread.currentThread().isDaemon());</span><br><span class="line">    randomSleep();</span><br><span class="line">    returns.toUpperCase();</span><br><span class="line">    &#125;);</span><br><span class="line">    assertNull(cf.getNow(<span class="keyword">null</span>));</span><br><span class="line">    assertEquals(<span class="string">"MESSAGE"</span>, cf.join());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用固定的线程池完成异步执行动作示例"><a href="#使用固定的线程池完成异步执行动作示例" class="headerlink" title="使用固定的线程池完成异步执行动作示例"></a>使用固定的线程池完成异步执行动作示例</h2><p>我们可以通过使用线程池方式来管理异步动作申请，以下代码基于固定的线程池，也是做一个大写字母转换动作，代码如代码 9 所示。</p><p>代码 9 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">staticExecutorService executor = Executors.newFixedThreadPool(<span class="number">3</span>, <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(runnable, <span class="string">"custom-executor-"</span> + count++);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thenApplyAsyncWithExecutorExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            CompletableFuture&lt;String&gt;cf = CompletableFuture.completedFuture(<span class="string">"message"</span>).thenApplyAsync(s -&gt; &#123;</span><br><span class="line">            assertTrue(Thread.currentThread().getName().startsWith(<span class="string">"custom-executor-"</span>));</span><br><span class="line">            assertFalse(Thread.currentThread().isDaemon());</span><br><span class="line">            randomSleep();</span><br><span class="line">            returns.toUpperCase();</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        assertNull(cf.getNow(<span class="keyword">null</span>));</span><br><span class="line">        assertEquals(<span class="string">"MESSAGE"</span>, cf.join());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="作为消费者消费计算结果示例"><a href="#作为消费者消费计算结果示例" class="headerlink" title="作为消费者消费计算结果示例"></a>作为消费者消费计算结果示例</h2><p>假设我们本次计算只需要前一次的计算结果，而不需要返回本次计算结果，那就有点类似于生产者（前一次计算）- 消费者（本次计算）模式了，示例代码如代码 10 所示。</p><p>代码 10 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thenAcceptExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    CompletableFuture.completedFuture(<span class="string">"thenAccept message"</span>)</span><br><span class="line">    .thenAccept(s -&gt;result.append(s));</span><br><span class="line">    assertTrue(<span class="string">"Result was empty"</span>, result.length() &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>消费者是同步执行的，所以不需要在 CompletableFuture 里对结果进行合并。</p><h2 id="异步消费示例"><a href="#异步消费示例" class="headerlink" title="异步消费示例"></a>异步消费示例</h2><p>相较于前一个示例的同步方式，我们也对应有异步方式，代码如代码 11 所示。</p><p>代码 11 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thenAcceptAsyncExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    CompletableFuture&lt;Void&gt;cf = CompletableFuture.completedFuture(<span class="string">"thenAcceptAsync message"</span>)</span><br><span class="line">    .thenAcceptAsync(s -&gt;result.append(s));</span><br><span class="line">    cf.join();</span><br><span class="line">    assertTrue(<span class="string">"Result was empty"</span>, result.length() &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="计算过程中的异常示例"><a href="#计算过程中的异常示例" class="headerlink" title="计算过程中的异常示例"></a>计算过程中的异常示例</h2><p>接下来介绍异步操作过程中的异常情况处理。下面这个示例中我们会在字符转换异步请求中刻意延迟 1 秒钟，然后才会提交到 ForkJoinPool 里面去执行。</p><p>代码 12 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completeExceptionallyExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CompletableFuture&lt;String&gt;cf = CompletableFuture.completedFuture(<span class="string">"message"</span>).thenApplyAsync(String::toUpperCase,</span><br><span class="line">        CompletableFuture.delayedExecutor(<span class="number">1</span>, TimeUnit.SECONDS));</span><br><span class="line">        CompletableFuture&lt;String&gt;exceptionHandler = cf.handle((s, th) -&gt; &#123; <span class="keyword">return</span> (th != <span class="keyword">null</span>) ? <span class="string">"message upon cancel"</span> : <span class="string">""</span>; &#125;);</span><br><span class="line">        cf.completeExceptionally(<span class="keyword">new</span> RuntimeException(<span class="string">"completed exceptionally"</span>));</span><br><span class="line">        assertTrue(<span class="string">"Was not completed exceptionally"</span>, cf.isCompletedExceptionally());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        cf.join();</span><br><span class="line">        fail(<span class="string">"Should have thrown an exception"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(CompletionException ex) &#123; <span class="comment">// just for testing</span></span><br><span class="line">            assertEquals(<span class="string">"completed exceptionally"</span>, ex.getCause().getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">     assertEquals(<span class="string">"message upon cancel"</span>, exceptionHandler.join());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>示例代码中，首先我们创建一个 CompletableFuture（计算完毕），然后调用 thenApplyAsync 返回一个新的 CompletableFuture，接着通过使用 delayedExecutor(timeout, timeUnit) 方法延迟 1 秒钟执行。然后我们创建一个 handler（exceptionHandler），它会处理异常，返回另一个字符串 “message upon cancel”。接下来进入 join() 方法，执行大写转换操作，并且抛出 CompletionException 异常。</p><h2 id="取消计算任务"><a href="#取消计算任务" class="headerlink" title="取消计算任务"></a>取消计算任务</h2><p>与前面一个异常处理的示例类似，我们可以通过调用 cancel(boolean mayInterruptIfRunning) 方法取消计算任务。此外，cancel() 方法与 completeExceptionally(new CancellationException()) 等价。</p><p>代码 13 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cancelExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CompletableFuture cf = CompletableFuture.completedFuture(<span class="string">"message"</span>).thenApplyAsync(String::toUpperCase,</span><br><span class="line">    CompletableFuture.delayedExecutor(<span class="number">1</span>, TimeUnit.SECONDS));</span><br><span class="line">    CompletableFuture cf2 = cf.exceptionally(throwable -&gt; <span class="string">"canceled message"</span>);</span><br><span class="line">    assertTrue(<span class="string">"Was not canceled"</span>, cf.cancel(<span class="keyword">true</span>));</span><br><span class="line">    assertTrue(<span class="string">"Was not completed exceptionally"</span>, cf.isCompletedExceptionally());</span><br><span class="line">    assertEquals(<span class="string">"canceled message"</span>, cf2.join());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="一个-CompletableFuture-VS-两个异步计算"><a href="#一个-CompletableFuture-VS-两个异步计算" class="headerlink" title="一个 CompletableFuture VS 两个异步计算"></a>一个 CompletableFuture VS 两个异步计算</h2><p>我们可以创建一个 CompletableFuture 接收两个异步计算的结果，下面代码首先创建了一个 String 对象，接下来分别创建了两个 CompletableFuture 对象 cf1 和 cf2，cf2 通过调用 applyToEither 方法实现我们的需求。</p><p>代码 14 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applyToEitherExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String original = <span class="string">"Message"</span>;</span><br><span class="line">    CompletableFuture cf1 = CompletableFuture.completedFuture(original)</span><br><span class="line">    .thenApplyAsync(s -&gt; delayedUpperCase(s));</span><br><span class="line">    CompletableFuture cf2 = cf1.applyToEither(</span><br><span class="line">    CompletableFuture.completedFuture(original).thenApplyAsync(s -&gt; delayedLowerCase(s)),</span><br><span class="line">    s -&gt; s + <span class="string">"from applyToEither"</span>);</span><br><span class="line">    assertTrue(cf2.join().endsWith(<span class="string">"from applyToEither"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们想要使用消费者替换代码 14 的方法方式用于处理异步计算结果，代码如代码 15 所示。</p><p>代码 15 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">acceptEitherExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String original = <span class="string">"Message"</span>;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    CompletableFuture cf = CompletableFuture.completedFuture(original)</span><br><span class="line">    .thenApplyAsync(s -&gt; delayedUpperCase(s))</span><br><span class="line">    .acceptEither(CompletableFuture.completedFuture(original).thenApplyAsync(s -&gt; delayedLowerCase(s)),</span><br><span class="line">    s -&gt; result.append(s).append(<span class="string">"acceptEither"</span>));</span><br><span class="line">    cf.join();</span><br><span class="line">    assertTrue(<span class="string">"Result was empty"</span>, result.toString().endsWith(<span class="string">"acceptEither"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="运行两个阶段后执行"><a href="#运行两个阶段后执行" class="headerlink" title="运行两个阶段后执行"></a>运行两个阶段后执行</h2><p>下面这个示例程序两个阶段执行完毕后返回结果，首先将字符转为大写，然后将字符转为小写，在两个计算阶段都结束之后触发 CompletableFuture。</p><p>代码 16 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runAfterBothExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String original = <span class="string">"Message"</span>;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    CompletableFuture.completedFuture(original).thenApply(String::toUpperCase).runAfterBoth(</span><br><span class="line">    CompletableFuture.completedFuture(original).thenApply(String::toLowerCase),</span><br><span class="line">    () -&gt; result.append(<span class="string">"done"</span>));</span><br><span class="line">    assertTrue(<span class="string">"Result was empty"</span>, result.length() &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以通过以下方式处理异步计算结果，</p><p>代码 17 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thenAcceptBothExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String original = <span class="string">"Message"</span>;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    CompletableFuture.completedFuture(original).thenApply(String::toUpperCase).thenAcceptBoth(</span><br><span class="line">    CompletableFuture.completedFuture(original).thenApply(String::toLowerCase),</span><br><span class="line">    (s1, s2) -&gt; result.append(s1 + s2));</span><br><span class="line">    assertEquals(<span class="string">"MESSAGEmessage"</span>, result.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="整合两个计算结果"><a href="#整合两个计算结果" class="headerlink" title="整合两个计算结果"></a>整合两个计算结果</h2><p>我们可以通过 thenCombine() 方法整合两个异步计算的结果，注意，以下代码的整个程序过程是同步的，getNow() 方法最终会输出整合后的结果，也就是说大写字符和小写字符的串联值。</p><p>代码 18 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thenCombineExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String original = <span class="string">"Message"</span>;</span><br><span class="line">    CompletableFuture cf = CompletableFuture.completedFuture(original).thenApply(s -&gt; delayedUpperCase(s))</span><br><span class="line">    .thenCombine(CompletableFuture.completedFuture(original).thenApply(s -&gt; delayedLowerCase(s)),</span><br><span class="line">    (s1, s2) -&gt; s1 + s2);</span><br><span class="line">    assertEquals(<span class="string">"MESSAGEmessage"</span>, cf.getNow(<span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这个示例是按照同步方式执行两个方法后再合成字符串，以下代码采用异步方式同步执行两个方法，由于异步方式情况下不能够确定哪一个方法最终执行完毕，所以我们需要调用 join() 方法等待后一个方法结束后再合成字符串，这一点和线程的 join() 方法是一致的，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到 join() 方法了，即 join() 的作用是：”等待该线程终止”。</p><p>代码 19 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thenCombineAsyncExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String original = <span class="string">"Message"</span>;</span><br><span class="line">    CompletableFuture cf = CompletableFuture.completedFuture(original)</span><br><span class="line">    .thenApplyAsync(s -&gt; delayedUpperCase(s))</span><br><span class="line">    .thenCombine(CompletableFuture.completedFuture(original).thenApplyAsync(s -&gt; delayedLowerCase(s)),</span><br><span class="line">    assertEquals(<span class="string">"MESSAGEmessage"</span>, cf.join());</span><br><span class="line">    (s1, s2) -&gt; s1 + s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了 thenCombine() 方法以外，还有另外一种方法 - thenCompose()，这个方法也会实现两个方法执行后的返回结果的连接。</p><p>代码 20 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thenComposeExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String original = <span class="string">"Message"</span>;</span><br><span class="line">    CompletableFuture cf = CompletableFuture.completedFuture(original).thenApply(s -&gt; delayedUpperCase(s))</span><br><span class="line">    .thenCompose(upper -&gt; CompletableFuture.completedFuture(original).thenApply(s -&gt; delayedLowerCase(s))</span><br><span class="line">    .thenApply(s -&gt; upper + s));</span><br><span class="line">    assertEquals(<span class="string">"MESSAGEmessage"</span>, cf.join());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="anyOf-方法"><a href="#anyOf-方法" class="headerlink" title="anyOf() 方法"></a>anyOf() 方法</h2><p>以下代码模拟了如何在几个计算过程中任意一个完成后创建 CompletableFuture，在这个例子中，我们创建了几个计算过程，然后转换字符串到大写字符。由于这些 CompletableFuture 是同步执行的（下面这个例子使用的是 thenApply() 方法，而不是 thenApplyAsync() 方法），使用 anyOf() 方法后返回的任何一个值都会立即触发 CompletableFuture。然后我们使用 whenComplete(BiConsumer&lt;? super Object, ? super Throwable&gt; action) 方法处理结果。</p><p>代码 21 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">anyOfExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    List messages = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">    List&lt;CompletableFuture&gt; futures = messages.stream()</span><br><span class="line">    .map(msg -&gt; CompletableFuture.completedFuture(msg).thenApply(s -&gt; delayedUpperCase(s)))</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">    CompletableFuture.anyOf(futures.toArray(<span class="keyword">new</span> CompletableFuture[futures.size()])).whenComplete((res, th) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(th == <span class="keyword">null</span>) &#123;</span><br><span class="line">        assertTrue(isUpperCase((String) res));</span><br><span class="line">        result.append(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">    assertTrue(<span class="string">"Result was empty"</span>, result.length() &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="当所有的-CompletableFuture-完成后创建-CompletableFuture"><a href="#当所有的-CompletableFuture-完成后创建-CompletableFuture" class="headerlink" title="当所有的 CompletableFuture 完成后创建 CompletableFuture"></a>当所有的 CompletableFuture 完成后创建 CompletableFuture</h2><p>代码 22 所示我们会以同步方式执行多个异步计算过程，在所有计算过程都完成后，创建一个 CompletableFuture。</p><p>代码 22 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allOfExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    List messages = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">    List&lt;CompletableFuture&gt; futures = messages.stream()</span><br><span class="line">    .map(msg -&gt; CompletableFuture.completedFuture(msg).thenApply(s -&gt; delayedUpperCase(s)))</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">    CompletableFuture.allOf(futures.toArray(<span class="keyword">new</span> CompletableFuture[futures.size()])).whenComplete((v, th) -&gt; &#123;</span><br><span class="line">        futures.forEach(cf -&gt; assertTrue(isUpperCase(cf.getNow(<span class="keyword">null</span>))));</span><br><span class="line">        result.append(<span class="string">"done"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">    assertTrue(<span class="string">"Result was empty"</span>, result.length() &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相较于前一个同步示例，我们也可以异步执行，如代码 23 所示。</p><p>代码 23 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allOfAsyncExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    List messages = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">    List&lt;CompletableFuture&gt; futures = messages.stream()</span><br><span class="line">    .map(msg -&gt; CompletableFuture.completedFuture(msg).thenApplyAsync(s -&gt; delayedUpperCase(s)))</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">    CompletableFuture allOf = CompletableFuture.allOf(futures.toArray(<span class="keyword">new</span> CompletableFuture[futures.size()]))</span><br><span class="line">.whenComplete((v, th) -&gt; &#123;</span><br><span class="line">    futures.forEach(cf -&gt; assertTrue(isUpperCase(cf.getNow(<span class="keyword">null</span>))));</span><br><span class="line">    result.append(<span class="string">"done"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">    allOf.join();</span><br><span class="line">    assertTrue(<span class="string">"Result was empty"</span>, result.length() &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>以下代码完成的操作包括：</p><ol><li>首先异步地通过调用 cars() 方法获取 Car 对象，返回一个 CompletionStage<list> 实例。Cars() 方法可以在内部使用调用远端服务器上的 REST 服务等类似场景。</list></li><li>然后和其他的 CompletionStage<list> 组合，通过调用 rating(manufacturerId) 方法异步地返回 CompletionStage 实例。</list></li><li>当所有的 Car 对象都被填充了 rating 后，调用 allOf() 方法获取最终值。</li><li>调用 whenComplete() 方法打印最终的评分（rating）。</li></ol><p>代码 24 示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cars().thenCompose(cars -&gt; &#123;</span><br><span class="line">    List&lt;CompletionStage&gt; updatedCars = cars.stream()</span><br><span class="line">    .map(car -&gt; rating(car.manufacturerId).thenApply(r -&gt; &#123;</span><br><span class="line">    car.setRating(r);</span><br><span class="line">    <span class="keyword">return</span> car;</span><br><span class="line">     &#125;)).collect(Collectors.toList());</span><br><span class="line">    CompletableFuture done = CompletableFuture</span><br><span class="line">    .allOf(updatedCars.toArray(<span class="keyword">new</span> CompletableFuture[updatedCars.size()]));</span><br><span class="line">    <span class="keyword">return</span> done.thenApply(v -&gt; updatedCars.stream().map(CompletionStage::toCompletableFuture)</span><br><span class="line">    .map(CompletableFuture::join).collect(Collectors.toList()));</span><br><span class="line">    &#125;).whenComplete((cars, th) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (th == <span class="keyword">null</span>) &#123;</span><br><span class="line">    cars.forEach(System.out::println);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(th);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toCompletableFuture().join();</span><br></pre></td></tr></table></figure></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>Completable 类为我们提供了丰富的异步计算调用方式，我们可以通过上述基本操作描述及 20 个示例程序进一步了解如果使用 CompletableFuture 类实现我们的需求，期待 JDK10 会有持续更新。</p><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p>参考 developerWorks 上的 Java 8 文章，了解更多 Java 8 知识。</p><p>参考书籍 Java 8 in Action Raoul-Gabriel Urma</p><p>参考书籍 Mastering Lambdas: Java Programming in a Multicore World Maurice Naftalin</p><p>参考文章 <a href="http://codingjunkie.net/completable-futures-part1/" target="_blank" rel="noopener">Java 8 CompletableFutures</a>，这篇文章从基础介绍了 CompletableFuture 类的使用方式。</p>]]></content>
    
    <summary type="html">
    
      本文是针对 JDK8 的 CompletableFuture 类进行解读的示例文章，我们知道不是所有的问题都适合这种风格的并行处理，例如我们所需要处理的元素必须是独立的，数据集要足够大，并且在并行加速方面，每个元素的处理成本要足够高，这样才能补偿建立 fork/join 框架所消耗的成本。本文将通过对 Future 类的解释、对 CompletableFuture 类的解释，以及使用 CompletableFuture 类的若干示例代码完成解读。
    
    </summary>
    
      <category term="Java" scheme="http://localhost/categories/Java/"/>
    
      <category term="JDK8" scheme="http://localhost/categories/Java/JDK8/"/>
    
    
      <category term="Java" scheme="http://localhost/tags/Java/"/>
    
      <category term="JDK8" scheme="http://localhost/tags/JDK8/"/>
    
  </entry>
  
</feed>
